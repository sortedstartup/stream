// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const createPlan = `-- name: CreatePlan :one
INSERT INTO paymentservice_plans (
    id, name, price_cents, is_active, created_at, updated_at
) VALUES (?, ?, ?, TRUE, ?, ?)
RETURNING id, name, price_cents, is_active, created_at, updated_at
`

type CreatePlanParams struct {
	ID         string
	Name       string
	PriceCents sql.NullInt64
	CreatedAt  int64
	UpdatedAt  int64
}

func (q *Queries) CreatePlan(ctx context.Context, arg CreatePlanParams) (PaymentservicePlan, error) {
	row := q.db.QueryRowContext(ctx, createPlan,
		arg.ID,
		arg.Name,
		arg.PriceCents,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i PaymentservicePlan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PriceCents,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUserSubscription = `-- name: CreateUserSubscription :one
INSERT INTO paymentservice_user_subscriptions (
    id, user_id, plan_id, provider, provider_customer_id, 
    provider_subscription_id, status, current_period_start, 
    current_period_end, created_at, updated_at
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id, user_id, plan_id, provider, provider_customer_id, provider_subscription_id, status, current_period_start, current_period_end, created_at, updated_at
`

type CreateUserSubscriptionParams struct {
	ID                     string
	UserID                 string
	PlanID                 string
	Provider               string
	ProviderCustomerID     sql.NullString
	ProviderSubscriptionID sql.NullString
	Status                 string
	CurrentPeriodStart     sql.NullInt64
	CurrentPeriodEnd       sql.NullInt64
	CreatedAt              int64
	UpdatedAt              int64
}

func (q *Queries) CreateUserSubscription(ctx context.Context, arg CreateUserSubscriptionParams) (PaymentserviceUserSubscription, error) {
	row := q.db.QueryRowContext(ctx, createUserSubscription,
		arg.ID,
		arg.UserID,
		arg.PlanID,
		arg.Provider,
		arg.ProviderCustomerID,
		arg.ProviderSubscriptionID,
		arg.Status,
		arg.CurrentPeriodStart,
		arg.CurrentPeriodEnd,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i PaymentserviceUserSubscription
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PlanID,
		&i.Provider,
		&i.ProviderCustomerID,
		&i.ProviderSubscriptionID,
		&i.Status,
		&i.CurrentPeriodStart,
		&i.CurrentPeriodEnd,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getActivePlans = `-- name: GetActivePlans :many
SELECT id, name, price_cents, is_active, created_at, updated_at FROM paymentservice_plans WHERE is_active = TRUE ORDER BY price_cents ASC
`

func (q *Queries) GetActivePlans(ctx context.Context) ([]PaymentservicePlan, error) {
	rows, err := q.db.QueryContext(ctx, getActivePlans)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PaymentservicePlan
	for rows.Next() {
		var i PaymentservicePlan
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.PriceCents,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlan = `-- name: GetPlan :one

SELECT id, name, price_cents, is_active, created_at, updated_at FROM paymentservice_plans WHERE id = ? LIMIT 1
`

// Generic Payment Service Queries (Application Agnostic)
// Plan queries
func (q *Queries) GetPlan(ctx context.Context, id string) (PaymentservicePlan, error) {
	row := q.db.QueryRowContext(ctx, getPlan, id)
	var i PaymentservicePlan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PriceCents,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByProviderSubscriptionID = `-- name: GetUserByProviderSubscriptionID :one
SELECT user_id FROM paymentservice_user_subscriptions 
WHERE provider_subscription_id = ? LIMIT 1
`

func (q *Queries) GetUserByProviderSubscriptionID(ctx context.Context, providerSubscriptionID sql.NullString) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserByProviderSubscriptionID, providerSubscriptionID)
	var user_id string
	err := row.Scan(&user_id)
	return user_id, err
}

const getUserSubscription = `-- name: GetUserSubscription :one
SELECT id, user_id, plan_id, provider, provider_customer_id, provider_subscription_id, status, current_period_start, current_period_end, created_at, updated_at FROM paymentservice_user_subscriptions WHERE user_id = ? LIMIT 1
`

// User subscription queries (core functionality)
func (q *Queries) GetUserSubscription(ctx context.Context, userID string) (PaymentserviceUserSubscription, error) {
	row := q.db.QueryRowContext(ctx, getUserSubscription, userID)
	var i PaymentserviceUserSubscription
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PlanID,
		&i.Provider,
		&i.ProviderCustomerID,
		&i.ProviderSubscriptionID,
		&i.Status,
		&i.CurrentPeriodStart,
		&i.CurrentPeriodEnd,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePlan = `-- name: UpdatePlan :one
UPDATE paymentservice_plans 
SET name = ?, price_cents = ?, updated_at = ?
WHERE id = ?
RETURNING id, name, price_cents, is_active, created_at, updated_at
`

type UpdatePlanParams struct {
	Name       string
	PriceCents sql.NullInt64
	UpdatedAt  int64
	ID         string
}

func (q *Queries) UpdatePlan(ctx context.Context, arg UpdatePlanParams) (PaymentservicePlan, error) {
	row := q.db.QueryRowContext(ctx, updatePlan,
		arg.Name,
		arg.PriceCents,
		arg.UpdatedAt,
		arg.ID,
	)
	var i PaymentservicePlan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PriceCents,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserSubscriptionPlan = `-- name: UpdateUserSubscriptionPlan :exec
UPDATE paymentservice_user_subscriptions 
SET plan_id = ?, updated_at = ?
WHERE user_id = ?
`

type UpdateUserSubscriptionPlanParams struct {
	PlanID    string
	UpdatedAt int64
	UserID    string
}

func (q *Queries) UpdateUserSubscriptionPlan(ctx context.Context, arg UpdateUserSubscriptionPlanParams) error {
	_, err := q.db.ExecContext(ctx, updateUserSubscriptionPlan, arg.PlanID, arg.UpdatedAt, arg.UserID)
	return err
}

const updateUserSubscriptionProvider = `-- name: UpdateUserSubscriptionProvider :exec
UPDATE paymentservice_user_subscriptions 
SET provider_customer_id = ?, provider_subscription_id = ?, updated_at = ?
WHERE user_id = ?
`

type UpdateUserSubscriptionProviderParams struct {
	ProviderCustomerID     sql.NullString
	ProviderSubscriptionID sql.NullString
	UpdatedAt              int64
	UserID                 string
}

func (q *Queries) UpdateUserSubscriptionProvider(ctx context.Context, arg UpdateUserSubscriptionProviderParams) error {
	_, err := q.db.ExecContext(ctx, updateUserSubscriptionProvider,
		arg.ProviderCustomerID,
		arg.ProviderSubscriptionID,
		arg.UpdatedAt,
		arg.UserID,
	)
	return err
}

const updateUserSubscriptionStatus = `-- name: UpdateUserSubscriptionStatus :exec
UPDATE paymentservice_user_subscriptions 
SET status = ?, current_period_start = ?, current_period_end = ?, updated_at = ?
WHERE user_id = ?
`

type UpdateUserSubscriptionStatusParams struct {
	Status             string
	CurrentPeriodStart sql.NullInt64
	CurrentPeriodEnd   sql.NullInt64
	UpdatedAt          int64
	UserID             string
}

func (q *Queries) UpdateUserSubscriptionStatus(ctx context.Context, arg UpdateUserSubscriptionStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateUserSubscriptionStatus,
		arg.Status,
		arg.CurrentPeriodStart,
		arg.CurrentPeriodEnd,
		arg.UpdatedAt,
		arg.UserID,
	)
	return err
}

// Code generated by MockGen. DO NOT EDIT.
// Source: commentservice/db/querier.go

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "sortedstartup.com/stream/commentservice/db"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// CheckUserLikedComment mocks base method.
func (m *MockQuerier) CheckUserLikedComment(ctx context.Context, arg db.CheckUserLikedCommentParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserLikedComment", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserLikedComment indicates an expected call of CheckUserLikedComment.
func (mr *MockQuerierMockRecorder) CheckUserLikedComment(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserLikedComment", reflect.TypeOf((*MockQuerier)(nil).CheckUserLikedComment), ctx, arg)
}

// CreateComment mocks base method.
func (m *MockQuerier) CreateComment(ctx context.Context, arg db.CreateCommentParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockQuerierMockRecorder) CreateComment(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockQuerier)(nil).CreateComment), ctx, arg)
}

// DeleteComment mocks base method.
func (m *MockQuerier) DeleteComment(ctx context.Context, arg db.DeleteCommentParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockQuerierMockRecorder) DeleteComment(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockQuerier)(nil).DeleteComment), ctx, arg)
}

// GetAllCommentsByUserPaginated mocks base method.
func (m *MockQuerier) GetAllCommentsByUserPaginated(ctx context.Context, arg db.GetAllCommentsByUserPaginatedParams) ([]db.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCommentsByUserPaginated", ctx, arg)
	ret0, _ := ret[0].([]db.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCommentsByUserPaginated indicates an expected call of GetAllCommentsByUserPaginated.
func (mr *MockQuerierMockRecorder) GetAllCommentsByUserPaginated(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCommentsByUserPaginated", reflect.TypeOf((*MockQuerier)(nil).GetAllCommentsByUserPaginated), ctx, arg)
}

// GetComentsAndRepliesForVideoID mocks base method.
func (m *MockQuerier) GetComentsAndRepliesForVideoID(ctx context.Context, videoID string) ([]db.GetComentsAndRepliesForVideoIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComentsAndRepliesForVideoID", ctx, videoID)
	ret0, _ := ret[0].([]db.GetComentsAndRepliesForVideoIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComentsAndRepliesForVideoID indicates an expected call of GetComentsAndRepliesForVideoID.
func (mr *MockQuerierMockRecorder) GetComentsAndRepliesForVideoID(ctx, videoID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComentsAndRepliesForVideoID", reflect.TypeOf((*MockQuerier)(nil).GetComentsAndRepliesForVideoID), ctx, videoID)
}

// GetCommentByID mocks base method.
func (m *MockQuerier) GetCommentByID(ctx context.Context, arg db.GetCommentByIDParams) (db.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentByID", ctx, arg)
	ret0, _ := ret[0].(db.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentByID indicates an expected call of GetCommentByID.
func (mr *MockQuerierMockRecorder) GetCommentByID(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentByID", reflect.TypeOf((*MockQuerier)(nil).GetCommentByID), ctx, arg)
}

// GetCommentCount mocks base method.
func (m *MockQuerier) GetCommentCount(ctx context.Context, videoID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentCount", ctx, videoID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentCount indicates an expected call of GetCommentCount.
func (mr *MockQuerierMockRecorder) GetCommentCount(ctx, videoID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentCount", reflect.TypeOf((*MockQuerier)(nil).GetCommentCount), ctx, videoID)
}

// GetCommentLikesCount mocks base method.
func (m *MockQuerier) GetCommentLikesCount(ctx context.Context, commentID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentLikesCount", ctx, commentID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentLikesCount indicates an expected call of GetCommentLikesCount.
func (mr *MockQuerierMockRecorder) GetCommentLikesCount(ctx, commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentLikesCount", reflect.TypeOf((*MockQuerier)(nil).GetCommentLikesCount), ctx, commentID)
}

// GetCommentsByVideo mocks base method.
func (m *MockQuerier) GetCommentsByVideo(ctx context.Context, videoID string) ([]db.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsByVideo", ctx, videoID)
	ret0, _ := ret[0].([]db.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsByVideo indicates an expected call of GetCommentsByVideo.
func (mr *MockQuerierMockRecorder) GetCommentsByVideo(ctx, videoID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsByVideo", reflect.TypeOf((*MockQuerier)(nil).GetCommentsByVideo), ctx, videoID)
}

// GetCommentsByVideoPaginated mocks base method.
func (m *MockQuerier) GetCommentsByVideoPaginated(ctx context.Context, arg db.GetCommentsByVideoPaginatedParams) ([]db.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsByVideoPaginated", ctx, arg)
	ret0, _ := ret[0].([]db.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsByVideoPaginated indicates an expected call of GetCommentsByVideoPaginated.
func (mr *MockQuerierMockRecorder) GetCommentsByVideoPaginated(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsByVideoPaginated", reflect.TypeOf((*MockQuerier)(nil).GetCommentsByVideoPaginated), ctx, arg)
}

// GetRepliesByCommentID mocks base method.
func (m *MockQuerier) GetRepliesByCommentID(ctx context.Context, commentID sql.NullString) ([]db.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepliesByCommentID", ctx, commentID)
	ret0, _ := ret[0].([]db.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepliesByCommentID indicates an expected call of GetRepliesByCommentID.
func (mr *MockQuerierMockRecorder) GetRepliesByCommentID(ctx, commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepliesByCommentID", reflect.TypeOf((*MockQuerier)(nil).GetRepliesByCommentID), ctx, commentID)
}

// LikeComment mocks base method.
func (m *MockQuerier) LikeComment(ctx context.Context, arg db.LikeCommentParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikeComment", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// LikeComment indicates an expected call of LikeComment.
func (mr *MockQuerierMockRecorder) LikeComment(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikeComment", reflect.TypeOf((*MockQuerier)(nil).LikeComment), ctx, arg)
}

// ListComments mocks base method.
func (m *MockQuerier) ListComments(ctx context.Context) ([]db.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComments", ctx)
	ret0, _ := ret[0].([]db.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComments indicates an expected call of ListComments.
func (mr *MockQuerierMockRecorder) ListComments(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComments", reflect.TypeOf((*MockQuerier)(nil).ListComments), ctx)
}

// UnlikeComment mocks base method.
func (m *MockQuerier) UnlikeComment(ctx context.Context, arg db.UnlikeCommentParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlikeComment", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlikeComment indicates an expected call of UnlikeComment.
func (mr *MockQuerierMockRecorder) UnlikeComment(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlikeComment", reflect.TypeOf((*MockQuerier)(nil).UnlikeComment), ctx, arg)
}

// UpdateComment mocks base method.
func (m *MockQuerier) UpdateComment(ctx context.Context, arg db.UpdateCommentParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockQuerierMockRecorder) UpdateComment(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockQuerier)(nil).UpdateComment), ctx, arg)
}

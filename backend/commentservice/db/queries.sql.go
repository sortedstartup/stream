// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package db

import (
	"context"
)

const createComment = `-- name: CreateComment :exec
INSERT INTO comments (
    id,
    content,
    video_id,
    user_id,
    created_at,
    updated_at
) VALUES (
    ?1,
    ?2,
    ?3,
    ?4,
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP
)
`

type CreateCommentParams struct {
	ID      string
	Content string
	VideoID string
	UserID  string
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) error {
	_, err := q.db.ExecContext(ctx, createComment,
		arg.ID,
		arg.Content,
		arg.VideoID,
		arg.UserID,
	)
	return err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments 
WHERE id = ?1 AND user_id = ?2
`

type DeleteCommentParams struct {
	ID     string
	UserID string
}

func (q *Queries) DeleteComment(ctx context.Context, arg DeleteCommentParams) error {
	_, err := q.db.ExecContext(ctx, deleteComment, arg.ID, arg.UserID)
	return err
}

const getAllCommentsByUserPaginated = `-- name: GetAllCommentsByUserPaginated :many
SELECT id, content, video_id, user_id, created_at, updated_at FROM comments 
WHERE user_id = ?1
ORDER BY created_at DESC
LIMIT ?3 OFFSET (?2 * ?3)
`

type GetAllCommentsByUserPaginatedParams struct {
	UserID     string
	PageNumber interface{}
	PageSize   int64
}

func (q *Queries) GetAllCommentsByUserPaginated(ctx context.Context, arg GetAllCommentsByUserPaginatedParams) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getAllCommentsByUserPaginated, arg.UserID, arg.PageNumber, arg.PageSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.VideoID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommentByID = `-- name: GetCommentByID :one
SELECT id, content, video_id, user_id, created_at, updated_at FROM comments 
WHERE id = ?1 AND user_id = ?2
LIMIT 1
`

type GetCommentByIDParams struct {
	ID     string
	UserID string
}

func (q *Queries) GetCommentByID(ctx context.Context, arg GetCommentByIDParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getCommentByID, arg.ID, arg.UserID)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.VideoID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCommentCount = `-- name: GetCommentCount :one
SELECT COUNT(*) FROM comments WHERE video_id = ?1
`

func (q *Queries) GetCommentCount(ctx context.Context, videoID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCommentCount, videoID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCommentsByVideo = `-- name: GetCommentsByVideo :many
SELECT id, content, video_id, user_id, created_at, updated_at FROM comments 
WHERE video_id = ?1
ORDER BY created_at DESC
`

func (q *Queries) GetCommentsByVideo(ctx context.Context, videoID string) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getCommentsByVideo, videoID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.VideoID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommentsByVideoPaginated = `-- name: GetCommentsByVideoPaginated :many
SELECT id, content, video_id, user_id, created_at, updated_at FROM comments 
WHERE video_id = ?1
ORDER BY created_at DESC
LIMIT ?3 OFFSET (?2 * ?3)
`

type GetCommentsByVideoPaginatedParams struct {
	VideoID    string
	PageNumber interface{}
	PageSize   int64
}

func (q *Queries) GetCommentsByVideoPaginated(ctx context.Context, arg GetCommentsByVideoPaginatedParams) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getCommentsByVideoPaginated, arg.VideoID, arg.PageNumber, arg.PageSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.VideoID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateComment = `-- name: UpdateComment :exec
UPDATE comments 
SET content = ?1, updated_at = CURRENT_TIMESTAMP
WHERE id = ?2 AND user_id = ?3
`

type UpdateCommentParams struct {
	Content string
	ID      string
	UserID  string
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) error {
	_, err := q.db.ExecContext(ctx, updateComment, arg.Content, arg.ID, arg.UserID)
	return err
}

const test = `-- name: test :many
select id, content, video_id, user_id, created_at, updated_at from comments
`

func (q *Queries) test(ctx context.Context) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, test)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.VideoID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

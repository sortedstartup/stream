// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package db

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    id,
    username,
    email,
    avatar_url,
    created_at
) VALUES (
    ?1,
    ?2,
    ?3,
    ?4,
    ?5
) RETURNING id, username, email, avatar_url, created_at
`

type CreateUserParams struct {
	ID        string
	Username  string
	Email     string
	AvatarUrl string
	CreatedAt time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.AvatarUrl,
		arg.CreatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.AvatarUrl,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, avatar_url, created_at FROM users 
WHERE email = ?1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.AvatarUrl,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users 
SET 
    username = COALESCE(?1, username),
    email = COALESCE(?2, email),
    avatar_url = COALESCE(?3, avatar_url)  
WHERE id = ?4
RETURNING id, username, email, avatar_url, created_at
`

type UpdateUserParams struct {
	Username  string
	Email     string
	AvatarUrl string
	ID        string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Username,
		arg.Email,
		arg.AvatarUrl,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.AvatarUrl,
		&i.CreatedAt,
	)
	return i, err
}

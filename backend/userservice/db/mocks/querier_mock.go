// Code generated by MockGen. DO NOT EDIT.
// Source: userservice/db/queries_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "sortedstartup.com/stream/userservice/db"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// CreateTenant mocks base method.
func (m *MockQuerier) CreateTenant(ctx context.Context, params db.CreateTenantParams) (db.UserserviceTenant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTenant", ctx, params)
	ret0, _ := ret[0].(db.UserserviceTenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTenant indicates an expected call of CreateTenant.
func (mr *MockQuerierMockRecorder) CreateTenant(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTenant", reflect.TypeOf((*MockQuerier)(nil).CreateTenant), ctx, params)
}

// CreateTenantUser mocks base method.
func (m *MockQuerier) CreateTenantUser(ctx context.Context, params db.CreateTenantUserParams) (db.UserserviceTenantUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTenantUser", ctx, params)
	ret0, _ := ret[0].(db.UserserviceTenantUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTenantUser indicates an expected call of CreateTenantUser.
func (mr *MockQuerierMockRecorder) CreateTenantUser(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTenantUser", reflect.TypeOf((*MockQuerier)(nil).CreateTenantUser), ctx, params)
}

// CreateUser mocks base method.
func (m *MockQuerier) CreateUser(ctx context.Context, params db.CreateUserParams) (db.UserserviceUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, params)
	ret0, _ := ret[0].(db.UserserviceUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockQuerierMockRecorder) CreateUser(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockQuerier)(nil).CreateUser), ctx, params)
}

// GetTenantUsers mocks base method.
func (m *MockQuerier) GetTenantUsers(ctx context.Context, tenantID string) ([]db.GetTenantUsersRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenantUsers", ctx, tenantID)
	ret0, _ := ret[0].([]db.GetTenantUsersRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenantUsers indicates an expected call of GetTenantUsers.
func (mr *MockQuerierMockRecorder) GetTenantUsers(ctx, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenantUsers", reflect.TypeOf((*MockQuerier)(nil).GetTenantUsers), ctx, tenantID)
}

// GetUserByEmail mocks base method.
func (m *MockQuerier) GetUserByEmail(ctx context.Context, email string) (db.UserserviceUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(db.UserserviceUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockQuerierMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockQuerier)(nil).GetUserByEmail), ctx, email)
}

// GetUserRoleInTenant mocks base method.
func (m *MockQuerier) GetUserRoleInTenant(ctx context.Context, params db.GetUserRoleInTenantParams) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRoleInTenant", ctx, params)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoleInTenant indicates an expected call of GetUserRoleInTenant.
func (mr *MockQuerierMockRecorder) GetUserRoleInTenant(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoleInTenant", reflect.TypeOf((*MockQuerier)(nil).GetUserRoleInTenant), ctx, params)
}

// GetUserTenants mocks base method.
func (m *MockQuerier) GetUserTenants(ctx context.Context, userID string) ([]db.GetUserTenantsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTenants", ctx, userID)
	ret0, _ := ret[0].([]db.GetUserTenantsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTenants indicates an expected call of GetUserTenants.
func (mr *MockQuerierMockRecorder) GetUserTenants(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTenants", reflect.TypeOf((*MockQuerier)(nil).GetUserTenants), ctx, userID)
}

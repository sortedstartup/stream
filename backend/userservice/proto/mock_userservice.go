// Code generated by MockGen. DO NOT EDIT.
// Source: userservice/proto/userservice_grpc.pb.go

// Package proto is a generated GoMock package.
package proto

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockUserServiceClient is a mock of UserServiceClient interface.
type MockUserServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceClientMockRecorder
}

// MockUserServiceClientMockRecorder is the mock recorder for MockUserServiceClient.
type MockUserServiceClientMockRecorder struct {
	mock *MockUserServiceClient
}

// NewMockUserServiceClient creates a new mock instance.
func NewMockUserServiceClient(ctrl *gomock.Controller) *MockUserServiceClient {
	mock := &MockUserServiceClient{ctrl: ctrl}
	mock.recorder = &MockUserServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceClient) EXPECT() *MockUserServiceClientMockRecorder {
	return m.recorder
}

// CreateUserIfNotExists mocks base method.
func (m *MockUserServiceClient) CreateUserIfNotExists(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUserIfNotExists", varargs...)
	ret0, _ := ret[0].(*CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserIfNotExists indicates an expected call of CreateUserIfNotExists.
func (mr *MockUserServiceClientMockRecorder) CreateUserIfNotExists(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserIfNotExists", reflect.TypeOf((*MockUserServiceClient)(nil).CreateUserIfNotExists), varargs...)
}

// GetTenants mocks base method.
func (m *MockUserServiceClient) GetTenants(ctx context.Context, in *GetTenantsRequest, opts ...grpc.CallOption) (*GetTenantsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTenants", varargs...)
	ret0, _ := ret[0].(*GetTenantsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenants indicates an expected call of GetTenants.
func (mr *MockUserServiceClientMockRecorder) GetTenants(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenants", reflect.TypeOf((*MockUserServiceClient)(nil).GetTenants), varargs...)
}

// MockUserServiceServer is a mock of UserServiceServer interface.
type MockUserServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceServerMockRecorder
}

// MockUserServiceServerMockRecorder is the mock recorder for MockUserServiceServer.
type MockUserServiceServerMockRecorder struct {
	mock *MockUserServiceServer
}

// NewMockUserServiceServer creates a new mock instance.
func NewMockUserServiceServer(ctrl *gomock.Controller) *MockUserServiceServer {
	mock := &MockUserServiceServer{ctrl: ctrl}
	mock.recorder = &MockUserServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceServer) EXPECT() *MockUserServiceServerMockRecorder {
	return m.recorder
}

// CreateUserIfNotExists mocks base method.
func (m *MockUserServiceServer) CreateUserIfNotExists(arg0 context.Context, arg1 *CreateUserRequest) (*CreateUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserIfNotExists", arg0, arg1)
	ret0, _ := ret[0].(*CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserIfNotExists indicates an expected call of CreateUserIfNotExists.
func (mr *MockUserServiceServerMockRecorder) CreateUserIfNotExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserIfNotExists", reflect.TypeOf((*MockUserServiceServer)(nil).CreateUserIfNotExists), arg0, arg1)
}

// GetTenants mocks base method.
func (m *MockUserServiceServer) GetTenants(arg0 context.Context, arg1 *GetTenantsRequest) (*GetTenantsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenants", arg0, arg1)
	ret0, _ := ret[0].(*GetTenantsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenants indicates an expected call of GetTenants.
func (mr *MockUserServiceServerMockRecorder) GetTenants(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenants", reflect.TypeOf((*MockUserServiceServer)(nil).GetTenants), arg0, arg1)
}

// mustEmbedUnimplementedUserServiceServer mocks base method.
func (m *MockUserServiceServer) mustEmbedUnimplementedUserServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUserServiceServer")
}

// mustEmbedUnimplementedUserServiceServer indicates an expected call of mustEmbedUnimplementedUserServiceServer.
func (mr *MockUserServiceServerMockRecorder) mustEmbedUnimplementedUserServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUserServiceServer", reflect.TypeOf((*MockUserServiceServer)(nil).mustEmbedUnimplementedUserServiceServer))
}

// MockUnsafeUserServiceServer is a mock of UnsafeUserServiceServer interface.
type MockUnsafeUserServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeUserServiceServerMockRecorder
}

// MockUnsafeUserServiceServerMockRecorder is the mock recorder for MockUnsafeUserServiceServer.
type MockUnsafeUserServiceServerMockRecorder struct {
	mock *MockUnsafeUserServiceServer
}

// NewMockUnsafeUserServiceServer creates a new mock instance.
func NewMockUnsafeUserServiceServer(ctrl *gomock.Controller) *MockUnsafeUserServiceServer {
	mock := &MockUnsafeUserServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeUserServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeUserServiceServer) EXPECT() *MockUnsafeUserServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedUserServiceServer mocks base method.
func (m *MockUnsafeUserServiceServer) mustEmbedUnimplementedUserServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUserServiceServer")
}

// mustEmbedUnimplementedUserServiceServer indicates an expected call of mustEmbedUnimplementedUserServiceServer.
func (mr *MockUnsafeUserServiceServerMockRecorder) mustEmbedUnimplementedUserServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUserServiceServer", reflect.TypeOf((*MockUnsafeUserServiceServer)(nil).mustEmbedUnimplementedUserServiceServer))
}

// MockTenantServiceClient is a mock of TenantServiceClient interface.
type MockTenantServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTenantServiceClientMockRecorder
}

// MockTenantServiceClientMockRecorder is the mock recorder for MockTenantServiceClient.
type MockTenantServiceClientMockRecorder struct {
	mock *MockTenantServiceClient
}

// NewMockTenantServiceClient creates a new mock instance.
func NewMockTenantServiceClient(ctrl *gomock.Controller) *MockTenantServiceClient {
	mock := &MockTenantServiceClient{ctrl: ctrl}
	mock.recorder = &MockTenantServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTenantServiceClient) EXPECT() *MockTenantServiceClientMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockTenantServiceClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddUser", varargs...)
	ret0, _ := ret[0].(*AddUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockTenantServiceClientMockRecorder) AddUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockTenantServiceClient)(nil).AddUser), varargs...)
}

// CreateTenant mocks base method.
func (m *MockTenantServiceClient) CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*CreateTenantResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTenant", varargs...)
	ret0, _ := ret[0].(*CreateTenantResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTenant indicates an expected call of CreateTenant.
func (mr *MockTenantServiceClientMockRecorder) CreateTenant(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTenant", reflect.TypeOf((*MockTenantServiceClient)(nil).CreateTenant), varargs...)
}

// GetUsers mocks base method.
func (m *MockTenantServiceClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsers", varargs...)
	ret0, _ := ret[0].(*GetUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockTenantServiceClientMockRecorder) GetUsers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockTenantServiceClient)(nil).GetUsers), varargs...)
}

// MockTenantServiceServer is a mock of TenantServiceServer interface.
type MockTenantServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockTenantServiceServerMockRecorder
}

// MockTenantServiceServerMockRecorder is the mock recorder for MockTenantServiceServer.
type MockTenantServiceServerMockRecorder struct {
	mock *MockTenantServiceServer
}

// NewMockTenantServiceServer creates a new mock instance.
func NewMockTenantServiceServer(ctrl *gomock.Controller) *MockTenantServiceServer {
	mock := &MockTenantServiceServer{ctrl: ctrl}
	mock.recorder = &MockTenantServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTenantServiceServer) EXPECT() *MockTenantServiceServerMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockTenantServiceServer) AddUser(arg0 context.Context, arg1 *AddUserRequest) (*AddUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0, arg1)
	ret0, _ := ret[0].(*AddUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockTenantServiceServerMockRecorder) AddUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockTenantServiceServer)(nil).AddUser), arg0, arg1)
}

// CreateTenant mocks base method.
func (m *MockTenantServiceServer) CreateTenant(arg0 context.Context, arg1 *CreateTenantRequest) (*CreateTenantResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTenant", arg0, arg1)
	ret0, _ := ret[0].(*CreateTenantResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTenant indicates an expected call of CreateTenant.
func (mr *MockTenantServiceServerMockRecorder) CreateTenant(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTenant", reflect.TypeOf((*MockTenantServiceServer)(nil).CreateTenant), arg0, arg1)
}

// GetUsers mocks base method.
func (m *MockTenantServiceServer) GetUsers(arg0 context.Context, arg1 *GetUsersRequest) (*GetUsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0, arg1)
	ret0, _ := ret[0].(*GetUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockTenantServiceServerMockRecorder) GetUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockTenantServiceServer)(nil).GetUsers), arg0, arg1)
}

// mustEmbedUnimplementedTenantServiceServer mocks base method.
func (m *MockTenantServiceServer) mustEmbedUnimplementedTenantServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTenantServiceServer")
}

// mustEmbedUnimplementedTenantServiceServer indicates an expected call of mustEmbedUnimplementedTenantServiceServer.
func (mr *MockTenantServiceServerMockRecorder) mustEmbedUnimplementedTenantServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTenantServiceServer", reflect.TypeOf((*MockTenantServiceServer)(nil).mustEmbedUnimplementedTenantServiceServer))
}

// MockUnsafeTenantServiceServer is a mock of UnsafeTenantServiceServer interface.
type MockUnsafeTenantServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeTenantServiceServerMockRecorder
}

// MockUnsafeTenantServiceServerMockRecorder is the mock recorder for MockUnsafeTenantServiceServer.
type MockUnsafeTenantServiceServerMockRecorder struct {
	mock *MockUnsafeTenantServiceServer
}

// NewMockUnsafeTenantServiceServer creates a new mock instance.
func NewMockUnsafeTenantServiceServer(ctrl *gomock.Controller) *MockUnsafeTenantServiceServer {
	mock := &MockUnsafeTenantServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeTenantServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeTenantServiceServer) EXPECT() *MockUnsafeTenantServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedTenantServiceServer mocks base method.
func (m *MockUnsafeTenantServiceServer) mustEmbedUnimplementedTenantServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTenantServiceServer")
}

// mustEmbedUnimplementedTenantServiceServer indicates an expected call of mustEmbedUnimplementedTenantServiceServer.
func (mr *MockUnsafeTenantServiceServerMockRecorder) mustEmbedUnimplementedTenantServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTenantServiceServer", reflect.TypeOf((*MockUnsafeTenantServiceServer)(nil).mustEmbedUnimplementedTenantServiceServer))
}

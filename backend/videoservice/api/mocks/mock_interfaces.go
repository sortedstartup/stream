// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	auth "sortedstartup.com/stream/common/auth"
	api "sortedstartup.com/stream/videoservice/api"
	db "sortedstartup.com/stream/videoservice/db"
	proto "sortedstartup.com/stream/videoservice/proto"
)

// MockPolicyValidator is a mock of PolicyValidator interface.
type MockPolicyValidator struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyValidatorMockRecorder
}

// MockPolicyValidatorMockRecorder is the mock recorder for MockPolicyValidator.
type MockPolicyValidatorMockRecorder struct {
	mock *MockPolicyValidator
}

// NewMockPolicyValidator creates a new mock instance.
func NewMockPolicyValidator(ctrl *gomock.Controller) *MockPolicyValidator {
	mock := &MockPolicyValidator{ctrl: ctrl}
	mock.recorder = &MockPolicyValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolicyValidator) EXPECT() *MockPolicyValidatorMockRecorder {
	return m.recorder
}

// ConvertVideoToProto mocks base method.
func (m *MockPolicyValidator) ConvertVideoToProto(video *db.VideoserviceVideo) *proto.Video {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertVideoToProto", video)
	ret0, _ := ret[0].(*proto.Video)
	return ret0
}

// ConvertVideoToProto indicates an expected call of ConvertVideoToProto.
func (mr *MockPolicyValidatorMockRecorder) ConvertVideoToProto(video interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertVideoToProto", reflect.TypeOf((*MockPolicyValidator)(nil).ConvertVideoToProto), video)
}

// GetAndValidateVideo mocks base method.
func (m *MockPolicyValidator) GetAndValidateVideo(ctx context.Context, videoID, tenantID string) (*db.VideoserviceVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAndValidateVideo", ctx, videoID, tenantID)
	ret0, _ := ret[0].(*db.VideoserviceVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAndValidateVideo indicates an expected call of GetAndValidateVideo.
func (mr *MockPolicyValidatorMockRecorder) GetAndValidateVideo(ctx, videoID, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAndValidateVideo", reflect.TypeOf((*MockPolicyValidator)(nil).GetAndValidateVideo), ctx, videoID, tenantID)
}

// ValidateBasicRequest mocks base method.
func (m *MockPolicyValidator) ValidateBasicRequest(ctx context.Context) (*auth.AuthContext, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateBasicRequest", ctx)
	ret0, _ := ret[0].(*auth.AuthContext)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ValidateBasicRequest indicates an expected call of ValidateBasicRequest.
func (mr *MockPolicyValidatorMockRecorder) ValidateBasicRequest(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateBasicRequest", reflect.TypeOf((*MockPolicyValidator)(nil).ValidateBasicRequest), ctx)
}

// ValidateChannelAccess mocks base method.
func (m *MockPolicyValidator) ValidateChannelAccess(ctx context.Context, channelAPI api.ChannelAPIInterface, channelID, userID, tenantID string, requiredRoles ...string) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, channelAPI, channelID, userID, tenantID}
	for _, a := range requiredRoles {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateChannelAccess", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateChannelAccess indicates an expected call of ValidateChannelAccess.
func (mr *MockPolicyValidatorMockRecorder) ValidateChannelAccess(ctx, channelAPI, channelID, userID, tenantID interface{}, requiredRoles ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, channelAPI, channelID, userID, tenantID}, requiredRoles...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateChannelAccess", reflect.TypeOf((*MockPolicyValidator)(nil).ValidateChannelAccess), varargs...)
}

// ValidateChannelOwnership mocks base method.
func (m *MockPolicyValidator) ValidateChannelOwnership(ctx context.Context, channelAPI api.ChannelAPIInterface, channelID, userID, tenantID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateChannelOwnership", ctx, channelAPI, channelID, userID, tenantID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateChannelOwnership indicates an expected call of ValidateChannelOwnership.
func (mr *MockPolicyValidatorMockRecorder) ValidateChannelOwnership(ctx, channelAPI, channelID, userID, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateChannelOwnership", reflect.TypeOf((*MockPolicyValidator)(nil).ValidateChannelOwnership), ctx, channelAPI, channelID, userID, tenantID)
}

// ValidateVideoDeletionPermissions mocks base method.
func (m *MockPolicyValidator) ValidateVideoDeletionPermissions(ctx context.Context, channelAPI api.ChannelAPIInterface, video *db.VideoserviceVideo, userID, tenantID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateVideoDeletionPermissions", ctx, channelAPI, video, userID, tenantID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateVideoDeletionPermissions indicates an expected call of ValidateVideoDeletionPermissions.
func (mr *MockPolicyValidatorMockRecorder) ValidateVideoDeletionPermissions(ctx, channelAPI, video, userID, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateVideoDeletionPermissions", reflect.TypeOf((*MockPolicyValidator)(nil).ValidateVideoDeletionPermissions), ctx, channelAPI, video, userID, tenantID)
}

// ValidateVideoMovePermissions mocks base method.
func (m *MockPolicyValidator) ValidateVideoMovePermissions(ctx context.Context, channelAPI api.ChannelAPIInterface, video *db.VideoserviceVideo, userID, tenantID, targetChannelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateVideoMovePermissions", ctx, channelAPI, video, userID, tenantID, targetChannelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateVideoMovePermissions indicates an expected call of ValidateVideoMovePermissions.
func (mr *MockPolicyValidatorMockRecorder) ValidateVideoMovePermissions(ctx, channelAPI, video, userID, tenantID, targetChannelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateVideoMovePermissions", reflect.TypeOf((*MockPolicyValidator)(nil).ValidateVideoMovePermissions), ctx, channelAPI, video, userID, tenantID, targetChannelID)
}

// ValidateVideoRemovalPermissions mocks base method.
func (m *MockPolicyValidator) ValidateVideoRemovalPermissions(ctx context.Context, channelAPI api.ChannelAPIInterface, video *db.VideoserviceVideo, userID, tenantID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateVideoRemovalPermissions", ctx, channelAPI, video, userID, tenantID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateVideoRemovalPermissions indicates an expected call of ValidateVideoRemovalPermissions.
func (mr *MockPolicyValidatorMockRecorder) ValidateVideoRemovalPermissions(ctx, channelAPI, video, userID, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateVideoRemovalPermissions", reflect.TypeOf((*MockPolicyValidator)(nil).ValidateVideoRemovalPermissions), ctx, channelAPI, video, userID, tenantID)
}

// MockChannelAPIInterface is a mock of ChannelAPIInterface interface.
type MockChannelAPIInterface struct {
	ctrl     *gomock.Controller
	recorder *MockChannelAPIInterfaceMockRecorder
}

// MockChannelAPIInterfaceMockRecorder is the mock recorder for MockChannelAPIInterface.
type MockChannelAPIInterfaceMockRecorder struct {
	mock *MockChannelAPIInterface
}

// NewMockChannelAPIInterface creates a new mock instance.
func NewMockChannelAPIInterface(ctrl *gomock.Controller) *MockChannelAPIInterface {
	mock := &MockChannelAPIInterface{ctrl: ctrl}
	mock.recorder = &MockChannelAPIInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannelAPIInterface) EXPECT() *MockChannelAPIInterfaceMockRecorder {
	return m.recorder
}

// GetUserRoleInChannel mocks base method.
func (m *MockChannelAPIInterface) GetUserRoleInChannel(ctx context.Context, channelID, userID, tenantID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRoleInChannel", ctx, channelID, userID, tenantID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoleInChannel indicates an expected call of GetUserRoleInChannel.
func (mr *MockChannelAPIInterfaceMockRecorder) GetUserRoleInChannel(ctx, channelID, userID, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoleInChannel", reflect.TypeOf((*MockChannelAPIInterface)(nil).GetUserRoleInChannel), ctx, channelID, userID, tenantID)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: videoservice/db/queries_interface.go

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "sortedstartup.com/stream/videoservice/db"
)

// MockQueriesInterface is a mock of QueriesInterface interface.
type MockQueriesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockQueriesInterfaceMockRecorder
}

// MockQueriesInterfaceMockRecorder is the mock recorder for MockQueriesInterface.
type MockQueriesInterfaceMockRecorder struct {
	mock *MockQueriesInterface
}

// NewMockQueriesInterface creates a new mock instance.
func NewMockQueriesInterface(ctrl *gomock.Controller) *MockQueriesInterface {
	mock := &MockQueriesInterface{ctrl: ctrl}
	mock.recorder = &MockQueriesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueriesInterface) EXPECT() *MockQueriesInterfaceMockRecorder {
	return m.recorder
}

// CreateVideoUploaded mocks base method.
func (m *MockQueriesInterface) CreateVideoUploaded(ctx context.Context, params db.CreateVideoUploadedParams) (db.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVideoUploaded", ctx, params)
	ret0, _ := ret[0].(db.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVideoUploaded indicates an expected call of CreateVideoUploaded.
func (mr *MockQueriesInterfaceMockRecorder) CreateVideoUploaded(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVideoUploaded", reflect.TypeOf((*MockQueriesInterface)(nil).CreateVideoUploaded), ctx, params)
}

// GetAllVideoUploadedByUserPaginated mocks base method.
func (m *MockQueriesInterface) GetAllVideoUploadedByUserPaginated(ctx context.Context, params db.GetAllVideoUploadedByUserPaginatedParams) ([]db.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllVideoUploadedByUserPaginated", ctx, params)
	ret0, _ := ret[0].([]db.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllVideoUploadedByUserPaginated indicates an expected call of GetAllVideoUploadedByUserPaginated.
func (mr *MockQueriesInterfaceMockRecorder) GetAllVideoUploadedByUserPaginated(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllVideoUploadedByUserPaginated", reflect.TypeOf((*MockQueriesInterface)(nil).GetAllVideoUploadedByUserPaginated), ctx, params)
}

// GetVideoByID mocks base method.
func (m *MockQueriesInterface) GetVideoByID(ctx context.Context, params db.GetVideoByIDParams) (db.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideoByID", ctx, params)
	ret0, _ := ret[0].(db.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideoByID indicates an expected call of GetVideoByID.
func (mr *MockQueriesInterfaceMockRecorder) GetVideoByID(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideoByID", reflect.TypeOf((*MockQueriesInterface)(nil).GetVideoByID), ctx, params)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: db/queries_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "sortedstartup.com/stream/videoservice/db"
)

// MockDBQuerier is a mock of DBQuerier interface.
type MockDBQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockDBQuerierMockRecorder
}

// MockDBQuerierMockRecorder is the mock recorder for MockDBQuerier.
type MockDBQuerierMockRecorder struct {
	mock *MockDBQuerier
}

// NewMockDBQuerier creates a new mock instance.
func NewMockDBQuerier(ctrl *gomock.Controller) *MockDBQuerier {
	mock := &MockDBQuerier{ctrl: ctrl}
	mock.recorder = &MockDBQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBQuerier) EXPECT() *MockDBQuerierMockRecorder {
	return m.recorder
}

// CreateVideoUploaded mocks base method.
func (m *MockDBQuerier) CreateVideoUploaded(ctx context.Context, params db.CreateVideoUploadedParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVideoUploaded", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVideoUploaded indicates an expected call of CreateVideoUploaded.
func (mr *MockDBQuerierMockRecorder) CreateVideoUploaded(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVideoUploaded", reflect.TypeOf((*MockDBQuerier)(nil).CreateVideoUploaded), ctx, params)
}

// GetVideoByVideoIDAndTenantID mocks base method.
func (m *MockDBQuerier) GetVideoByVideoIDAndTenantID(ctx context.Context, params db.GetVideoByVideoIDAndTenantIDParams) (db.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideoByVideoIDAndTenantID", ctx, params)
	ret0, _ := ret[0].(db.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideoByVideoIDAndTenantID indicates an expected call of GetVideoByVideoIDAndTenantID.
func (mr *MockDBQuerierMockRecorder) GetVideoByVideoIDAndTenantID(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideoByVideoIDAndTenantID", reflect.TypeOf((*MockDBQuerier)(nil).GetVideoByVideoIDAndTenantID), ctx, params)
}

// GetVideosByTenantID mocks base method.
func (m *MockDBQuerier) GetVideosByTenantID(ctx context.Context, tenantID sql.NullString) ([]db.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideosByTenantID", ctx, tenantID)
	ret0, _ := ret[0].([]db.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideosByTenantID indicates an expected call of GetVideosByTenantID.
func (mr *MockDBQuerierMockRecorder) GetVideosByTenantID(ctx, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideosByTenantID", reflect.TypeOf((*MockDBQuerier)(nil).GetVideosByTenantID), ctx, tenantID)
}

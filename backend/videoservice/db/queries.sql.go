// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createVideoUploaded = `-- name: CreateVideoUploaded :exec
INSERT INTO videos (
    id,
    title,
    description,
    url,
    uploaded_user_id,
    tenant_id,
    is_private,
    created_at,
    updated_at
) VALUES (
    ?1,
    ?2,
    ?3, 
    ?4,
    ?5,
    ?6,
    ?7,
    ?8,
    ?9
)
`

type CreateVideoUploadedParams struct {
	ID             string
	Title          string
	Description    string
	Url            string
	UploadedUserID string
	TenantID       sql.NullString
	IsPrivate      sql.NullBool
	CreatedAt      time.Time
	UpdatedAt      time.Time
}

func (q *Queries) CreateVideoUploaded(ctx context.Context, arg CreateVideoUploadedParams) error {
	_, err := q.db.ExecContext(ctx, createVideoUploaded,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Url,
		arg.UploadedUserID,
		arg.TenantID,
		arg.IsPrivate,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getAllVideoUploadedByUserPaginated = `-- name: GetAllVideoUploadedByUserPaginated :many
SELECT id, title, description, url, created_at, uploaded_user_id, updated_at, is_private, tenant_id FROM videos 
WHERE uploaded_user_id = ?1
ORDER BY created_at DESC
LIMIT ?3 OFFSET ?2
`

type GetAllVideoUploadedByUserPaginatedParams struct {
	UserID     string
	PageNumber int64
	PageSize   int64
}

func (q *Queries) GetAllVideoUploadedByUserPaginated(ctx context.Context, arg GetAllVideoUploadedByUserPaginatedParams) ([]Video, error) {
	rows, err := q.db.QueryContext(ctx, getAllVideoUploadedByUserPaginated, arg.UserID, arg.PageNumber, arg.PageSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Video
	for rows.Next() {
		var i Video
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Url,
			&i.CreatedAt,
			&i.UploadedUserID,
			&i.UpdatedAt,
			&i.IsPrivate,
			&i.TenantID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVideoByVideoIDAndTenantID = `-- name: GetVideoByVideoIDAndTenantID :one
SELECT id, title, description, url, created_at, uploaded_user_id, updated_at, is_private, tenant_id FROM videos 
WHERE id = ?1 AND tenant_id = ?2
LIMIT 1
`

type GetVideoByVideoIDAndTenantIDParams struct {
	ID       string
	TenantID sql.NullString
}

func (q *Queries) GetVideoByVideoIDAndTenantID(ctx context.Context, arg GetVideoByVideoIDAndTenantIDParams) (Video, error) {
	row := q.db.QueryRowContext(ctx, getVideoByVideoIDAndTenantID, arg.ID, arg.TenantID)
	var i Video
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Url,
		&i.CreatedAt,
		&i.UploadedUserID,
		&i.UpdatedAt,
		&i.IsPrivate,
		&i.TenantID,
	)
	return i, err
}

const getVideosByTenantID = `-- name: GetVideosByTenantID :many
SELECT id, title, description, url, created_at, uploaded_user_id, updated_at, is_private, tenant_id FROM videos 
WHERE tenant_id = ?1 
ORDER BY created_at DESC
`

func (q *Queries) GetVideosByTenantID(ctx context.Context, tenantID sql.NullString) ([]Video, error) {
	rows, err := q.db.QueryContext(ctx, getVideosByTenantID, tenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Video
	for rows.Next() {
		var i Video
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Url,
			&i.CreatedAt,
			&i.UploadedUserID,
			&i.UpdatedAt,
			&i.IsPrivate,
			&i.TenantID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createChannel = `-- name: CreateChannel :one
INSERT INTO videoservice_channels (
    id,
    tenant_id,
    name,
    description,
    created_by,
    created_at,
    updated_at
) VALUES (
    ?1,
    ?2,
    ?3,
    ?4,
    ?5,
    ?6,
    ?7
) RETURNING id, tenant_id, name, description, created_by, created_at, updated_at
`

type CreateChannelParams struct {
	ID          string
	TenantID    string
	Name        string
	Description sql.NullString
	CreatedBy   string
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

// Channel queries
func (q *Queries) CreateChannel(ctx context.Context, arg CreateChannelParams) (VideoserviceChannel, error) {
	row := q.db.QueryRowContext(ctx, createChannel,
		arg.ID,
		arg.TenantID,
		arg.Name,
		arg.Description,
		arg.CreatedBy,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i VideoserviceChannel
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Name,
		&i.Description,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createChannelMember = `-- name: CreateChannelMember :one
INSERT INTO videoservice_channel_members (
    id,
    channel_id,
    user_id,
    role,
    added_by,
    created_at
) VALUES (
    ?1,
    ?2,
    ?3,
    ?4,
    ?5,
    ?6
) RETURNING id, channel_id, user_id, role, added_by, created_at
`

type CreateChannelMemberParams struct {
	ID        string
	ChannelID string
	UserID    string
	Role      string
	AddedBy   string
	CreatedAt time.Time
}

func (q *Queries) CreateChannelMember(ctx context.Context, arg CreateChannelMemberParams) (VideoserviceChannelMember, error) {
	row := q.db.QueryRowContext(ctx, createChannelMember,
		arg.ID,
		arg.ChannelID,
		arg.UserID,
		arg.Role,
		arg.AddedBy,
		arg.CreatedAt,
	)
	var i VideoserviceChannelMember
	err := row.Scan(
		&i.ID,
		&i.ChannelID,
		&i.UserID,
		&i.Role,
		&i.AddedBy,
		&i.CreatedAt,
	)
	return i, err
}

const createVideoUploaded = `-- name: CreateVideoUploaded :exec
INSERT INTO videoservice_videos (
    id,
    title,
    description,
    url,
    uploaded_user_id,
    tenant_id,
    channel_id,
    is_private,
    is_deleted,
    file_size_bytes,
    created_at,
    updated_at
) VALUES (
    ?1,
    ?2,
    ?3, 
    ?4,
    ?5,
    ?6,
    ?7,
    ?8,
    ?9,
    ?10,
    ?11,
    ?12
)
`

type CreateVideoUploadedParams struct {
	ID             string
	Title          string
	Description    string
	Url            string
	UploadedUserID string
	TenantID       sql.NullString
	ChannelID      sql.NullString
	IsPrivate      sql.NullBool
	IsDeleted      sql.NullBool
	FileSizeBytes  sql.NullInt64
	CreatedAt      time.Time
	UpdatedAt      time.Time
}

func (q *Queries) CreateVideoUploaded(ctx context.Context, arg CreateVideoUploadedParams) error {
	_, err := q.db.ExecContext(ctx, createVideoUploaded,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Url,
		arg.UploadedUserID,
		arg.TenantID,
		arg.ChannelID,
		arg.IsPrivate,
		arg.IsDeleted,
		arg.FileSizeBytes,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteChannelMember = `-- name: DeleteChannelMember :exec
DELETE FROM videoservice_channel_members 
WHERE channel_id = ?1 AND user_id = ?2
`

type DeleteChannelMemberParams struct {
	ChannelID string
	UserID    string
}

func (q *Queries) DeleteChannelMember(ctx context.Context, arg DeleteChannelMemberParams) error {
	_, err := q.db.ExecContext(ctx, deleteChannelMember, arg.ChannelID, arg.UserID)
	return err
}

const getAllAccessibleVideosByTenantID = `-- name: GetAllAccessibleVideosByTenantID :many
SELECT DISTINCT v.id, v.title, v.description, v.url, v.created_at, v.uploaded_user_id, v.updated_at, v.is_private, v.tenant_id, v.channel_id, v.is_deleted, v.file_size_bytes FROM videoservice_videos v
LEFT JOIN videoservice_channels c ON v.channel_id = c.id
LEFT JOIN videoservice_channel_members cm ON c.id = cm.channel_id
WHERE v.tenant_id = ?1 AND v.is_deleted = FALSE
  AND (
    -- User's own videos (private)
    (v.uploaded_user_id = ?2 AND (v.channel_id IS NULL OR v.channel_id = ''))
    OR 
    -- Videos in channels user is member of
    (v.channel_id IS NOT NULL AND v.channel_id != '' AND cm.user_id = ?2)
  )
ORDER BY v.created_at DESC
`

type GetAllAccessibleVideosByTenantIDParams struct {
	TenantID sql.NullString
	UserID   string
}

func (q *Queries) GetAllAccessibleVideosByTenantID(ctx context.Context, arg GetAllAccessibleVideosByTenantIDParams) ([]VideoserviceVideo, error) {
	rows, err := q.db.QueryContext(ctx, getAllAccessibleVideosByTenantID, arg.TenantID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VideoserviceVideo
	for rows.Next() {
		var i VideoserviceVideo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Url,
			&i.CreatedAt,
			&i.UploadedUserID,
			&i.UpdatedAt,
			&i.IsPrivate,
			&i.TenantID,
			&i.ChannelID,
			&i.IsDeleted,
			&i.FileSizeBytes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllVideoUploadedByUserPaginated = `-- name: GetAllVideoUploadedByUserPaginated :many
SELECT id, title, description, url, created_at, uploaded_user_id, updated_at, is_private, tenant_id, channel_id, is_deleted, file_size_bytes FROM videoservice_videos 
WHERE uploaded_user_id = ?1 AND is_deleted = FALSE
ORDER BY created_at DESC
LIMIT ?3 OFFSET ?2
`

type GetAllVideoUploadedByUserPaginatedParams struct {
	UserID     string
	PageNumber int64
	PageSize   int64
}

func (q *Queries) GetAllVideoUploadedByUserPaginated(ctx context.Context, arg GetAllVideoUploadedByUserPaginatedParams) ([]VideoserviceVideo, error) {
	rows, err := q.db.QueryContext(ctx, getAllVideoUploadedByUserPaginated, arg.UserID, arg.PageNumber, arg.PageSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VideoserviceVideo
	for rows.Next() {
		var i VideoserviceVideo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Url,
			&i.CreatedAt,
			&i.UploadedUserID,
			&i.UpdatedAt,
			&i.IsPrivate,
			&i.TenantID,
			&i.ChannelID,
			&i.IsDeleted,
			&i.FileSizeBytes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChannelByIDAndTenantID = `-- name: GetChannelByIDAndTenantID :one
SELECT id, tenant_id, name, description, created_by, created_at, updated_at FROM videoservice_channels 
WHERE id = ?1 AND tenant_id = ?2
`

type GetChannelByIDAndTenantIDParams struct {
	ID       string
	TenantID string
}

func (q *Queries) GetChannelByIDAndTenantID(ctx context.Context, arg GetChannelByIDAndTenantIDParams) (VideoserviceChannel, error) {
	row := q.db.QueryRowContext(ctx, getChannelByIDAndTenantID, arg.ID, arg.TenantID)
	var i VideoserviceChannel
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Name,
		&i.Description,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChannelMembersByChannelIDAndTenantID = `-- name: GetChannelMembersByChannelIDAndTenantID :many
SELECT 
    cm.id as channel_member_id,
    cm.channel_id,
    cm.user_id,
    cm.role,
    cm.added_by,
    cm.created_at,
    c.name as channel_name,
    c.tenant_id
FROM videoservice_channel_members cm
JOIN videoservice_channels c ON cm.channel_id = c.id
WHERE cm.channel_id = ?1 AND c.tenant_id = ?2
ORDER BY cm.created_at ASC
`

type GetChannelMembersByChannelIDAndTenantIDParams struct {
	ChannelID string
	TenantID  string
}

type GetChannelMembersByChannelIDAndTenantIDRow struct {
	ChannelMemberID string
	ChannelID       string
	UserID          string
	Role            string
	AddedBy         string
	CreatedAt       time.Time
	ChannelName     string
	TenantID        string
}

func (q *Queries) GetChannelMembersByChannelIDAndTenantID(ctx context.Context, arg GetChannelMembersByChannelIDAndTenantIDParams) ([]GetChannelMembersByChannelIDAndTenantIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getChannelMembersByChannelIDAndTenantID, arg.ChannelID, arg.TenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetChannelMembersByChannelIDAndTenantIDRow
	for rows.Next() {
		var i GetChannelMembersByChannelIDAndTenantIDRow
		if err := rows.Scan(
			&i.ChannelMemberID,
			&i.ChannelID,
			&i.UserID,
			&i.Role,
			&i.AddedBy,
			&i.CreatedAt,
			&i.ChannelName,
			&i.TenantID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChannelMembersByChannelIDExcludingUser = `-- name: GetChannelMembersByChannelIDExcludingUser :many
SELECT 
    cm.id as channel_member_id,
    cm.channel_id,
    cm.user_id,
    cm.role,
    cm.added_by,
    cm.created_at,
    c.name as channel_name,
    c.tenant_id
FROM videoservice_channel_members cm
JOIN videoservice_channels c ON cm.channel_id = c.id
WHERE cm.channel_id = ?1 AND c.tenant_id = ?2 AND cm.user_id != ?3
ORDER BY cm.created_at ASC
`

type GetChannelMembersByChannelIDExcludingUserParams struct {
	ChannelID string
	TenantID  string
	UserID    string
}

type GetChannelMembersByChannelIDExcludingUserRow struct {
	ChannelMemberID string
	ChannelID       string
	UserID          string
	Role            string
	AddedBy         string
	CreatedAt       time.Time
	ChannelName     string
	TenantID        string
}

func (q *Queries) GetChannelMembersByChannelIDExcludingUser(ctx context.Context, arg GetChannelMembersByChannelIDExcludingUserParams) ([]GetChannelMembersByChannelIDExcludingUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getChannelMembersByChannelIDExcludingUser, arg.ChannelID, arg.TenantID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetChannelMembersByChannelIDExcludingUserRow
	for rows.Next() {
		var i GetChannelMembersByChannelIDExcludingUserRow
		if err := rows.Scan(
			&i.ChannelMemberID,
			&i.ChannelID,
			&i.UserID,
			&i.Role,
			&i.AddedBy,
			&i.CreatedAt,
			&i.ChannelName,
			&i.TenantID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChannelsByTenantID = `-- name: GetChannelsByTenantID :many
SELECT id, tenant_id, name, description, created_by, created_at, updated_at FROM videoservice_channels 
WHERE tenant_id = ?1
ORDER BY created_at DESC
`

func (q *Queries) GetChannelsByTenantID(ctx context.Context, tenantID string) ([]VideoserviceChannel, error) {
	rows, err := q.db.QueryContext(ctx, getChannelsByTenantID, tenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VideoserviceChannel
	for rows.Next() {
		var i VideoserviceChannel
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.Name,
			&i.Description,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserRoleInChannel = `-- name: GetUserRoleInChannel :one
SELECT cm.role FROM videoservice_channel_members cm
JOIN videoservice_channels c ON cm.channel_id = c.id
WHERE cm.channel_id = ?1 AND cm.user_id = ?2 AND c.tenant_id = ?3
`

type GetUserRoleInChannelParams struct {
	ChannelID string
	UserID    string
	TenantID  string
}

func (q *Queries) GetUserRoleInChannel(ctx context.Context, arg GetUserRoleInChannelParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserRoleInChannel, arg.ChannelID, arg.UserID, arg.TenantID)
	var role string
	err := row.Scan(&role)
	return role, err
}

const getVideoByVideoIDAndTenantID = `-- name: GetVideoByVideoIDAndTenantID :one
SELECT id, title, description, url, created_at, uploaded_user_id, updated_at, is_private, tenant_id, channel_id, is_deleted, file_size_bytes FROM videoservice_videos 
WHERE id = ?1 AND tenant_id = ?2 AND is_deleted = FALSE
LIMIT 1
`

type GetVideoByVideoIDAndTenantIDParams struct {
	ID       string
	TenantID sql.NullString
}

func (q *Queries) GetVideoByVideoIDAndTenantID(ctx context.Context, arg GetVideoByVideoIDAndTenantIDParams) (VideoserviceVideo, error) {
	row := q.db.QueryRowContext(ctx, getVideoByVideoIDAndTenantID, arg.ID, arg.TenantID)
	var i VideoserviceVideo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Url,
		&i.CreatedAt,
		&i.UploadedUserID,
		&i.UpdatedAt,
		&i.IsPrivate,
		&i.TenantID,
		&i.ChannelID,
		&i.IsDeleted,
		&i.FileSizeBytes,
	)
	return i, err
}

const getVideoCountsPerChannelByTenantID = `-- name: GetVideoCountsPerChannelByTenantID :many
SELECT 
  channel_id,
  COUNT(*) AS video_count
FROM videoservice_videos
WHERE tenant_id = ?1 AND is_deleted = FALSE AND channel_id IS NOT NULL AND channel_id != ''
GROUP BY channel_id
`

type GetVideoCountsPerChannelByTenantIDRow struct {
	ChannelID  sql.NullString
	VideoCount int64
}

func (q *Queries) GetVideoCountsPerChannelByTenantID(ctx context.Context, tenantID sql.NullString) ([]GetVideoCountsPerChannelByTenantIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getVideoCountsPerChannelByTenantID, tenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVideoCountsPerChannelByTenantIDRow
	for rows.Next() {
		var i GetVideoCountsPerChannelByTenantIDRow
		if err := rows.Scan(&i.ChannelID, &i.VideoCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVideoFileSizeForDeletion = `-- name: GetVideoFileSizeForDeletion :one
SELECT file_size_bytes, uploaded_user_id 
FROM videoservice_videos 
WHERE id = ?1 AND tenant_id = ?2 AND is_deleted = FALSE
`

type GetVideoFileSizeForDeletionParams struct {
	VideoID  string
	TenantID sql.NullString
}

type GetVideoFileSizeForDeletionRow struct {
	FileSizeBytes  sql.NullInt64
	UploadedUserID string
}

func (q *Queries) GetVideoFileSizeForDeletion(ctx context.Context, arg GetVideoFileSizeForDeletionParams) (GetVideoFileSizeForDeletionRow, error) {
	row := q.db.QueryRowContext(ctx, getVideoFileSizeForDeletion, arg.VideoID, arg.TenantID)
	var i GetVideoFileSizeForDeletionRow
	err := row.Scan(&i.FileSizeBytes, &i.UploadedUserID)
	return i, err
}

const getVideosByTenantID = `-- name: GetVideosByTenantID :many
SELECT id, title, description, url, created_at, uploaded_user_id, updated_at, is_private, tenant_id, channel_id, is_deleted, file_size_bytes FROM videoservice_videos 
WHERE tenant_id = ?1 AND is_deleted = FALSE
ORDER BY created_at DESC
`

func (q *Queries) GetVideosByTenantID(ctx context.Context, tenantID sql.NullString) ([]VideoserviceVideo, error) {
	rows, err := q.db.QueryContext(ctx, getVideosByTenantID, tenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VideoserviceVideo
	for rows.Next() {
		var i VideoserviceVideo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Url,
			&i.CreatedAt,
			&i.UploadedUserID,
			&i.UpdatedAt,
			&i.IsPrivate,
			&i.TenantID,
			&i.ChannelID,
			&i.IsDeleted,
			&i.FileSizeBytes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVideosByTenantIDAndChannelID = `-- name: GetVideosByTenantIDAndChannelID :many
SELECT id, title, description, url, created_at, uploaded_user_id, updated_at, is_private, tenant_id, channel_id, is_deleted, file_size_bytes FROM videoservice_videos 
WHERE tenant_id = ?1 AND channel_id = ?2 AND is_deleted = FALSE
ORDER BY created_at DESC
`

type GetVideosByTenantIDAndChannelIDParams struct {
	TenantID  sql.NullString
	ChannelID sql.NullString
}

func (q *Queries) GetVideosByTenantIDAndChannelID(ctx context.Context, arg GetVideosByTenantIDAndChannelIDParams) ([]VideoserviceVideo, error) {
	rows, err := q.db.QueryContext(ctx, getVideosByTenantIDAndChannelID, arg.TenantID, arg.ChannelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VideoserviceVideo
	for rows.Next() {
		var i VideoserviceVideo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Url,
			&i.CreatedAt,
			&i.UploadedUserID,
			&i.UpdatedAt,
			&i.IsPrivate,
			&i.TenantID,
			&i.ChannelID,
			&i.IsDeleted,
			&i.FileSizeBytes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeVideoFromChannel = `-- name: RemoveVideoFromChannel :exec
UPDATE videoservice_videos 
SET channel_id = NULL, updated_at = ?1
WHERE id = ?2 AND tenant_id = ?3 AND channel_id = ?4 AND is_deleted = FALSE
`

type RemoveVideoFromChannelParams struct {
	UpdatedAt time.Time
	VideoID   string
	TenantID  sql.NullString
	ChannelID sql.NullString
}

func (q *Queries) RemoveVideoFromChannel(ctx context.Context, arg RemoveVideoFromChannelParams) error {
	_, err := q.db.ExecContext(ctx, removeVideoFromChannel,
		arg.UpdatedAt,
		arg.VideoID,
		arg.TenantID,
		arg.ChannelID,
	)
	return err
}

const softDeleteVideo = `-- name: SoftDeleteVideo :exec
UPDATE videoservice_videos 
SET is_deleted = TRUE, updated_at = ?1
WHERE id = ?2 AND tenant_id = ?3 AND is_deleted = FALSE
`

type SoftDeleteVideoParams struct {
	UpdatedAt time.Time
	VideoID   string
	TenantID  sql.NullString
}

func (q *Queries) SoftDeleteVideo(ctx context.Context, arg SoftDeleteVideoParams) error {
	_, err := q.db.ExecContext(ctx, softDeleteVideo, arg.UpdatedAt, arg.VideoID, arg.TenantID)
	return err
}

const updateChannel = `-- name: UpdateChannel :one
UPDATE videoservice_channels 
SET 
    name = ?1,
    description = ?2,
    updated_at = ?3
WHERE id = ?4 AND tenant_id = ?5
RETURNING id, tenant_id, name, description, created_by, created_at, updated_at
`

type UpdateChannelParams struct {
	Name        string
	Description sql.NullString
	UpdatedAt   time.Time
	ID          string
	TenantID    string
}

func (q *Queries) UpdateChannel(ctx context.Context, arg UpdateChannelParams) (VideoserviceChannel, error) {
	row := q.db.QueryRowContext(ctx, updateChannel,
		arg.Name,
		arg.Description,
		arg.UpdatedAt,
		arg.ID,
		arg.TenantID,
	)
	var i VideoserviceChannel
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Name,
		&i.Description,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateVideoChannel = `-- name: UpdateVideoChannel :exec
UPDATE videoservice_videos 
SET channel_id = ?1, updated_at = ?2
WHERE id = ?3 AND tenant_id = ?4 AND is_deleted = FALSE
  AND (
    -- For tenant-level videos: validate uploader ownership
    (channel_id IS NULL OR channel_id = '') AND uploaded_user_id = ?5
    OR
    -- For channel videos: validate current channel (permission checked in API)
    channel_id = ?6
  )
`

type UpdateVideoChannelParams struct {
	ChannelID        sql.NullString
	UpdatedAt        time.Time
	VideoID          string
	TenantID         sql.NullString
	UploadedUserID   string
	CurrentChannelID sql.NullString
}

// Video-Channel Management Queries
func (q *Queries) UpdateVideoChannel(ctx context.Context, arg UpdateVideoChannelParams) error {
	_, err := q.db.ExecContext(ctx, updateVideoChannel,
		arg.ChannelID,
		arg.UpdatedAt,
		arg.VideoID,
		arg.TenantID,
		arg.UploadedUserID,
		arg.CurrentChannelID,
	)
	return err
}

const updateVideoFileSize = `-- name: UpdateVideoFileSize :exec
UPDATE videoservice_videos 
SET file_size_bytes = ?1, updated_at = ?2
WHERE id = ?3
`

type UpdateVideoFileSizeParams struct {
	FileSizeBytes sql.NullInt64
	UpdatedAt     time.Time
	VideoID       string
}

func (q *Queries) UpdateVideoFileSize(ctx context.Context, arg UpdateVideoFileSizeParams) error {
	_, err := q.db.ExecContext(ctx, updateVideoFileSize, arg.FileSizeBytes, arg.UpdatedAt, arg.VideoID)
	return err
}

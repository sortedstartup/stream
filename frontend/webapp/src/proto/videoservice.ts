// @ts-nocheck
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.28.0
 * source: videoservice.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "grpc-web";
import * as grpc_web_1 from "grpc-web";
export enum VideoStatus {
    STATUS_UNSPECIFIED = 0,
    STATUS_PROCESSING = 1,
    STATUS_READY = 2,
    STATUS_FAILED = 3
}
export enum Visibility {
    VISIBILITY_PRIVATE = 0,
    VISIBILITY_SHARED = 1,
    VISIBILITY_PUBLIC = 2
}
export class Video extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        title?: string;
        description?: string;
        user_id?: string;
        url?: string;
        thumbnail_url?: string;
        status?: VideoStatus;
        visibility?: Visibility;
        created_at?: dependency_1.Timestamp;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("title" in data && data.title != undefined) {
                this.title = data.title;
            }
            if ("description" in data && data.description != undefined) {
                this.description = data.description;
            }
            if ("user_id" in data && data.user_id != undefined) {
                this.user_id = data.user_id;
            }
            if ("url" in data && data.url != undefined) {
                this.url = data.url;
            }
            if ("thumbnail_url" in data && data.thumbnail_url != undefined) {
                this.thumbnail_url = data.thumbnail_url;
            }
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
            if ("visibility" in data && data.visibility != undefined) {
                this.visibility = data.visibility;
            }
            if ("created_at" in data && data.created_at != undefined) {
                this.created_at = data.created_at;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get title() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set title(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get description() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set description(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get user_id() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set user_id(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get url() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set url(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get thumbnail_url() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set thumbnail_url(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get status() {
        return pb_1.Message.getFieldWithDefault(this, 7, VideoStatus.STATUS_UNSPECIFIED) as VideoStatus;
    }
    set status(value: VideoStatus) {
        pb_1.Message.setField(this, 7, value);
    }
    get visibility() {
        return pb_1.Message.getFieldWithDefault(this, 8, Visibility.VISIBILITY_PRIVATE) as Visibility;
    }
    set visibility(value: Visibility) {
        pb_1.Message.setField(this, 8, value);
    }
    get created_at() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 9) as dependency_1.Timestamp;
    }
    set created_at(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 9, value);
    }
    get has_created_at() {
        return pb_1.Message.getField(this, 9) != null;
    }
    static fromObject(data: {
        id?: string;
        title?: string;
        description?: string;
        user_id?: string;
        url?: string;
        thumbnail_url?: string;
        status?: VideoStatus;
        visibility?: Visibility;
        created_at?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
    }): Video {
        const message = new Video({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.title != null) {
            message.title = data.title;
        }
        if (data.description != null) {
            message.description = data.description;
        }
        if (data.user_id != null) {
            message.user_id = data.user_id;
        }
        if (data.url != null) {
            message.url = data.url;
        }
        if (data.thumbnail_url != null) {
            message.thumbnail_url = data.thumbnail_url;
        }
        if (data.status != null) {
            message.status = data.status;
        }
        if (data.visibility != null) {
            message.visibility = data.visibility;
        }
        if (data.created_at != null) {
            message.created_at = dependency_1.Timestamp.fromObject(data.created_at);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            title?: string;
            description?: string;
            user_id?: string;
            url?: string;
            thumbnail_url?: string;
            status?: VideoStatus;
            visibility?: Visibility;
            created_at?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.title != null) {
            data.title = this.title;
        }
        if (this.description != null) {
            data.description = this.description;
        }
        if (this.user_id != null) {
            data.user_id = this.user_id;
        }
        if (this.url != null) {
            data.url = this.url;
        }
        if (this.thumbnail_url != null) {
            data.thumbnail_url = this.thumbnail_url;
        }
        if (this.status != null) {
            data.status = this.status;
        }
        if (this.visibility != null) {
            data.visibility = this.visibility;
        }
        if (this.created_at != null) {
            data.created_at = this.created_at.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.title.length)
            writer.writeString(2, this.title);
        if (this.description.length)
            writer.writeString(3, this.description);
        if (this.user_id.length)
            writer.writeString(4, this.user_id);
        if (this.url.length)
            writer.writeString(5, this.url);
        if (this.thumbnail_url.length)
            writer.writeString(6, this.thumbnail_url);
        if (this.status != VideoStatus.STATUS_UNSPECIFIED)
            writer.writeEnum(7, this.status);
        if (this.visibility != Visibility.VISIBILITY_PRIVATE)
            writer.writeEnum(8, this.visibility);
        if (this.has_created_at)
            writer.writeMessage(9, this.created_at, () => this.created_at.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Video {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Video();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.title = reader.readString();
                    break;
                case 3:
                    message.description = reader.readString();
                    break;
                case 4:
                    message.user_id = reader.readString();
                    break;
                case 5:
                    message.url = reader.readString();
                    break;
                case 6:
                    message.thumbnail_url = reader.readString();
                    break;
                case 7:
                    message.status = reader.readEnum();
                    break;
                case 8:
                    message.visibility = reader.readEnum();
                    break;
                case 9:
                    reader.readMessage(message.created_at, () => message.created_at = dependency_1.Timestamp.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Video {
        return Video.deserialize(bytes);
    }
}
export class CreateVideoRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        title?: string;
        description?: string;
        url?: string;
        visibility?: Visibility;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("title" in data && data.title != undefined) {
                this.title = data.title;
            }
            if ("description" in data && data.description != undefined) {
                this.description = data.description;
            }
            if ("url" in data && data.url != undefined) {
                this.url = data.url;
            }
            if ("visibility" in data && data.visibility != undefined) {
                this.visibility = data.visibility;
            }
        }
    }
    get title() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set title(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get description() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set description(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get url() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set url(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get visibility() {
        return pb_1.Message.getFieldWithDefault(this, 4, Visibility.VISIBILITY_PRIVATE) as Visibility;
    }
    set visibility(value: Visibility) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        title?: string;
        description?: string;
        url?: string;
        visibility?: Visibility;
    }): CreateVideoRequest {
        const message = new CreateVideoRequest({});
        if (data.title != null) {
            message.title = data.title;
        }
        if (data.description != null) {
            message.description = data.description;
        }
        if (data.url != null) {
            message.url = data.url;
        }
        if (data.visibility != null) {
            message.visibility = data.visibility;
        }
        return message;
    }
    toObject() {
        const data: {
            title?: string;
            description?: string;
            url?: string;
            visibility?: Visibility;
        } = {};
        if (this.title != null) {
            data.title = this.title;
        }
        if (this.description != null) {
            data.description = this.description;
        }
        if (this.url != null) {
            data.url = this.url;
        }
        if (this.visibility != null) {
            data.visibility = this.visibility;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.title.length)
            writer.writeString(1, this.title);
        if (this.description.length)
            writer.writeString(2, this.description);
        if (this.url.length)
            writer.writeString(3, this.url);
        if (this.visibility != Visibility.VISIBILITY_PRIVATE)
            writer.writeEnum(4, this.visibility);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateVideoRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateVideoRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.title = reader.readString();
                    break;
                case 2:
                    message.description = reader.readString();
                    break;
                case 3:
                    message.url = reader.readString();
                    break;
                case 4:
                    message.visibility = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateVideoRequest {
        return CreateVideoRequest.deserialize(bytes);
    }
}
export class GetVideoRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        video_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("video_id" in data && data.video_id != undefined) {
                this.video_id = data.video_id;
            }
        }
    }
    get video_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set video_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        video_id?: string;
    }): GetVideoRequest {
        const message = new GetVideoRequest({});
        if (data.video_id != null) {
            message.video_id = data.video_id;
        }
        return message;
    }
    toObject() {
        const data: {
            video_id?: string;
        } = {};
        if (this.video_id != null) {
            data.video_id = this.video_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.video_id.length)
            writer.writeString(1, this.video_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetVideoRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetVideoRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.video_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetVideoRequest {
        return GetVideoRequest.deserialize(bytes);
    }
}
export class ListVideosRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user_id?: string;
        page_size?: number;
        page_token?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user_id" in data && data.user_id != undefined) {
                this.user_id = data.user_id;
            }
            if ("page_size" in data && data.page_size != undefined) {
                this.page_size = data.page_size;
            }
            if ("page_token" in data && data.page_token != undefined) {
                this.page_token = data.page_token;
            }
        }
    }
    get user_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set user_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get page_size() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set page_size(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get page_token() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set page_token(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        user_id?: string;
        page_size?: number;
        page_token?: string;
    }): ListVideosRequest {
        const message = new ListVideosRequest({});
        if (data.user_id != null) {
            message.user_id = data.user_id;
        }
        if (data.page_size != null) {
            message.page_size = data.page_size;
        }
        if (data.page_token != null) {
            message.page_token = data.page_token;
        }
        return message;
    }
    toObject() {
        const data: {
            user_id?: string;
            page_size?: number;
            page_token?: string;
        } = {};
        if (this.user_id != null) {
            data.user_id = this.user_id;
        }
        if (this.page_size != null) {
            data.page_size = this.page_size;
        }
        if (this.page_token != null) {
            data.page_token = this.page_token;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.user_id.length)
            writer.writeString(1, this.user_id);
        if (this.page_size != 0)
            writer.writeInt32(2, this.page_size);
        if (this.page_token.length)
            writer.writeString(3, this.page_token);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListVideosRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListVideosRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.user_id = reader.readString();
                    break;
                case 2:
                    message.page_size = reader.readInt32();
                    break;
                case 3:
                    message.page_token = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListVideosRequest {
        return ListVideosRequest.deserialize(bytes);
    }
}
export class ListVideosResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        videos?: Video[];
        next_page_token?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("videos" in data && data.videos != undefined) {
                this.videos = data.videos;
            }
            if ("next_page_token" in data && data.next_page_token != undefined) {
                this.next_page_token = data.next_page_token;
            }
        }
    }
    get videos() {
        return pb_1.Message.getRepeatedWrapperField(this, Video, 1) as Video[];
    }
    set videos(value: Video[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get next_page_token() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set next_page_token(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        videos?: ReturnType<typeof Video.prototype.toObject>[];
        next_page_token?: string;
    }): ListVideosResponse {
        const message = new ListVideosResponse({});
        if (data.videos != null) {
            message.videos = data.videos.map(item => Video.fromObject(item));
        }
        if (data.next_page_token != null) {
            message.next_page_token = data.next_page_token;
        }
        return message;
    }
    toObject() {
        const data: {
            videos?: ReturnType<typeof Video.prototype.toObject>[];
            next_page_token?: string;
        } = {};
        if (this.videos != null) {
            data.videos = this.videos.map((item: Video) => item.toObject());
        }
        if (this.next_page_token != null) {
            data.next_page_token = this.next_page_token;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.videos.length)
            writer.writeRepeatedMessage(1, this.videos, (item: Video) => item.serialize(writer));
        if (this.next_page_token.length)
            writer.writeString(2, this.next_page_token);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListVideosResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListVideosResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.videos, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Video.deserialize(reader), Video));
                    break;
                case 2:
                    message.next_page_token = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListVideosResponse {
        return ListVideosResponse.deserialize(bytes);
    }
}
export class UpdateVideoRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        video_id?: string;
        title?: string;
        description?: string;
        visibility?: Visibility;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("video_id" in data && data.video_id != undefined) {
                this.video_id = data.video_id;
            }
            if ("title" in data && data.title != undefined) {
                this.title = data.title;
            }
            if ("description" in data && data.description != undefined) {
                this.description = data.description;
            }
            if ("visibility" in data && data.visibility != undefined) {
                this.visibility = data.visibility;
            }
        }
    }
    get video_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set video_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get title() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set title(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get description() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set description(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get visibility() {
        return pb_1.Message.getFieldWithDefault(this, 4, Visibility.VISIBILITY_PRIVATE) as Visibility;
    }
    set visibility(value: Visibility) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        video_id?: string;
        title?: string;
        description?: string;
        visibility?: Visibility;
    }): UpdateVideoRequest {
        const message = new UpdateVideoRequest({});
        if (data.video_id != null) {
            message.video_id = data.video_id;
        }
        if (data.title != null) {
            message.title = data.title;
        }
        if (data.description != null) {
            message.description = data.description;
        }
        if (data.visibility != null) {
            message.visibility = data.visibility;
        }
        return message;
    }
    toObject() {
        const data: {
            video_id?: string;
            title?: string;
            description?: string;
            visibility?: Visibility;
        } = {};
        if (this.video_id != null) {
            data.video_id = this.video_id;
        }
        if (this.title != null) {
            data.title = this.title;
        }
        if (this.description != null) {
            data.description = this.description;
        }
        if (this.visibility != null) {
            data.visibility = this.visibility;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.video_id.length)
            writer.writeString(1, this.video_id);
        if (this.title.length)
            writer.writeString(2, this.title);
        if (this.description.length)
            writer.writeString(3, this.description);
        if (this.visibility != Visibility.VISIBILITY_PRIVATE)
            writer.writeEnum(4, this.visibility);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateVideoRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateVideoRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.video_id = reader.readString();
                    break;
                case 2:
                    message.title = reader.readString();
                    break;
                case 3:
                    message.description = reader.readString();
                    break;
                case 4:
                    message.visibility = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdateVideoRequest {
        return UpdateVideoRequest.deserialize(bytes);
    }
}
export class DeleteVideoRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        video_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("video_id" in data && data.video_id != undefined) {
                this.video_id = data.video_id;
            }
        }
    }
    get video_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set video_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        video_id?: string;
    }): DeleteVideoRequest {
        const message = new DeleteVideoRequest({});
        if (data.video_id != null) {
            message.video_id = data.video_id;
        }
        return message;
    }
    toObject() {
        const data: {
            video_id?: string;
        } = {};
        if (this.video_id != null) {
            data.video_id = this.video_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.video_id.length)
            writer.writeString(1, this.video_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteVideoRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteVideoRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.video_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DeleteVideoRequest {
        return DeleteVideoRequest.deserialize(bytes);
    }
}
export class ShareVideoRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        video_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("video_id" in data && data.video_id != undefined) {
                this.video_id = data.video_id;
            }
        }
    }
    get video_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set video_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        video_id?: string;
    }): ShareVideoRequest {
        const message = new ShareVideoRequest({});
        if (data.video_id != null) {
            message.video_id = data.video_id;
        }
        return message;
    }
    toObject() {
        const data: {
            video_id?: string;
        } = {};
        if (this.video_id != null) {
            data.video_id = this.video_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.video_id.length)
            writer.writeString(1, this.video_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ShareVideoRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ShareVideoRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.video_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ShareVideoRequest {
        return ShareVideoRequest.deserialize(bytes);
    }
}
export class ShareLink extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        url?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("url" in data && data.url != undefined) {
                this.url = data.url;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get url() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set url(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        id?: string;
        url?: string;
    }): ShareLink {
        const message = new ShareLink({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.url != null) {
            message.url = data.url;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            url?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.url != null) {
            data.url = this.url;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.url.length)
            writer.writeString(2, this.url);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ShareLink {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ShareLink();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.url = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ShareLink {
        return ShareLink.deserialize(bytes);
    }
}
export class Empty extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): Empty {
        const message = new Empty({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Empty {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Empty();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Empty {
        return Empty.deserialize(bytes);
    }
}
export abstract class UnimplementedVideoServiceService {
    static definition = {
        CreateVideo: {
            path: "/videoservice.VideoService/CreateVideo",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: CreateVideoRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => CreateVideoRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: Video) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => Video.deserialize(new Uint8Array(bytes))
        },
        GetVideo: {
            path: "/videoservice.VideoService/GetVideo",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: GetVideoRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => GetVideoRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: Video) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => Video.deserialize(new Uint8Array(bytes))
        },
        ListVideos: {
            path: "/videoservice.VideoService/ListVideos",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ListVideosRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ListVideosRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: ListVideosResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => ListVideosResponse.deserialize(new Uint8Array(bytes))
        },
        UpdateVideo: {
            path: "/videoservice.VideoService/UpdateVideo",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: UpdateVideoRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => UpdateVideoRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: Video) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => Video.deserialize(new Uint8Array(bytes))
        },
        DeleteVideo: {
            path: "/videoservice.VideoService/DeleteVideo",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: DeleteVideoRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => DeleteVideoRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: Empty) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => Empty.deserialize(new Uint8Array(bytes))
        },
        ShareVideo: {
            path: "/videoservice.VideoService/ShareVideo",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ShareVideoRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ShareVideoRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: ShareLink) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => ShareLink.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract CreateVideo(call: grpc_1.ServerUnaryCall<CreateVideoRequest, Video>, callback: grpc_1.sendUnaryData<Video>): void;
    abstract GetVideo(call: grpc_1.ServerUnaryCall<GetVideoRequest, Video>, callback: grpc_1.sendUnaryData<Video>): void;
    abstract ListVideos(call: grpc_1.ServerUnaryCall<ListVideosRequest, ListVideosResponse>, callback: grpc_1.sendUnaryData<ListVideosResponse>): void;
    abstract UpdateVideo(call: grpc_1.ServerUnaryCall<UpdateVideoRequest, Video>, callback: grpc_1.sendUnaryData<Video>): void;
    abstract DeleteVideo(call: grpc_1.ServerUnaryCall<DeleteVideoRequest, Empty>, callback: grpc_1.sendUnaryData<Empty>): void;
    abstract ShareVideo(call: grpc_1.ServerUnaryCall<ShareVideoRequest, ShareLink>, callback: grpc_1.sendUnaryData<ShareLink>): void;
}
export class VideoServiceClient {
    private _address: string;
    private _client: grpc_web_1.GrpcWebClientBase;
    constructor(address: string, credentials?: Object, options?: grpc_web_1.GrpcWebClientBaseOptions) {
        if (!options)
            options = {};
        options.format = options.format || "text";
        this._address = address;
        this._client = new grpc_web_1.GrpcWebClientBase(options);
    }
    private static CreateVideo = new grpc_web_1.MethodDescriptor<CreateVideoRequest, Video>("/videoservice.VideoService/CreateVideo", grpc_web_1.MethodType.UNARY, CreateVideoRequest, Video, (message: CreateVideoRequest) => message.serialize(), Video.deserialize);
    CreateVideo(message: CreateVideoRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<CreateVideoRequest, Video>(this._address + "/videoservice.VideoService/CreateVideo", message, metadata || {}, VideoServiceClient.CreateVideo);
    }
    private static GetVideo = new grpc_web_1.MethodDescriptor<GetVideoRequest, Video>("/videoservice.VideoService/GetVideo", grpc_web_1.MethodType.UNARY, GetVideoRequest, Video, (message: GetVideoRequest) => message.serialize(), Video.deserialize);
    GetVideo(message: GetVideoRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<GetVideoRequest, Video>(this._address + "/videoservice.VideoService/GetVideo", message, metadata || {}, VideoServiceClient.GetVideo);
    }
    private static ListVideos = new grpc_web_1.MethodDescriptor<ListVideosRequest, ListVideosResponse>("/videoservice.VideoService/ListVideos", grpc_web_1.MethodType.UNARY, ListVideosRequest, ListVideosResponse, (message: ListVideosRequest) => message.serialize(), ListVideosResponse.deserialize);
    ListVideos(message: ListVideosRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<ListVideosRequest, ListVideosResponse>(this._address + "/videoservice.VideoService/ListVideos", message, metadata || {}, VideoServiceClient.ListVideos);
    }
    private static UpdateVideo = new grpc_web_1.MethodDescriptor<UpdateVideoRequest, Video>("/videoservice.VideoService/UpdateVideo", grpc_web_1.MethodType.UNARY, UpdateVideoRequest, Video, (message: UpdateVideoRequest) => message.serialize(), Video.deserialize);
    UpdateVideo(message: UpdateVideoRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<UpdateVideoRequest, Video>(this._address + "/videoservice.VideoService/UpdateVideo", message, metadata || {}, VideoServiceClient.UpdateVideo);
    }
    private static DeleteVideo = new grpc_web_1.MethodDescriptor<DeleteVideoRequest, Empty>("/videoservice.VideoService/DeleteVideo", grpc_web_1.MethodType.UNARY, DeleteVideoRequest, Empty, (message: DeleteVideoRequest) => message.serialize(), Empty.deserialize);
    DeleteVideo(message: DeleteVideoRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<DeleteVideoRequest, Empty>(this._address + "/videoservice.VideoService/DeleteVideo", message, metadata || {}, VideoServiceClient.DeleteVideo);
    }
    private static ShareVideo = new grpc_web_1.MethodDescriptor<ShareVideoRequest, ShareLink>("/videoservice.VideoService/ShareVideo", grpc_web_1.MethodType.UNARY, ShareVideoRequest, ShareLink, (message: ShareVideoRequest) => message.serialize(), ShareLink.deserialize);
    ShareVideo(message: ShareVideoRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<ShareVideoRequest, ShareLink>(this._address + "/videoservice.VideoService/ShareVideo", message, metadata || {}, VideoServiceClient.ShareVideo);
    }
}

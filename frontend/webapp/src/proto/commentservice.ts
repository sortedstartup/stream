// @ts-nocheck
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.26.1
 * source: commentservice.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "grpc-web";
import * as grpc_web_1 from "grpc-web";
export class Comment extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        content?: string;
        video_id?: string;
        user_id?: string;
        created_at?: dependency_1.Timestamp;
        updated_at?: dependency_1.Timestamp;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("content" in data && data.content != undefined) {
                this.content = data.content;
            }
            if ("video_id" in data && data.video_id != undefined) {
                this.video_id = data.video_id;
            }
            if ("user_id" in data && data.user_id != undefined) {
                this.user_id = data.user_id;
            }
            if ("created_at" in data && data.created_at != undefined) {
                this.created_at = data.created_at;
            }
            if ("updated_at" in data && data.updated_at != undefined) {
                this.updated_at = data.updated_at;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get content() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set content(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get video_id() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set video_id(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get user_id() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set user_id(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get created_at() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 5) as dependency_1.Timestamp;
    }
    set created_at(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get has_created_at() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get updated_at() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 6) as dependency_1.Timestamp;
    }
    set updated_at(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get has_updated_at() {
        return pb_1.Message.getField(this, 6) != null;
    }
    static fromObject(data: {
        id?: string;
        content?: string;
        video_id?: string;
        user_id?: string;
        created_at?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        updated_at?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
    }): Comment {
        const message = new Comment({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.content != null) {
            message.content = data.content;
        }
        if (data.video_id != null) {
            message.video_id = data.video_id;
        }
        if (data.user_id != null) {
            message.user_id = data.user_id;
        }
        if (data.created_at != null) {
            message.created_at = dependency_1.Timestamp.fromObject(data.created_at);
        }
        if (data.updated_at != null) {
            message.updated_at = dependency_1.Timestamp.fromObject(data.updated_at);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            content?: string;
            video_id?: string;
            user_id?: string;
            created_at?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            updated_at?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.content != null) {
            data.content = this.content;
        }
        if (this.video_id != null) {
            data.video_id = this.video_id;
        }
        if (this.user_id != null) {
            data.user_id = this.user_id;
        }
        if (this.created_at != null) {
            data.created_at = this.created_at.toObject();
        }
        if (this.updated_at != null) {
            data.updated_at = this.updated_at.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.content.length)
            writer.writeString(2, this.content);
        if (this.video_id.length)
            writer.writeString(3, this.video_id);
        if (this.user_id.length)
            writer.writeString(4, this.user_id);
        if (this.has_created_at)
            writer.writeMessage(5, this.created_at, () => this.created_at.serialize(writer));
        if (this.has_updated_at)
            writer.writeMessage(6, this.updated_at, () => this.updated_at.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Comment {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Comment();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.content = reader.readString();
                    break;
                case 3:
                    message.video_id = reader.readString();
                    break;
                case 4:
                    message.user_id = reader.readString();
                    break;
                case 5:
                    reader.readMessage(message.created_at, () => message.created_at = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.updated_at, () => message.updated_at = dependency_1.Timestamp.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Comment {
        return Comment.deserialize(bytes);
    }
}
export class CreateCommentRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        content?: string;
        video_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("content" in data && data.content != undefined) {
                this.content = data.content;
            }
            if ("video_id" in data && data.video_id != undefined) {
                this.video_id = data.video_id;
            }
        }
    }
    get content() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set content(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get video_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set video_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        content?: string;
        video_id?: string;
    }): CreateCommentRequest {
        const message = new CreateCommentRequest({});
        if (data.content != null) {
            message.content = data.content;
        }
        if (data.video_id != null) {
            message.video_id = data.video_id;
        }
        return message;
    }
    toObject() {
        const data: {
            content?: string;
            video_id?: string;
        } = {};
        if (this.content != null) {
            data.content = this.content;
        }
        if (this.video_id != null) {
            data.video_id = this.video_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.content.length)
            writer.writeString(1, this.content);
        if (this.video_id.length)
            writer.writeString(2, this.video_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateCommentRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateCommentRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.content = reader.readString();
                    break;
                case 2:
                    message.video_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateCommentRequest {
        return CreateCommentRequest.deserialize(bytes);
    }
}
export class GetCommentRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        comment_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("comment_id" in data && data.comment_id != undefined) {
                this.comment_id = data.comment_id;
            }
        }
    }
    get comment_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set comment_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        comment_id?: string;
    }): GetCommentRequest {
        const message = new GetCommentRequest({});
        if (data.comment_id != null) {
            message.comment_id = data.comment_id;
        }
        return message;
    }
    toObject() {
        const data: {
            comment_id?: string;
        } = {};
        if (this.comment_id != null) {
            data.comment_id = this.comment_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.comment_id.length)
            writer.writeString(1, this.comment_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCommentRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetCommentRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.comment_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetCommentRequest {
        return GetCommentRequest.deserialize(bytes);
    }
}
export class ListCommentsRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        page_size?: number;
        page_number?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("page_size" in data && data.page_size != undefined) {
                this.page_size = data.page_size;
            }
            if ("page_number" in data && data.page_number != undefined) {
                this.page_number = data.page_number;
            }
        }
    }
    get page_size() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set page_size(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get page_number() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set page_number(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        page_size?: number;
        page_number?: number;
    }): ListCommentsRequest {
        const message = new ListCommentsRequest({});
        if (data.page_size != null) {
            message.page_size = data.page_size;
        }
        if (data.page_number != null) {
            message.page_number = data.page_number;
        }
        return message;
    }
    toObject() {
        const data: {
            page_size?: number;
            page_number?: number;
        } = {};
        if (this.page_size != null) {
            data.page_size = this.page_size;
        }
        if (this.page_number != null) {
            data.page_number = this.page_number;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.page_size != 0)
            writer.writeInt32(1, this.page_size);
        if (this.page_number != 0)
            writer.writeInt32(2, this.page_number);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListCommentsRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListCommentsRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.page_size = reader.readInt32();
                    break;
                case 2:
                    message.page_number = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListCommentsRequest {
        return ListCommentsRequest.deserialize(bytes);
    }
}
export class ListCommentsResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        comments?: Comment[];
        next_page_number?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("comments" in data && data.comments != undefined) {
                this.comments = data.comments;
            }
            if ("next_page_number" in data && data.next_page_number != undefined) {
                this.next_page_number = data.next_page_number;
            }
        }
    }
    get comments() {
        return pb_1.Message.getRepeatedWrapperField(this, Comment, 1) as Comment[];
    }
    set comments(value: Comment[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get next_page_number() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set next_page_number(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        comments?: ReturnType<typeof Comment.prototype.toObject>[];
        next_page_number?: number;
    }): ListCommentsResponse {
        const message = new ListCommentsResponse({});
        if (data.comments != null) {
            message.comments = data.comments.map(item => Comment.fromObject(item));
        }
        if (data.next_page_number != null) {
            message.next_page_number = data.next_page_number;
        }
        return message;
    }
    toObject() {
        const data: {
            comments?: ReturnType<typeof Comment.prototype.toObject>[];
            next_page_number?: number;
        } = {};
        if (this.comments != null) {
            data.comments = this.comments.map((item: Comment) => item.toObject());
        }
        if (this.next_page_number != null) {
            data.next_page_number = this.next_page_number;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.comments.length)
            writer.writeRepeatedMessage(1, this.comments, (item: Comment) => item.serialize(writer));
        if (this.next_page_number != 0)
            writer.writeInt32(2, this.next_page_number);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListCommentsResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListCommentsResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.comments, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Comment.deserialize(reader), Comment));
                    break;
                case 2:
                    message.next_page_number = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListCommentsResponse {
        return ListCommentsResponse.deserialize(bytes);
    }
}
export class UpdateCommentRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        comment_id?: string;
        content?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("comment_id" in data && data.comment_id != undefined) {
                this.comment_id = data.comment_id;
            }
            if ("content" in data && data.content != undefined) {
                this.content = data.content;
            }
        }
    }
    get comment_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set comment_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get content() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set content(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        comment_id?: string;
        content?: string;
    }): UpdateCommentRequest {
        const message = new UpdateCommentRequest({});
        if (data.comment_id != null) {
            message.comment_id = data.comment_id;
        }
        if (data.content != null) {
            message.content = data.content;
        }
        return message;
    }
    toObject() {
        const data: {
            comment_id?: string;
            content?: string;
        } = {};
        if (this.comment_id != null) {
            data.comment_id = this.comment_id;
        }
        if (this.content != null) {
            data.content = this.content;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.comment_id.length)
            writer.writeString(1, this.comment_id);
        if (this.content.length)
            writer.writeString(2, this.content);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateCommentRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateCommentRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.comment_id = reader.readString();
                    break;
                case 2:
                    message.content = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdateCommentRequest {
        return UpdateCommentRequest.deserialize(bytes);
    }
}
export class DeleteCommentRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        comment_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("comment_id" in data && data.comment_id != undefined) {
                this.comment_id = data.comment_id;
            }
        }
    }
    get comment_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set comment_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        comment_id?: string;
    }): DeleteCommentRequest {
        const message = new DeleteCommentRequest({});
        if (data.comment_id != null) {
            message.comment_id = data.comment_id;
        }
        return message;
    }
    toObject() {
        const data: {
            comment_id?: string;
        } = {};
        if (this.comment_id != null) {
            data.comment_id = this.comment_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.comment_id.length)
            writer.writeString(1, this.comment_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteCommentRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteCommentRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.comment_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DeleteCommentRequest {
        return DeleteCommentRequest.deserialize(bytes);
    }
}
export class Empty extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): Empty {
        const message = new Empty({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Empty {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Empty();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Empty {
        return Empty.deserialize(bytes);
    }
}
export abstract class UnimplementedCommentServiceService {
    static definition = {
        CreateComment: {
            path: "/commentservice.CommentService/CreateComment",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: CreateCommentRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => CreateCommentRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: Comment) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => Comment.deserialize(new Uint8Array(bytes))
        },
        GetComment: {
            path: "/commentservice.CommentService/GetComment",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: GetCommentRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => GetCommentRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: Comment) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => Comment.deserialize(new Uint8Array(bytes))
        },
        ListComments: {
            path: "/commentservice.CommentService/ListComments",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ListCommentsRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ListCommentsRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: ListCommentsResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => ListCommentsResponse.deserialize(new Uint8Array(bytes))
        },
        UpdateComment: {
            path: "/commentservice.CommentService/UpdateComment",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: UpdateCommentRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => UpdateCommentRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: Comment) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => Comment.deserialize(new Uint8Array(bytes))
        },
        DeleteComment: {
            path: "/commentservice.CommentService/DeleteComment",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: DeleteCommentRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => DeleteCommentRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: Empty) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => Empty.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract CreateComment(call: grpc_1.ServerUnaryCall<CreateCommentRequest, Comment>, callback: grpc_1.sendUnaryData<Comment>): void;
    abstract GetComment(call: grpc_1.ServerUnaryCall<GetCommentRequest, Comment>, callback: grpc_1.sendUnaryData<Comment>): void;
    abstract ListComments(call: grpc_1.ServerUnaryCall<ListCommentsRequest, ListCommentsResponse>, callback: grpc_1.sendUnaryData<ListCommentsResponse>): void;
    abstract UpdateComment(call: grpc_1.ServerUnaryCall<UpdateCommentRequest, Comment>, callback: grpc_1.sendUnaryData<Comment>): void;
    abstract DeleteComment(call: grpc_1.ServerUnaryCall<DeleteCommentRequest, Empty>, callback: grpc_1.sendUnaryData<Empty>): void;
}
export class CommentServiceClient {
    private _address: string;
    private _client: grpc_web_1.GrpcWebClientBase;
    constructor(address: string, credentials?: Object, options?: grpc_web_1.GrpcWebClientBaseOptions) {
        if (!options)
            options = {};
        options.format = options.format || "text";
        this._address = address;
        this._client = new grpc_web_1.GrpcWebClientBase(options);
    }
    private static CreateComment = new grpc_web_1.MethodDescriptor<CreateCommentRequest, Comment>("/commentservice.CommentService/CreateComment", grpc_web_1.MethodType.UNARY, CreateCommentRequest, Comment, (message: CreateCommentRequest) => message.serialize(), Comment.deserialize);
    CreateComment(message: CreateCommentRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<CreateCommentRequest, Comment>(this._address + "/commentservice.CommentService/CreateComment", message, metadata || {}, CommentServiceClient.CreateComment);
    }
    private static GetComment = new grpc_web_1.MethodDescriptor<GetCommentRequest, Comment>("/commentservice.CommentService/GetComment", grpc_web_1.MethodType.UNARY, GetCommentRequest, Comment, (message: GetCommentRequest) => message.serialize(), Comment.deserialize);
    GetComment(message: GetCommentRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<GetCommentRequest, Comment>(this._address + "/commentservice.CommentService/GetComment", message, metadata || {}, CommentServiceClient.GetComment);
    }
    private static ListComments = new grpc_web_1.MethodDescriptor<ListCommentsRequest, ListCommentsResponse>("/commentservice.CommentService/ListComments", grpc_web_1.MethodType.UNARY, ListCommentsRequest, ListCommentsResponse, (message: ListCommentsRequest) => message.serialize(), ListCommentsResponse.deserialize);
    ListComments(message: ListCommentsRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<ListCommentsRequest, ListCommentsResponse>(this._address + "/commentservice.CommentService/ListComments", message, metadata || {}, CommentServiceClient.ListComments);
    }
    private static UpdateComment = new grpc_web_1.MethodDescriptor<UpdateCommentRequest, Comment>("/commentservice.CommentService/UpdateComment", grpc_web_1.MethodType.UNARY, UpdateCommentRequest, Comment, (message: UpdateCommentRequest) => message.serialize(), Comment.deserialize);
    UpdateComment(message: UpdateCommentRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<UpdateCommentRequest, Comment>(this._address + "/commentservice.CommentService/UpdateComment", message, metadata || {}, CommentServiceClient.UpdateComment);
    }
    private static DeleteComment = new grpc_web_1.MethodDescriptor<DeleteCommentRequest, Empty>("/commentservice.CommentService/DeleteComment", grpc_web_1.MethodType.UNARY, DeleteCommentRequest, Empty, (message: DeleteCommentRequest) => message.serialize(), Empty.deserialize);
    DeleteComment(message: DeleteCommentRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<DeleteCommentRequest, Empty>(this._address + "/commentservice.CommentService/DeleteComment", message, metadata || {}, CommentServiceClient.DeleteComment);
    }
}

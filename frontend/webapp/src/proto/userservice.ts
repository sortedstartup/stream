// @ts-nocheck
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: userservice.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "grpc-web";
import * as grpc_web_1 from "grpc-web";
export class User extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        username?: string;
        email?: string;
        created_at?: dependency_1.Timestamp;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("username" in data && data.username != undefined) {
                this.username = data.username;
            }
            if ("email" in data && data.email != undefined) {
                this.email = data.email;
            }
            if ("created_at" in data && data.created_at != undefined) {
                this.created_at = data.created_at;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get username() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set username(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get email() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set email(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get created_at() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 4) as dependency_1.Timestamp;
    }
    set created_at(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_created_at() {
        return pb_1.Message.getField(this, 4) != null;
    }
    static fromObject(data: {
        id?: string;
        username?: string;
        email?: string;
        created_at?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
    }): User {
        const message = new User({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.username != null) {
            message.username = data.username;
        }
        if (data.email != null) {
            message.email = data.email;
        }
        if (data.created_at != null) {
            message.created_at = dependency_1.Timestamp.fromObject(data.created_at);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            username?: string;
            email?: string;
            created_at?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.username != null) {
            data.username = this.username;
        }
        if (this.email != null) {
            data.email = this.email;
        }
        if (this.created_at != null) {
            data.created_at = this.created_at.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.username.length)
            writer.writeString(2, this.username);
        if (this.email.length)
            writer.writeString(3, this.email);
        if (this.has_created_at)
            writer.writeMessage(4, this.created_at, () => this.created_at.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): User {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new User();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.username = reader.readString();
                    break;
                case 3:
                    message.email = reader.readString();
                    break;
                case 4:
                    reader.readMessage(message.created_at, () => message.created_at = dependency_1.Timestamp.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): User {
        return User.deserialize(bytes);
    }
}
export class Role extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        role?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("role" in data && data.role != undefined) {
                this.role = data.role;
            }
        }
    }
    get role() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set role(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        role?: string;
    }): Role {
        const message = new Role({});
        if (data.role != null) {
            message.role = data.role;
        }
        return message;
    }
    toObject() {
        const data: {
            role?: string;
        } = {};
        if (this.role != null) {
            data.role = this.role;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.role.length)
            writer.writeString(1, this.role);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Role {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Role();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.role = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Role {
        return Role.deserialize(bytes);
    }
}
export class CreateUserRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): CreateUserRequest {
        const message = new CreateUserRequest({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateUserRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateUserRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateUserRequest {
        return CreateUserRequest.deserialize(bytes);
    }
}
export class CreateUserResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        message?: string;
        user?: User;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("user" in data && data.user != undefined) {
                this.user = data.user;
            }
        }
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get user() {
        return pb_1.Message.getWrapperField(this, User, 2) as User;
    }
    set user(value: User) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_user() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        message?: string;
        user?: ReturnType<typeof User.prototype.toObject>;
    }): CreateUserResponse {
        const message = new CreateUserResponse({});
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.user != null) {
            message.user = User.fromObject(data.user);
        }
        return message;
    }
    toObject() {
        const data: {
            message?: string;
            user?: ReturnType<typeof User.prototype.toObject>;
        } = {};
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.user != null) {
            data.user = this.user.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.message.length)
            writer.writeString(1, this.message);
        if (this.has_user)
            writer.writeMessage(2, this.user, () => this.user.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateUserResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateUserResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.message = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateUserResponse {
        return CreateUserResponse.deserialize(bytes);
    }
}
export class Tenant extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        name?: string;
        description?: string;
        is_personal?: boolean;
        created_at?: dependency_1.Timestamp;
        created_by?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("description" in data && data.description != undefined) {
                this.description = data.description;
            }
            if ("is_personal" in data && data.is_personal != undefined) {
                this.is_personal = data.is_personal;
            }
            if ("created_at" in data && data.created_at != undefined) {
                this.created_at = data.created_at;
            }
            if ("created_by" in data && data.created_by != undefined) {
                this.created_by = data.created_by;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get description() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set description(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get is_personal() {
        return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
    }
    set is_personal(value: boolean) {
        pb_1.Message.setField(this, 4, value);
    }
    get created_at() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 5) as dependency_1.Timestamp;
    }
    set created_at(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get has_created_at() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get created_by() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set created_by(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    static fromObject(data: {
        id?: string;
        name?: string;
        description?: string;
        is_personal?: boolean;
        created_at?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        created_by?: string;
    }): Tenant {
        const message = new Tenant({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.description != null) {
            message.description = data.description;
        }
        if (data.is_personal != null) {
            message.is_personal = data.is_personal;
        }
        if (data.created_at != null) {
            message.created_at = dependency_1.Timestamp.fromObject(data.created_at);
        }
        if (data.created_by != null) {
            message.created_by = data.created_by;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            name?: string;
            description?: string;
            is_personal?: boolean;
            created_at?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            created_by?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.description != null) {
            data.description = this.description;
        }
        if (this.is_personal != null) {
            data.is_personal = this.is_personal;
        }
        if (this.created_at != null) {
            data.created_at = this.created_at.toObject();
        }
        if (this.created_by != null) {
            data.created_by = this.created_by;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.description.length)
            writer.writeString(3, this.description);
        if (this.is_personal != false)
            writer.writeBool(4, this.is_personal);
        if (this.has_created_at)
            writer.writeMessage(5, this.created_at, () => this.created_at.serialize(writer));
        if (this.created_by.length)
            writer.writeString(6, this.created_by);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Tenant {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Tenant();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.description = reader.readString();
                    break;
                case 4:
                    message.is_personal = reader.readBool();
                    break;
                case 5:
                    reader.readMessage(message.created_at, () => message.created_at = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 6:
                    message.created_by = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Tenant {
        return Tenant.deserialize(bytes);
    }
}
export class TenantUser extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        tenant?: Tenant;
        user?: User;
        role?: Role;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("tenant" in data && data.tenant != undefined) {
                this.tenant = data.tenant;
            }
            if ("user" in data && data.user != undefined) {
                this.user = data.user;
            }
            if ("role" in data && data.role != undefined) {
                this.role = data.role;
            }
        }
    }
    get tenant() {
        return pb_1.Message.getWrapperField(this, Tenant, 1) as Tenant;
    }
    set tenant(value: Tenant) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_tenant() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get user() {
        return pb_1.Message.getWrapperField(this, User, 2) as User;
    }
    set user(value: User) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_user() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get role() {
        return pb_1.Message.getWrapperField(this, Role, 3) as Role;
    }
    set role(value: Role) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_role() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        tenant?: ReturnType<typeof Tenant.prototype.toObject>;
        user?: ReturnType<typeof User.prototype.toObject>;
        role?: ReturnType<typeof Role.prototype.toObject>;
    }): TenantUser {
        const message = new TenantUser({});
        if (data.tenant != null) {
            message.tenant = Tenant.fromObject(data.tenant);
        }
        if (data.user != null) {
            message.user = User.fromObject(data.user);
        }
        if (data.role != null) {
            message.role = Role.fromObject(data.role);
        }
        return message;
    }
    toObject() {
        const data: {
            tenant?: ReturnType<typeof Tenant.prototype.toObject>;
            user?: ReturnType<typeof User.prototype.toObject>;
            role?: ReturnType<typeof Role.prototype.toObject>;
        } = {};
        if (this.tenant != null) {
            data.tenant = this.tenant.toObject();
        }
        if (this.user != null) {
            data.user = this.user.toObject();
        }
        if (this.role != null) {
            data.role = this.role.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_tenant)
            writer.writeMessage(1, this.tenant, () => this.tenant.serialize(writer));
        if (this.has_user)
            writer.writeMessage(2, this.user, () => this.user.serialize(writer));
        if (this.has_role)
            writer.writeMessage(3, this.role, () => this.role.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantUser {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantUser();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.tenant, () => message.tenant = Tenant.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.role, () => message.role = Role.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TenantUser {
        return TenantUser.deserialize(bytes);
    }
}
export class CreateTenantRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
        description?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("description" in data && data.description != undefined) {
                this.description = data.description;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get description() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set description(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        name?: string;
        description?: string;
    }): CreateTenantRequest {
        const message = new CreateTenantRequest({});
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.description != null) {
            message.description = data.description;
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
            description?: string;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.description != null) {
            data.description = this.description;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (this.description.length)
            writer.writeString(2, this.description);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateTenantRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateTenantRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    message.description = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateTenantRequest {
        return CreateTenantRequest.deserialize(bytes);
    }
}
export class CreateTenantResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        message?: string;
        success?: boolean;
        tenant_user?: TenantUser;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("success" in data && data.success != undefined) {
                this.success = data.success;
            }
            if ("tenant_user" in data && data.tenant_user != undefined) {
                this.tenant_user = data.tenant_user;
            }
        }
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get success() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set success(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    get tenant_user() {
        return pb_1.Message.getWrapperField(this, TenantUser, 3) as TenantUser;
    }
    set tenant_user(value: TenantUser) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_tenant_user() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        message?: string;
        success?: boolean;
        tenant_user?: ReturnType<typeof TenantUser.prototype.toObject>;
    }): CreateTenantResponse {
        const message = new CreateTenantResponse({});
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.success != null) {
            message.success = data.success;
        }
        if (data.tenant_user != null) {
            message.tenant_user = TenantUser.fromObject(data.tenant_user);
        }
        return message;
    }
    toObject() {
        const data: {
            message?: string;
            success?: boolean;
            tenant_user?: ReturnType<typeof TenantUser.prototype.toObject>;
        } = {};
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.success != null) {
            data.success = this.success;
        }
        if (this.tenant_user != null) {
            data.tenant_user = this.tenant_user.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.message.length)
            writer.writeString(1, this.message);
        if (this.success != false)
            writer.writeBool(2, this.success);
        if (this.has_tenant_user)
            writer.writeMessage(3, this.tenant_user, () => this.tenant_user.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateTenantResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateTenantResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.message = reader.readString();
                    break;
                case 2:
                    message.success = reader.readBool();
                    break;
                case 3:
                    reader.readMessage(message.tenant_user, () => message.tenant_user = TenantUser.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateTenantResponse {
        return CreateTenantResponse.deserialize(bytes);
    }
}
export class GetTenantsRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): GetTenantsRequest {
        const message = new GetTenantsRequest({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTenantsRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTenantsRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetTenantsRequest {
        return GetTenantsRequest.deserialize(bytes);
    }
}
export class GetTenantsResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        message?: string;
        tenant_users?: TenantUser[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("tenant_users" in data && data.tenant_users != undefined) {
                this.tenant_users = data.tenant_users;
            }
        }
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get tenant_users() {
        return pb_1.Message.getRepeatedWrapperField(this, TenantUser, 2) as TenantUser[];
    }
    set tenant_users(value: TenantUser[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        message?: string;
        tenant_users?: ReturnType<typeof TenantUser.prototype.toObject>[];
    }): GetTenantsResponse {
        const message = new GetTenantsResponse({});
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.tenant_users != null) {
            message.tenant_users = data.tenant_users.map(item => TenantUser.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            message?: string;
            tenant_users?: ReturnType<typeof TenantUser.prototype.toObject>[];
        } = {};
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.tenant_users != null) {
            data.tenant_users = this.tenant_users.map((item: TenantUser) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.message.length)
            writer.writeString(1, this.message);
        if (this.tenant_users.length)
            writer.writeRepeatedMessage(2, this.tenant_users, (item: TenantUser) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTenantsResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTenantsResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.message = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.tenant_users, () => pb_1.Message.addToRepeatedWrapperField(message, 2, TenantUser.deserialize(reader), TenantUser));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetTenantsResponse {
        return GetTenantsResponse.deserialize(bytes);
    }
}
export class AddUserRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        tenant_id?: string;
        username?: string;
        role?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("tenant_id" in data && data.tenant_id != undefined) {
                this.tenant_id = data.tenant_id;
            }
            if ("username" in data && data.username != undefined) {
                this.username = data.username;
            }
            if ("role" in data && data.role != undefined) {
                this.role = data.role;
            }
        }
    }
    get tenant_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set tenant_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get username() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set username(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get role() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set role(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        tenant_id?: string;
        username?: string;
        role?: string;
    }): AddUserRequest {
        const message = new AddUserRequest({});
        if (data.tenant_id != null) {
            message.tenant_id = data.tenant_id;
        }
        if (data.username != null) {
            message.username = data.username;
        }
        if (data.role != null) {
            message.role = data.role;
        }
        return message;
    }
    toObject() {
        const data: {
            tenant_id?: string;
            username?: string;
            role?: string;
        } = {};
        if (this.tenant_id != null) {
            data.tenant_id = this.tenant_id;
        }
        if (this.username != null) {
            data.username = this.username;
        }
        if (this.role != null) {
            data.role = this.role;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.tenant_id.length)
            writer.writeString(1, this.tenant_id);
        if (this.username.length)
            writer.writeString(2, this.username);
        if (this.role.length)
            writer.writeString(3, this.role);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddUserRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddUserRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.tenant_id = reader.readString();
                    break;
                case 2:
                    message.username = reader.readString();
                    break;
                case 3:
                    message.role = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AddUserRequest {
        return AddUserRequest.deserialize(bytes);
    }
}
export class AddUserResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        message?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
        }
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        message?: string;
    }): AddUserResponse {
        const message = new AddUserResponse({});
        if (data.message != null) {
            message.message = data.message;
        }
        return message;
    }
    toObject() {
        const data: {
            message?: string;
        } = {};
        if (this.message != null) {
            data.message = this.message;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.message.length)
            writer.writeString(1, this.message);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddUserResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddUserResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.message = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AddUserResponse {
        return AddUserResponse.deserialize(bytes);
    }
}
export class GetUsersRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        tenant_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("tenant_id" in data && data.tenant_id != undefined) {
                this.tenant_id = data.tenant_id;
            }
        }
    }
    get tenant_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set tenant_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        tenant_id?: string;
    }): GetUsersRequest {
        const message = new GetUsersRequest({});
        if (data.tenant_id != null) {
            message.tenant_id = data.tenant_id;
        }
        return message;
    }
    toObject() {
        const data: {
            tenant_id?: string;
        } = {};
        if (this.tenant_id != null) {
            data.tenant_id = this.tenant_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.tenant_id.length)
            writer.writeString(1, this.tenant_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUsersRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUsersRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.tenant_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetUsersRequest {
        return GetUsersRequest.deserialize(bytes);
    }
}
export class GetUsersResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        message?: string;
        tenant_users?: TenantUser[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("tenant_users" in data && data.tenant_users != undefined) {
                this.tenant_users = data.tenant_users;
            }
        }
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get tenant_users() {
        return pb_1.Message.getRepeatedWrapperField(this, TenantUser, 2) as TenantUser[];
    }
    set tenant_users(value: TenantUser[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        message?: string;
        tenant_users?: ReturnType<typeof TenantUser.prototype.toObject>[];
    }): GetUsersResponse {
        const message = new GetUsersResponse({});
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.tenant_users != null) {
            message.tenant_users = data.tenant_users.map(item => TenantUser.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            message?: string;
            tenant_users?: ReturnType<typeof TenantUser.prototype.toObject>[];
        } = {};
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.tenant_users != null) {
            data.tenant_users = this.tenant_users.map((item: TenantUser) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.message.length)
            writer.writeString(1, this.message);
        if (this.tenant_users.length)
            writer.writeRepeatedMessage(2, this.tenant_users, (item: TenantUser) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUsersResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUsersResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.message = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.tenant_users, () => pb_1.Message.addToRepeatedWrapperField(message, 2, TenantUser.deserialize(reader), TenantUser));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetUsersResponse {
        return GetUsersResponse.deserialize(bytes);
    }
}
export class Channel extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        tenant_id?: string;
        name?: string;
        description?: string;
        is_private?: boolean;
        created_by?: string;
        created_at?: dependency_1.Timestamp;
        updated_at?: dependency_1.Timestamp;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("tenant_id" in data && data.tenant_id != undefined) {
                this.tenant_id = data.tenant_id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("description" in data && data.description != undefined) {
                this.description = data.description;
            }
            if ("is_private" in data && data.is_private != undefined) {
                this.is_private = data.is_private;
            }
            if ("created_by" in data && data.created_by != undefined) {
                this.created_by = data.created_by;
            }
            if ("created_at" in data && data.created_at != undefined) {
                this.created_at = data.created_at;
            }
            if ("updated_at" in data && data.updated_at != undefined) {
                this.updated_at = data.updated_at;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get tenant_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set tenant_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get description() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set description(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get is_private() {
        return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
    }
    set is_private(value: boolean) {
        pb_1.Message.setField(this, 5, value);
    }
    get created_by() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set created_by(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get created_at() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 7) as dependency_1.Timestamp;
    }
    set created_at(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get has_created_at() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get updated_at() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 8) as dependency_1.Timestamp;
    }
    set updated_at(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 8, value);
    }
    get has_updated_at() {
        return pb_1.Message.getField(this, 8) != null;
    }
    static fromObject(data: {
        id?: string;
        tenant_id?: string;
        name?: string;
        description?: string;
        is_private?: boolean;
        created_by?: string;
        created_at?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        updated_at?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
    }): Channel {
        const message = new Channel({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.tenant_id != null) {
            message.tenant_id = data.tenant_id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.description != null) {
            message.description = data.description;
        }
        if (data.is_private != null) {
            message.is_private = data.is_private;
        }
        if (data.created_by != null) {
            message.created_by = data.created_by;
        }
        if (data.created_at != null) {
            message.created_at = dependency_1.Timestamp.fromObject(data.created_at);
        }
        if (data.updated_at != null) {
            message.updated_at = dependency_1.Timestamp.fromObject(data.updated_at);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            tenant_id?: string;
            name?: string;
            description?: string;
            is_private?: boolean;
            created_by?: string;
            created_at?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            updated_at?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.tenant_id != null) {
            data.tenant_id = this.tenant_id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.description != null) {
            data.description = this.description;
        }
        if (this.is_private != null) {
            data.is_private = this.is_private;
        }
        if (this.created_by != null) {
            data.created_by = this.created_by;
        }
        if (this.created_at != null) {
            data.created_at = this.created_at.toObject();
        }
        if (this.updated_at != null) {
            data.updated_at = this.updated_at.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.tenant_id.length)
            writer.writeString(2, this.tenant_id);
        if (this.name.length)
            writer.writeString(3, this.name);
        if (this.description.length)
            writer.writeString(4, this.description);
        if (this.is_private != false)
            writer.writeBool(5, this.is_private);
        if (this.created_by.length)
            writer.writeString(6, this.created_by);
        if (this.has_created_at)
            writer.writeMessage(7, this.created_at, () => this.created_at.serialize(writer));
        if (this.has_updated_at)
            writer.writeMessage(8, this.updated_at, () => this.updated_at.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Channel {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Channel();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.tenant_id = reader.readString();
                    break;
                case 3:
                    message.name = reader.readString();
                    break;
                case 4:
                    message.description = reader.readString();
                    break;
                case 5:
                    message.is_private = reader.readBool();
                    break;
                case 6:
                    message.created_by = reader.readString();
                    break;
                case 7:
                    reader.readMessage(message.created_at, () => message.created_at = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 8:
                    reader.readMessage(message.updated_at, () => message.updated_at = dependency_1.Timestamp.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Channel {
        return Channel.deserialize(bytes);
    }
}
export class ChannelMember extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        channel?: Channel;
        user?: User;
        role?: Role;
        added_by?: string;
        created_at?: dependency_1.Timestamp;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("channel" in data && data.channel != undefined) {
                this.channel = data.channel;
            }
            if ("user" in data && data.user != undefined) {
                this.user = data.user;
            }
            if ("role" in data && data.role != undefined) {
                this.role = data.role;
            }
            if ("added_by" in data && data.added_by != undefined) {
                this.added_by = data.added_by;
            }
            if ("created_at" in data && data.created_at != undefined) {
                this.created_at = data.created_at;
            }
        }
    }
    get channel() {
        return pb_1.Message.getWrapperField(this, Channel, 1) as Channel;
    }
    set channel(value: Channel) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_channel() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get user() {
        return pb_1.Message.getWrapperField(this, User, 2) as User;
    }
    set user(value: User) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_user() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get role() {
        return pb_1.Message.getWrapperField(this, Role, 3) as Role;
    }
    set role(value: Role) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_role() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get added_by() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set added_by(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get created_at() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 5) as dependency_1.Timestamp;
    }
    set created_at(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get has_created_at() {
        return pb_1.Message.getField(this, 5) != null;
    }
    static fromObject(data: {
        channel?: ReturnType<typeof Channel.prototype.toObject>;
        user?: ReturnType<typeof User.prototype.toObject>;
        role?: ReturnType<typeof Role.prototype.toObject>;
        added_by?: string;
        created_at?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
    }): ChannelMember {
        const message = new ChannelMember({});
        if (data.channel != null) {
            message.channel = Channel.fromObject(data.channel);
        }
        if (data.user != null) {
            message.user = User.fromObject(data.user);
        }
        if (data.role != null) {
            message.role = Role.fromObject(data.role);
        }
        if (data.added_by != null) {
            message.added_by = data.added_by;
        }
        if (data.created_at != null) {
            message.created_at = dependency_1.Timestamp.fromObject(data.created_at);
        }
        return message;
    }
    toObject() {
        const data: {
            channel?: ReturnType<typeof Channel.prototype.toObject>;
            user?: ReturnType<typeof User.prototype.toObject>;
            role?: ReturnType<typeof Role.prototype.toObject>;
            added_by?: string;
            created_at?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        } = {};
        if (this.channel != null) {
            data.channel = this.channel.toObject();
        }
        if (this.user != null) {
            data.user = this.user.toObject();
        }
        if (this.role != null) {
            data.role = this.role.toObject();
        }
        if (this.added_by != null) {
            data.added_by = this.added_by;
        }
        if (this.created_at != null) {
            data.created_at = this.created_at.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_channel)
            writer.writeMessage(1, this.channel, () => this.channel.serialize(writer));
        if (this.has_user)
            writer.writeMessage(2, this.user, () => this.user.serialize(writer));
        if (this.has_role)
            writer.writeMessage(3, this.role, () => this.role.serialize(writer));
        if (this.added_by.length)
            writer.writeString(4, this.added_by);
        if (this.has_created_at)
            writer.writeMessage(5, this.created_at, () => this.created_at.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChannelMember {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChannelMember();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.channel, () => message.channel = Channel.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.role, () => message.role = Role.deserialize(reader));
                    break;
                case 4:
                    message.added_by = reader.readString();
                    break;
                case 5:
                    reader.readMessage(message.created_at, () => message.created_at = dependency_1.Timestamp.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ChannelMember {
        return ChannelMember.deserialize(bytes);
    }
}
export class CreateChannelRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        tenant_id?: string;
        name?: string;
        description?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("tenant_id" in data && data.tenant_id != undefined) {
                this.tenant_id = data.tenant_id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("description" in data && data.description != undefined) {
                this.description = data.description;
            }
        }
    }
    get tenant_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set tenant_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get description() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set description(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        tenant_id?: string;
        name?: string;
        description?: string;
    }): CreateChannelRequest {
        const message = new CreateChannelRequest({});
        if (data.tenant_id != null) {
            message.tenant_id = data.tenant_id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.description != null) {
            message.description = data.description;
        }
        return message;
    }
    toObject() {
        const data: {
            tenant_id?: string;
            name?: string;
            description?: string;
        } = {};
        if (this.tenant_id != null) {
            data.tenant_id = this.tenant_id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.description != null) {
            data.description = this.description;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.tenant_id.length)
            writer.writeString(1, this.tenant_id);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.description.length)
            writer.writeString(3, this.description);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateChannelRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateChannelRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.tenant_id = reader.readString();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.description = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateChannelRequest {
        return CreateChannelRequest.deserialize(bytes);
    }
}
export class CreateChannelResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        message?: string;
        channel?: Channel;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("channel" in data && data.channel != undefined) {
                this.channel = data.channel;
            }
        }
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get channel() {
        return pb_1.Message.getWrapperField(this, Channel, 2) as Channel;
    }
    set channel(value: Channel) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_channel() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        message?: string;
        channel?: ReturnType<typeof Channel.prototype.toObject>;
    }): CreateChannelResponse {
        const message = new CreateChannelResponse({});
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.channel != null) {
            message.channel = Channel.fromObject(data.channel);
        }
        return message;
    }
    toObject() {
        const data: {
            message?: string;
            channel?: ReturnType<typeof Channel.prototype.toObject>;
        } = {};
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.channel != null) {
            data.channel = this.channel.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.message.length)
            writer.writeString(1, this.message);
        if (this.has_channel)
            writer.writeMessage(2, this.channel, () => this.channel.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateChannelResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateChannelResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.message = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.channel, () => message.channel = Channel.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateChannelResponse {
        return CreateChannelResponse.deserialize(bytes);
    }
}
export class UpdateChannelRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        tenant_id?: string;
        channel_id?: string;
        name?: string;
        description?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("tenant_id" in data && data.tenant_id != undefined) {
                this.tenant_id = data.tenant_id;
            }
            if ("channel_id" in data && data.channel_id != undefined) {
                this.channel_id = data.channel_id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("description" in data && data.description != undefined) {
                this.description = data.description;
            }
        }
    }
    get tenant_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set tenant_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get channel_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set channel_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get description() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set description(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        tenant_id?: string;
        channel_id?: string;
        name?: string;
        description?: string;
    }): UpdateChannelRequest {
        const message = new UpdateChannelRequest({});
        if (data.tenant_id != null) {
            message.tenant_id = data.tenant_id;
        }
        if (data.channel_id != null) {
            message.channel_id = data.channel_id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.description != null) {
            message.description = data.description;
        }
        return message;
    }
    toObject() {
        const data: {
            tenant_id?: string;
            channel_id?: string;
            name?: string;
            description?: string;
        } = {};
        if (this.tenant_id != null) {
            data.tenant_id = this.tenant_id;
        }
        if (this.channel_id != null) {
            data.channel_id = this.channel_id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.description != null) {
            data.description = this.description;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.tenant_id.length)
            writer.writeString(1, this.tenant_id);
        if (this.channel_id.length)
            writer.writeString(2, this.channel_id);
        if (this.name.length)
            writer.writeString(3, this.name);
        if (this.description.length)
            writer.writeString(4, this.description);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateChannelRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateChannelRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.tenant_id = reader.readString();
                    break;
                case 2:
                    message.channel_id = reader.readString();
                    break;
                case 3:
                    message.name = reader.readString();
                    break;
                case 4:
                    message.description = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdateChannelRequest {
        return UpdateChannelRequest.deserialize(bytes);
    }
}
export class UpdateChannelResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        message?: string;
        channel?: Channel;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("channel" in data && data.channel != undefined) {
                this.channel = data.channel;
            }
        }
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get channel() {
        return pb_1.Message.getWrapperField(this, Channel, 2) as Channel;
    }
    set channel(value: Channel) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_channel() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        message?: string;
        channel?: ReturnType<typeof Channel.prototype.toObject>;
    }): UpdateChannelResponse {
        const message = new UpdateChannelResponse({});
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.channel != null) {
            message.channel = Channel.fromObject(data.channel);
        }
        return message;
    }
    toObject() {
        const data: {
            message?: string;
            channel?: ReturnType<typeof Channel.prototype.toObject>;
        } = {};
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.channel != null) {
            data.channel = this.channel.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.message.length)
            writer.writeString(1, this.message);
        if (this.has_channel)
            writer.writeMessage(2, this.channel, () => this.channel.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateChannelResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateChannelResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.message = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.channel, () => message.channel = Channel.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdateChannelResponse {
        return UpdateChannelResponse.deserialize(bytes);
    }
}
export class GetChannelsRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        tenant_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("tenant_id" in data && data.tenant_id != undefined) {
                this.tenant_id = data.tenant_id;
            }
        }
    }
    get tenant_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set tenant_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        tenant_id?: string;
    }): GetChannelsRequest {
        const message = new GetChannelsRequest({});
        if (data.tenant_id != null) {
            message.tenant_id = data.tenant_id;
        }
        return message;
    }
    toObject() {
        const data: {
            tenant_id?: string;
        } = {};
        if (this.tenant_id != null) {
            data.tenant_id = this.tenant_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.tenant_id.length)
            writer.writeString(1, this.tenant_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetChannelsRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetChannelsRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.tenant_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetChannelsRequest {
        return GetChannelsRequest.deserialize(bytes);
    }
}
export class GetChannelsResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        message?: string;
        channels?: Channel[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("channels" in data && data.channels != undefined) {
                this.channels = data.channels;
            }
        }
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get channels() {
        return pb_1.Message.getRepeatedWrapperField(this, Channel, 2) as Channel[];
    }
    set channels(value: Channel[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        message?: string;
        channels?: ReturnType<typeof Channel.prototype.toObject>[];
    }): GetChannelsResponse {
        const message = new GetChannelsResponse({});
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.channels != null) {
            message.channels = data.channels.map(item => Channel.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            message?: string;
            channels?: ReturnType<typeof Channel.prototype.toObject>[];
        } = {};
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.channels != null) {
            data.channels = this.channels.map((item: Channel) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.message.length)
            writer.writeString(1, this.message);
        if (this.channels.length)
            writer.writeRepeatedMessage(2, this.channels, (item: Channel) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetChannelsResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetChannelsResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.message = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.channels, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Channel.deserialize(reader), Channel));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetChannelsResponse {
        return GetChannelsResponse.deserialize(bytes);
    }
}
export class GetChannelMembersRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        tenant_id?: string;
        channel_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("tenant_id" in data && data.tenant_id != undefined) {
                this.tenant_id = data.tenant_id;
            }
            if ("channel_id" in data && data.channel_id != undefined) {
                this.channel_id = data.channel_id;
            }
        }
    }
    get tenant_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set tenant_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get channel_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set channel_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        tenant_id?: string;
        channel_id?: string;
    }): GetChannelMembersRequest {
        const message = new GetChannelMembersRequest({});
        if (data.tenant_id != null) {
            message.tenant_id = data.tenant_id;
        }
        if (data.channel_id != null) {
            message.channel_id = data.channel_id;
        }
        return message;
    }
    toObject() {
        const data: {
            tenant_id?: string;
            channel_id?: string;
        } = {};
        if (this.tenant_id != null) {
            data.tenant_id = this.tenant_id;
        }
        if (this.channel_id != null) {
            data.channel_id = this.channel_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.tenant_id.length)
            writer.writeString(1, this.tenant_id);
        if (this.channel_id.length)
            writer.writeString(2, this.channel_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetChannelMembersRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetChannelMembersRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.tenant_id = reader.readString();
                    break;
                case 2:
                    message.channel_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetChannelMembersRequest {
        return GetChannelMembersRequest.deserialize(bytes);
    }
}
export class GetChannelMembersResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        message?: string;
        channel_members?: ChannelMember[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("channel_members" in data && data.channel_members != undefined) {
                this.channel_members = data.channel_members;
            }
        }
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get channel_members() {
        return pb_1.Message.getRepeatedWrapperField(this, ChannelMember, 2) as ChannelMember[];
    }
    set channel_members(value: ChannelMember[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        message?: string;
        channel_members?: ReturnType<typeof ChannelMember.prototype.toObject>[];
    }): GetChannelMembersResponse {
        const message = new GetChannelMembersResponse({});
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.channel_members != null) {
            message.channel_members = data.channel_members.map(item => ChannelMember.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            message?: string;
            channel_members?: ReturnType<typeof ChannelMember.prototype.toObject>[];
        } = {};
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.channel_members != null) {
            data.channel_members = this.channel_members.map((item: ChannelMember) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.message.length)
            writer.writeString(1, this.message);
        if (this.channel_members.length)
            writer.writeRepeatedMessage(2, this.channel_members, (item: ChannelMember) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetChannelMembersResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetChannelMembersResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.message = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.channel_members, () => pb_1.Message.addToRepeatedWrapperField(message, 2, ChannelMember.deserialize(reader), ChannelMember));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetChannelMembersResponse {
        return GetChannelMembersResponse.deserialize(bytes);
    }
}
export class AddChannelMemberRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        tenant_id?: string;
        channel_id?: string;
        user_id?: string;
        role?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("tenant_id" in data && data.tenant_id != undefined) {
                this.tenant_id = data.tenant_id;
            }
            if ("channel_id" in data && data.channel_id != undefined) {
                this.channel_id = data.channel_id;
            }
            if ("user_id" in data && data.user_id != undefined) {
                this.user_id = data.user_id;
            }
            if ("role" in data && data.role != undefined) {
                this.role = data.role;
            }
        }
    }
    get tenant_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set tenant_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get channel_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set channel_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get user_id() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set user_id(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get role() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set role(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        tenant_id?: string;
        channel_id?: string;
        user_id?: string;
        role?: string;
    }): AddChannelMemberRequest {
        const message = new AddChannelMemberRequest({});
        if (data.tenant_id != null) {
            message.tenant_id = data.tenant_id;
        }
        if (data.channel_id != null) {
            message.channel_id = data.channel_id;
        }
        if (data.user_id != null) {
            message.user_id = data.user_id;
        }
        if (data.role != null) {
            message.role = data.role;
        }
        return message;
    }
    toObject() {
        const data: {
            tenant_id?: string;
            channel_id?: string;
            user_id?: string;
            role?: string;
        } = {};
        if (this.tenant_id != null) {
            data.tenant_id = this.tenant_id;
        }
        if (this.channel_id != null) {
            data.channel_id = this.channel_id;
        }
        if (this.user_id != null) {
            data.user_id = this.user_id;
        }
        if (this.role != null) {
            data.role = this.role;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.tenant_id.length)
            writer.writeString(1, this.tenant_id);
        if (this.channel_id.length)
            writer.writeString(2, this.channel_id);
        if (this.user_id.length)
            writer.writeString(3, this.user_id);
        if (this.role.length)
            writer.writeString(4, this.role);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddChannelMemberRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddChannelMemberRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.tenant_id = reader.readString();
                    break;
                case 2:
                    message.channel_id = reader.readString();
                    break;
                case 3:
                    message.user_id = reader.readString();
                    break;
                case 4:
                    message.role = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AddChannelMemberRequest {
        return AddChannelMemberRequest.deserialize(bytes);
    }
}
export class AddChannelMemberResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        message?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
        }
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        message?: string;
    }): AddChannelMemberResponse {
        const message = new AddChannelMemberResponse({});
        if (data.message != null) {
            message.message = data.message;
        }
        return message;
    }
    toObject() {
        const data: {
            message?: string;
        } = {};
        if (this.message != null) {
            data.message = this.message;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.message.length)
            writer.writeString(1, this.message);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddChannelMemberResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddChannelMemberResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.message = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AddChannelMemberResponse {
        return AddChannelMemberResponse.deserialize(bytes);
    }
}
export class RemoveChannelMemberRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        tenant_id?: string;
        channel_id?: string;
        user_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("tenant_id" in data && data.tenant_id != undefined) {
                this.tenant_id = data.tenant_id;
            }
            if ("channel_id" in data && data.channel_id != undefined) {
                this.channel_id = data.channel_id;
            }
            if ("user_id" in data && data.user_id != undefined) {
                this.user_id = data.user_id;
            }
        }
    }
    get tenant_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set tenant_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get channel_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set channel_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get user_id() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set user_id(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        tenant_id?: string;
        channel_id?: string;
        user_id?: string;
    }): RemoveChannelMemberRequest {
        const message = new RemoveChannelMemberRequest({});
        if (data.tenant_id != null) {
            message.tenant_id = data.tenant_id;
        }
        if (data.channel_id != null) {
            message.channel_id = data.channel_id;
        }
        if (data.user_id != null) {
            message.user_id = data.user_id;
        }
        return message;
    }
    toObject() {
        const data: {
            tenant_id?: string;
            channel_id?: string;
            user_id?: string;
        } = {};
        if (this.tenant_id != null) {
            data.tenant_id = this.tenant_id;
        }
        if (this.channel_id != null) {
            data.channel_id = this.channel_id;
        }
        if (this.user_id != null) {
            data.user_id = this.user_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.tenant_id.length)
            writer.writeString(1, this.tenant_id);
        if (this.channel_id.length)
            writer.writeString(2, this.channel_id);
        if (this.user_id.length)
            writer.writeString(3, this.user_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveChannelMemberRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveChannelMemberRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.tenant_id = reader.readString();
                    break;
                case 2:
                    message.channel_id = reader.readString();
                    break;
                case 3:
                    message.user_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RemoveChannelMemberRequest {
        return RemoveChannelMemberRequest.deserialize(bytes);
    }
}
export class RemoveChannelMemberResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        message?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
        }
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        message?: string;
    }): RemoveChannelMemberResponse {
        const message = new RemoveChannelMemberResponse({});
        if (data.message != null) {
            message.message = data.message;
        }
        return message;
    }
    toObject() {
        const data: {
            message?: string;
        } = {};
        if (this.message != null) {
            data.message = this.message;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.message.length)
            writer.writeString(1, this.message);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveChannelMemberResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveChannelMemberResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.message = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RemoveChannelMemberResponse {
        return RemoveChannelMemberResponse.deserialize(bytes);
    }
}
export abstract class UnimplementedUserServiceService {
    static definition = {
        CreateUserIfNotExists: {
            path: "/userservice.UserService/CreateUserIfNotExists",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: CreateUserRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => CreateUserRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: CreateUserResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => CreateUserResponse.deserialize(new Uint8Array(bytes))
        },
        GetTenants: {
            path: "/userservice.UserService/GetTenants",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: GetTenantsRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => GetTenantsRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: GetTenantsResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => GetTenantsResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract CreateUserIfNotExists(call: grpc_1.ServerUnaryCall<CreateUserRequest, CreateUserResponse>, callback: grpc_1.sendUnaryData<CreateUserResponse>): void;
    abstract GetTenants(call: grpc_1.ServerUnaryCall<GetTenantsRequest, GetTenantsResponse>, callback: grpc_1.sendUnaryData<GetTenantsResponse>): void;
}
export class UserServiceClient {
    private _address: string;
    private _client: grpc_web_1.GrpcWebClientBase;
    constructor(address: string, credentials?: Object, options?: grpc_web_1.GrpcWebClientBaseOptions) {
        if (!options)
            options = {};
        options.format = options.format || "text";
        this._address = address;
        this._client = new grpc_web_1.GrpcWebClientBase(options);
    }
    private static CreateUserIfNotExists = new grpc_web_1.MethodDescriptor<CreateUserRequest, CreateUserResponse>("/userservice.UserService/CreateUserIfNotExists", grpc_web_1.MethodType.UNARY, CreateUserRequest, CreateUserResponse, (message: CreateUserRequest) => message.serialize(), CreateUserResponse.deserialize);
    CreateUserIfNotExists(message: CreateUserRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<CreateUserRequest, CreateUserResponse>(this._address + "/userservice.UserService/CreateUserIfNotExists", message, metadata || {}, UserServiceClient.CreateUserIfNotExists);
    }
    private static GetTenants = new grpc_web_1.MethodDescriptor<GetTenantsRequest, GetTenantsResponse>("/userservice.UserService/GetTenants", grpc_web_1.MethodType.UNARY, GetTenantsRequest, GetTenantsResponse, (message: GetTenantsRequest) => message.serialize(), GetTenantsResponse.deserialize);
    GetTenants(message: GetTenantsRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<GetTenantsRequest, GetTenantsResponse>(this._address + "/userservice.UserService/GetTenants", message, metadata || {}, UserServiceClient.GetTenants);
    }
}
export abstract class UnimplementedTenantServiceService {
    static definition = {
        CreateTenant: {
            path: "/userservice.TenantService/CreateTenant",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: CreateTenantRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => CreateTenantRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: CreateTenantResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => CreateTenantResponse.deserialize(new Uint8Array(bytes))
        },
        AddUser: {
            path: "/userservice.TenantService/AddUser",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: AddUserRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => AddUserRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: AddUserResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => AddUserResponse.deserialize(new Uint8Array(bytes))
        },
        GetUsers: {
            path: "/userservice.TenantService/GetUsers",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: GetUsersRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => GetUsersRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: GetUsersResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => GetUsersResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract CreateTenant(call: grpc_1.ServerUnaryCall<CreateTenantRequest, CreateTenantResponse>, callback: grpc_1.sendUnaryData<CreateTenantResponse>): void;
    abstract AddUser(call: grpc_1.ServerUnaryCall<AddUserRequest, AddUserResponse>, callback: grpc_1.sendUnaryData<AddUserResponse>): void;
    abstract GetUsers(call: grpc_1.ServerUnaryCall<GetUsersRequest, GetUsersResponse>, callback: grpc_1.sendUnaryData<GetUsersResponse>): void;
}
export class TenantServiceClient {
    private _address: string;
    private _client: grpc_web_1.GrpcWebClientBase;
    constructor(address: string, credentials?: Object, options?: grpc_web_1.GrpcWebClientBaseOptions) {
        if (!options)
            options = {};
        options.format = options.format || "text";
        this._address = address;
        this._client = new grpc_web_1.GrpcWebClientBase(options);
    }
    private static CreateTenant = new grpc_web_1.MethodDescriptor<CreateTenantRequest, CreateTenantResponse>("/userservice.TenantService/CreateTenant", grpc_web_1.MethodType.UNARY, CreateTenantRequest, CreateTenantResponse, (message: CreateTenantRequest) => message.serialize(), CreateTenantResponse.deserialize);
    CreateTenant(message: CreateTenantRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<CreateTenantRequest, CreateTenantResponse>(this._address + "/userservice.TenantService/CreateTenant", message, metadata || {}, TenantServiceClient.CreateTenant);
    }
    private static AddUser = new grpc_web_1.MethodDescriptor<AddUserRequest, AddUserResponse>("/userservice.TenantService/AddUser", grpc_web_1.MethodType.UNARY, AddUserRequest, AddUserResponse, (message: AddUserRequest) => message.serialize(), AddUserResponse.deserialize);
    AddUser(message: AddUserRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<AddUserRequest, AddUserResponse>(this._address + "/userservice.TenantService/AddUser", message, metadata || {}, TenantServiceClient.AddUser);
    }
    private static GetUsers = new grpc_web_1.MethodDescriptor<GetUsersRequest, GetUsersResponse>("/userservice.TenantService/GetUsers", grpc_web_1.MethodType.UNARY, GetUsersRequest, GetUsersResponse, (message: GetUsersRequest) => message.serialize(), GetUsersResponse.deserialize);
    GetUsers(message: GetUsersRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<GetUsersRequest, GetUsersResponse>(this._address + "/userservice.TenantService/GetUsers", message, metadata || {}, TenantServiceClient.GetUsers);
    }
}
export abstract class UnimplementedChannelServiceService {
    static definition = {
        Create: {
            path: "/userservice.ChannelService/Create",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: CreateChannelRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => CreateChannelRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: CreateChannelResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => CreateChannelResponse.deserialize(new Uint8Array(bytes))
        },
        Update: {
            path: "/userservice.ChannelService/Update",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: UpdateChannelRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => UpdateChannelRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: UpdateChannelResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => UpdateChannelResponse.deserialize(new Uint8Array(bytes))
        },
        GetChannels: {
            path: "/userservice.ChannelService/GetChannels",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: GetChannelsRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => GetChannelsRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: GetChannelsResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => GetChannelsResponse.deserialize(new Uint8Array(bytes))
        },
        GetMembers: {
            path: "/userservice.ChannelService/GetMembers",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: GetChannelMembersRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => GetChannelMembersRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: GetChannelMembersResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => GetChannelMembersResponse.deserialize(new Uint8Array(bytes))
        },
        AddMember: {
            path: "/userservice.ChannelService/AddMember",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: AddChannelMemberRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => AddChannelMemberRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: AddChannelMemberResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => AddChannelMemberResponse.deserialize(new Uint8Array(bytes))
        },
        RemoveMember: {
            path: "/userservice.ChannelService/RemoveMember",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: RemoveChannelMemberRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => RemoveChannelMemberRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: RemoveChannelMemberResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => RemoveChannelMemberResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract Create(call: grpc_1.ServerUnaryCall<CreateChannelRequest, CreateChannelResponse>, callback: grpc_1.sendUnaryData<CreateChannelResponse>): void;
    abstract Update(call: grpc_1.ServerUnaryCall<UpdateChannelRequest, UpdateChannelResponse>, callback: grpc_1.sendUnaryData<UpdateChannelResponse>): void;
    abstract GetChannels(call: grpc_1.ServerUnaryCall<GetChannelsRequest, GetChannelsResponse>, callback: grpc_1.sendUnaryData<GetChannelsResponse>): void;
    abstract GetMembers(call: grpc_1.ServerUnaryCall<GetChannelMembersRequest, GetChannelMembersResponse>, callback: grpc_1.sendUnaryData<GetChannelMembersResponse>): void;
    abstract AddMember(call: grpc_1.ServerUnaryCall<AddChannelMemberRequest, AddChannelMemberResponse>, callback: grpc_1.sendUnaryData<AddChannelMemberResponse>): void;
    abstract RemoveMember(call: grpc_1.ServerUnaryCall<RemoveChannelMemberRequest, RemoveChannelMemberResponse>, callback: grpc_1.sendUnaryData<RemoveChannelMemberResponse>): void;
}
export class ChannelServiceClient {
    private _address: string;
    private _client: grpc_web_1.GrpcWebClientBase;
    constructor(address: string, credentials?: Object, options?: grpc_web_1.GrpcWebClientBaseOptions) {
        if (!options)
            options = {};
        options.format = options.format || "text";
        this._address = address;
        this._client = new grpc_web_1.GrpcWebClientBase(options);
    }
    private static Create = new grpc_web_1.MethodDescriptor<CreateChannelRequest, CreateChannelResponse>("/userservice.ChannelService/Create", grpc_web_1.MethodType.UNARY, CreateChannelRequest, CreateChannelResponse, (message: CreateChannelRequest) => message.serialize(), CreateChannelResponse.deserialize);
    Create(message: CreateChannelRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<CreateChannelRequest, CreateChannelResponse>(this._address + "/userservice.ChannelService/Create", message, metadata || {}, ChannelServiceClient.Create);
    }
    private static Update = new grpc_web_1.MethodDescriptor<UpdateChannelRequest, UpdateChannelResponse>("/userservice.ChannelService/Update", grpc_web_1.MethodType.UNARY, UpdateChannelRequest, UpdateChannelResponse, (message: UpdateChannelRequest) => message.serialize(), UpdateChannelResponse.deserialize);
    Update(message: UpdateChannelRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<UpdateChannelRequest, UpdateChannelResponse>(this._address + "/userservice.ChannelService/Update", message, metadata || {}, ChannelServiceClient.Update);
    }
    private static GetChannels = new grpc_web_1.MethodDescriptor<GetChannelsRequest, GetChannelsResponse>("/userservice.ChannelService/GetChannels", grpc_web_1.MethodType.UNARY, GetChannelsRequest, GetChannelsResponse, (message: GetChannelsRequest) => message.serialize(), GetChannelsResponse.deserialize);
    GetChannels(message: GetChannelsRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<GetChannelsRequest, GetChannelsResponse>(this._address + "/userservice.ChannelService/GetChannels", message, metadata || {}, ChannelServiceClient.GetChannels);
    }
    private static GetMembers = new grpc_web_1.MethodDescriptor<GetChannelMembersRequest, GetChannelMembersResponse>("/userservice.ChannelService/GetMembers", grpc_web_1.MethodType.UNARY, GetChannelMembersRequest, GetChannelMembersResponse, (message: GetChannelMembersRequest) => message.serialize(), GetChannelMembersResponse.deserialize);
    GetMembers(message: GetChannelMembersRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<GetChannelMembersRequest, GetChannelMembersResponse>(this._address + "/userservice.ChannelService/GetMembers", message, metadata || {}, ChannelServiceClient.GetMembers);
    }
    private static AddMember = new grpc_web_1.MethodDescriptor<AddChannelMemberRequest, AddChannelMemberResponse>("/userservice.ChannelService/AddMember", grpc_web_1.MethodType.UNARY, AddChannelMemberRequest, AddChannelMemberResponse, (message: AddChannelMemberRequest) => message.serialize(), AddChannelMemberResponse.deserialize);
    AddMember(message: AddChannelMemberRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<AddChannelMemberRequest, AddChannelMemberResponse>(this._address + "/userservice.ChannelService/AddMember", message, metadata || {}, ChannelServiceClient.AddMember);
    }
    private static RemoveMember = new grpc_web_1.MethodDescriptor<RemoveChannelMemberRequest, RemoveChannelMemberResponse>("/userservice.ChannelService/RemoveMember", grpc_web_1.MethodType.UNARY, RemoveChannelMemberRequest, RemoveChannelMemberResponse, (message: RemoveChannelMemberRequest) => message.serialize(), RemoveChannelMemberResponse.deserialize);
    RemoveMember(message: RemoveChannelMemberRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<RemoveChannelMemberRequest, RemoveChannelMemberResponse>(this._address + "/userservice.ChannelService/RemoveMember", message, metadata || {}, ChannelServiceClient.RemoveMember);
    }
}

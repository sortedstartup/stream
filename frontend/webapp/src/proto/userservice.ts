// @ts-nocheck
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: userservice.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "grpc-web";
import * as grpc_web_1 from "grpc-web";
export class User extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        username?: string;
        email?: string;
        created_at?: dependency_1.Timestamp;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("username" in data && data.username != undefined) {
                this.username = data.username;
            }
            if ("email" in data && data.email != undefined) {
                this.email = data.email;
            }
            if ("created_at" in data && data.created_at != undefined) {
                this.created_at = data.created_at;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get username() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set username(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get email() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set email(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get created_at() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 4) as dependency_1.Timestamp;
    }
    set created_at(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_created_at() {
        return pb_1.Message.getField(this, 4) != null;
    }
    static fromObject(data: {
        id?: string;
        username?: string;
        email?: string;
        created_at?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
    }): User {
        const message = new User({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.username != null) {
            message.username = data.username;
        }
        if (data.email != null) {
            message.email = data.email;
        }
        if (data.created_at != null) {
            message.created_at = dependency_1.Timestamp.fromObject(data.created_at);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            username?: string;
            email?: string;
            created_at?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.username != null) {
            data.username = this.username;
        }
        if (this.email != null) {
            data.email = this.email;
        }
        if (this.created_at != null) {
            data.created_at = this.created_at.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.username.length)
            writer.writeString(2, this.username);
        if (this.email.length)
            writer.writeString(3, this.email);
        if (this.has_created_at)
            writer.writeMessage(4, this.created_at, () => this.created_at.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): User {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new User();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.username = reader.readString();
                    break;
                case 3:
                    message.email = reader.readString();
                    break;
                case 4:
                    reader.readMessage(message.created_at, () => message.created_at = dependency_1.Timestamp.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): User {
        return User.deserialize(bytes);
    }
}
export class GetUserRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user_id" in data && data.user_id != undefined) {
                this.user_id = data.user_id;
            }
        }
    }
    get user_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set user_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        user_id?: string;
    }): GetUserRequest {
        const message = new GetUserRequest({});
        if (data.user_id != null) {
            message.user_id = data.user_id;
        }
        return message;
    }
    toObject() {
        const data: {
            user_id?: string;
        } = {};
        if (this.user_id != null) {
            data.user_id = this.user_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.user_id.length)
            writer.writeString(1, this.user_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.user_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetUserRequest {
        return GetUserRequest.deserialize(bytes);
    }
}
export class CreateUserRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        username?: string;
        email?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("username" in data && data.username != undefined) {
                this.username = data.username;
            }
            if ("email" in data && data.email != undefined) {
                this.email = data.email;
            }
        }
    }
    get username() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set username(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get email() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set email(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        username?: string;
        email?: string;
    }): CreateUserRequest {
        const message = new CreateUserRequest({});
        if (data.username != null) {
            message.username = data.username;
        }
        if (data.email != null) {
            message.email = data.email;
        }
        return message;
    }
    toObject() {
        const data: {
            username?: string;
            email?: string;
        } = {};
        if (this.username != null) {
            data.username = this.username;
        }
        if (this.email != null) {
            data.email = this.email;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.username.length)
            writer.writeString(1, this.username);
        if (this.email.length)
            writer.writeString(2, this.email);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateUserRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateUserRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.username = reader.readString();
                    break;
                case 2:
                    message.email = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateUserRequest {
        return CreateUserRequest.deserialize(bytes);
    }
}
export class UpdateUserRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[2], [3]];
    constructor(data?: any[] | ({
        user_id?: string;
    } & (({
        username?: string;
    }) | ({
        email?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user_id" in data && data.user_id != undefined) {
                this.user_id = data.user_id;
            }
            if ("username" in data && data.username != undefined) {
                this.username = data.username;
            }
            if ("email" in data && data.email != undefined) {
                this.email = data.email;
            }
        }
    }
    get user_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set user_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get username() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set username(value: string) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
    }
    get has_username() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get email() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set email(value: string) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
    }
    get has_email() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get _username() {
        const cases: {
            [index: number]: "none" | "username";
        } = {
            0: "none",
            2: "username"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get _email() {
        const cases: {
            [index: number]: "none" | "email";
        } = {
            0: "none",
            3: "email"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    static fromObject(data: {
        user_id?: string;
        username?: string;
        email?: string;
    }): UpdateUserRequest {
        const message = new UpdateUserRequest({});
        if (data.user_id != null) {
            message.user_id = data.user_id;
        }
        if (data.username != null) {
            message.username = data.username;
        }
        if (data.email != null) {
            message.email = data.email;
        }
        return message;
    }
    toObject() {
        const data: {
            user_id?: string;
            username?: string;
            email?: string;
        } = {};
        if (this.user_id != null) {
            data.user_id = this.user_id;
        }
        if (this.username != null) {
            data.username = this.username;
        }
        if (this.email != null) {
            data.email = this.email;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.user_id.length)
            writer.writeString(1, this.user_id);
        if (this.has_username)
            writer.writeString(2, this.username);
        if (this.has_email)
            writer.writeString(3, this.email);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateUserRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateUserRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.user_id = reader.readString();
                    break;
                case 2:
                    message.username = reader.readString();
                    break;
                case 3:
                    message.email = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdateUserRequest {
        return UpdateUserRequest.deserialize(bytes);
    }
}
export class DeleteUserRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user_id" in data && data.user_id != undefined) {
                this.user_id = data.user_id;
            }
        }
    }
    get user_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set user_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        user_id?: string;
    }): DeleteUserRequest {
        const message = new DeleteUserRequest({});
        if (data.user_id != null) {
            message.user_id = data.user_id;
        }
        return message;
    }
    toObject() {
        const data: {
            user_id?: string;
        } = {};
        if (this.user_id != null) {
            data.user_id = this.user_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.user_id.length)
            writer.writeString(1, this.user_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteUserRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteUserRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.user_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DeleteUserRequest {
        return DeleteUserRequest.deserialize(bytes);
    }
}
export class ValidateUserRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user_id" in data && data.user_id != undefined) {
                this.user_id = data.user_id;
            }
        }
    }
    get user_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set user_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        user_id?: string;
    }): ValidateUserRequest {
        const message = new ValidateUserRequest({});
        if (data.user_id != null) {
            message.user_id = data.user_id;
        }
        return message;
    }
    toObject() {
        const data: {
            user_id?: string;
        } = {};
        if (this.user_id != null) {
            data.user_id = this.user_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.user_id.length)
            writer.writeString(1, this.user_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidateUserRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidateUserRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.user_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ValidateUserRequest {
        return ValidateUserRequest.deserialize(bytes);
    }
}
export class ValidateUserResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        is_valid?: boolean;
        user?: User;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("is_valid" in data && data.is_valid != undefined) {
                this.is_valid = data.is_valid;
            }
            if ("user" in data && data.user != undefined) {
                this.user = data.user;
            }
        }
    }
    get is_valid() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set is_valid(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    get user() {
        return pb_1.Message.getWrapperField(this, User, 2) as User;
    }
    set user(value: User) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_user() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        is_valid?: boolean;
        user?: ReturnType<typeof User.prototype.toObject>;
    }): ValidateUserResponse {
        const message = new ValidateUserResponse({});
        if (data.is_valid != null) {
            message.is_valid = data.is_valid;
        }
        if (data.user != null) {
            message.user = User.fromObject(data.user);
        }
        return message;
    }
    toObject() {
        const data: {
            is_valid?: boolean;
            user?: ReturnType<typeof User.prototype.toObject>;
        } = {};
        if (this.is_valid != null) {
            data.is_valid = this.is_valid;
        }
        if (this.user != null) {
            data.user = this.user.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.is_valid != false)
            writer.writeBool(1, this.is_valid);
        if (this.has_user)
            writer.writeMessage(2, this.user, () => this.user.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidateUserResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidateUserResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.is_valid = reader.readBool();
                    break;
                case 2:
                    reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ValidateUserResponse {
        return ValidateUserResponse.deserialize(bytes);
    }
}
export class GetUserByEmailRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        email?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("email" in data && data.email != undefined) {
                this.email = data.email;
            }
        }
    }
    get email() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set email(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        email?: string;
    }): GetUserByEmailRequest {
        const message = new GetUserByEmailRequest({});
        if (data.email != null) {
            message.email = data.email;
        }
        return message;
    }
    toObject() {
        const data: {
            email?: string;
        } = {};
        if (this.email != null) {
            data.email = this.email;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.email.length)
            writer.writeString(1, this.email);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserByEmailRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserByEmailRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.email = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetUserByEmailRequest {
        return GetUserByEmailRequest.deserialize(bytes);
    }
}
export class Empty extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): Empty {
        const message = new Empty({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Empty {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Empty();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Empty {
        return Empty.deserialize(bytes);
    }
}
export abstract class UnimplementedUserServiceService {
    static definition = {
        GetUser: {
            path: "/userservice.UserService/GetUser",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: GetUserRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => GetUserRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: User) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => User.deserialize(new Uint8Array(bytes))
        },
        CreateUser: {
            path: "/userservice.UserService/CreateUser",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: CreateUserRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => CreateUserRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: User) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => User.deserialize(new Uint8Array(bytes))
        },
        UpdateUser: {
            path: "/userservice.UserService/UpdateUser",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: UpdateUserRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => UpdateUserRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: User) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => User.deserialize(new Uint8Array(bytes))
        },
        DeleteUser: {
            path: "/userservice.UserService/DeleteUser",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: DeleteUserRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => DeleteUserRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: Empty) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => Empty.deserialize(new Uint8Array(bytes))
        },
        ValidateUser: {
            path: "/userservice.UserService/ValidateUser",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ValidateUserRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ValidateUserRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: ValidateUserResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => ValidateUserResponse.deserialize(new Uint8Array(bytes))
        },
        GetUserByEmail: {
            path: "/userservice.UserService/GetUserByEmail",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: GetUserByEmailRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => GetUserByEmailRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: User) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => User.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract GetUser(call: grpc_1.ServerUnaryCall<GetUserRequest, User>, callback: grpc_1.sendUnaryData<User>): void;
    abstract CreateUser(call: grpc_1.ServerUnaryCall<CreateUserRequest, User>, callback: grpc_1.sendUnaryData<User>): void;
    abstract UpdateUser(call: grpc_1.ServerUnaryCall<UpdateUserRequest, User>, callback: grpc_1.sendUnaryData<User>): void;
    abstract DeleteUser(call: grpc_1.ServerUnaryCall<DeleteUserRequest, Empty>, callback: grpc_1.sendUnaryData<Empty>): void;
    abstract ValidateUser(call: grpc_1.ServerUnaryCall<ValidateUserRequest, ValidateUserResponse>, callback: grpc_1.sendUnaryData<ValidateUserResponse>): void;
    abstract GetUserByEmail(call: grpc_1.ServerUnaryCall<GetUserByEmailRequest, User>, callback: grpc_1.sendUnaryData<User>): void;
}
export class UserServiceClient {
    private _address: string;
    private _client: grpc_web_1.GrpcWebClientBase;
    constructor(address: string, credentials?: Object, options?: grpc_web_1.GrpcWebClientBaseOptions) {
        if (!options)
            options = {};
        options.format = options.format || "text";
        this._address = address;
        this._client = new grpc_web_1.GrpcWebClientBase(options);
    }
    private static GetUser = new grpc_web_1.MethodDescriptor<GetUserRequest, User>("/userservice.UserService/GetUser", grpc_web_1.MethodType.UNARY, GetUserRequest, User, (message: GetUserRequest) => message.serialize(), User.deserialize);
    GetUser(message: GetUserRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<GetUserRequest, User>(this._address + "/userservice.UserService/GetUser", message, metadata || {}, UserServiceClient.GetUser);
    }
    private static CreateUser = new grpc_web_1.MethodDescriptor<CreateUserRequest, User>("/userservice.UserService/CreateUser", grpc_web_1.MethodType.UNARY, CreateUserRequest, User, (message: CreateUserRequest) => message.serialize(), User.deserialize);
    CreateUser(message: CreateUserRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<CreateUserRequest, User>(this._address + "/userservice.UserService/CreateUser", message, metadata || {}, UserServiceClient.CreateUser);
    }
    private static UpdateUser = new grpc_web_1.MethodDescriptor<UpdateUserRequest, User>("/userservice.UserService/UpdateUser", grpc_web_1.MethodType.UNARY, UpdateUserRequest, User, (message: UpdateUserRequest) => message.serialize(), User.deserialize);
    UpdateUser(message: UpdateUserRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<UpdateUserRequest, User>(this._address + "/userservice.UserService/UpdateUser", message, metadata || {}, UserServiceClient.UpdateUser);
    }
    private static DeleteUser = new grpc_web_1.MethodDescriptor<DeleteUserRequest, Empty>("/userservice.UserService/DeleteUser", grpc_web_1.MethodType.UNARY, DeleteUserRequest, Empty, (message: DeleteUserRequest) => message.serialize(), Empty.deserialize);
    DeleteUser(message: DeleteUserRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<DeleteUserRequest, Empty>(this._address + "/userservice.UserService/DeleteUser", message, metadata || {}, UserServiceClient.DeleteUser);
    }
    private static ValidateUser = new grpc_web_1.MethodDescriptor<ValidateUserRequest, ValidateUserResponse>("/userservice.UserService/ValidateUser", grpc_web_1.MethodType.UNARY, ValidateUserRequest, ValidateUserResponse, (message: ValidateUserRequest) => message.serialize(), ValidateUserResponse.deserialize);
    ValidateUser(message: ValidateUserRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<ValidateUserRequest, ValidateUserResponse>(this._address + "/userservice.UserService/ValidateUser", message, metadata || {}, UserServiceClient.ValidateUser);
    }
    private static GetUserByEmail = new grpc_web_1.MethodDescriptor<GetUserByEmailRequest, User>("/userservice.UserService/GetUserByEmail", grpc_web_1.MethodType.UNARY, GetUserByEmailRequest, User, (message: GetUserByEmailRequest) => message.serialize(), User.deserialize);
    GetUserByEmail(message: GetUserByEmailRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<GetUserByEmailRequest, User>(this._address + "/userservice.UserService/GetUserByEmail", message, metadata || {}, UserServiceClient.GetUserByEmail);
    }
}

// @ts-nocheck
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: paymentservice.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "grpc-web";
import * as grpc_web_1 from "grpc-web";
export class CheckUserAccessRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user_id?: string;
        usage_type?: string;
        requested_usage?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user_id" in data && data.user_id != undefined) {
                this.user_id = data.user_id;
            }
            if ("usage_type" in data && data.usage_type != undefined) {
                this.usage_type = data.usage_type;
            }
            if ("requested_usage" in data && data.requested_usage != undefined) {
                this.requested_usage = data.requested_usage;
            }
        }
    }
    get user_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set user_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get usage_type() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set usage_type(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get requested_usage() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set requested_usage(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        user_id?: string;
        usage_type?: string;
        requested_usage?: number;
    }): CheckUserAccessRequest {
        const message = new CheckUserAccessRequest({});
        if (data.user_id != null) {
            message.user_id = data.user_id;
        }
        if (data.usage_type != null) {
            message.usage_type = data.usage_type;
        }
        if (data.requested_usage != null) {
            message.requested_usage = data.requested_usage;
        }
        return message;
    }
    toObject() {
        const data: {
            user_id?: string;
            usage_type?: string;
            requested_usage?: number;
        } = {};
        if (this.user_id != null) {
            data.user_id = this.user_id;
        }
        if (this.usage_type != null) {
            data.usage_type = this.usage_type;
        }
        if (this.requested_usage != null) {
            data.requested_usage = this.requested_usage;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.user_id.length)
            writer.writeString(1, this.user_id);
        if (this.usage_type.length)
            writer.writeString(2, this.usage_type);
        if (this.requested_usage != 0)
            writer.writeInt64(3, this.requested_usage);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckUserAccessRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckUserAccessRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.user_id = reader.readString();
                    break;
                case 2:
                    message.usage_type = reader.readString();
                    break;
                case 3:
                    message.requested_usage = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CheckUserAccessRequest {
        return CheckUserAccessRequest.deserialize(bytes);
    }
}
export class CheckUserAccessResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        has_access?: boolean;
        reason?: string;
        subscription_info?: UserSubscriptionInfo;
        is_near_limit?: boolean;
        warning_message?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("has_access" in data && data.has_access != undefined) {
                this.has_access = data.has_access;
            }
            if ("reason" in data && data.reason != undefined) {
                this.reason = data.reason;
            }
            if ("subscription_info" in data && data.subscription_info != undefined) {
                this.subscription_info = data.subscription_info;
            }
            if ("is_near_limit" in data && data.is_near_limit != undefined) {
                this.is_near_limit = data.is_near_limit;
            }
            if ("warning_message" in data && data.warning_message != undefined) {
                this.warning_message = data.warning_message;
            }
        }
    }
    get has_access() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set has_access(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    get reason() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set reason(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get subscription_info() {
        return pb_1.Message.getWrapperField(this, UserSubscriptionInfo, 3) as UserSubscriptionInfo;
    }
    set subscription_info(value: UserSubscriptionInfo) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_subscription_info() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get is_near_limit() {
        return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
    }
    set is_near_limit(value: boolean) {
        pb_1.Message.setField(this, 4, value);
    }
    get warning_message() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set warning_message(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        has_access?: boolean;
        reason?: string;
        subscription_info?: ReturnType<typeof UserSubscriptionInfo.prototype.toObject>;
        is_near_limit?: boolean;
        warning_message?: string;
    }): CheckUserAccessResponse {
        const message = new CheckUserAccessResponse({});
        if (data.has_access != null) {
            message.has_access = data.has_access;
        }
        if (data.reason != null) {
            message.reason = data.reason;
        }
        if (data.subscription_info != null) {
            message.subscription_info = UserSubscriptionInfo.fromObject(data.subscription_info);
        }
        if (data.is_near_limit != null) {
            message.is_near_limit = data.is_near_limit;
        }
        if (data.warning_message != null) {
            message.warning_message = data.warning_message;
        }
        return message;
    }
    toObject() {
        const data: {
            has_access?: boolean;
            reason?: string;
            subscription_info?: ReturnType<typeof UserSubscriptionInfo.prototype.toObject>;
            is_near_limit?: boolean;
            warning_message?: string;
        } = {};
        if (this.has_access != null) {
            data.has_access = this.has_access;
        }
        if (this.reason != null) {
            data.reason = this.reason;
        }
        if (this.subscription_info != null) {
            data.subscription_info = this.subscription_info.toObject();
        }
        if (this.is_near_limit != null) {
            data.is_near_limit = this.is_near_limit;
        }
        if (this.warning_message != null) {
            data.warning_message = this.warning_message;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_access != false)
            writer.writeBool(1, this.has_access);
        if (this.reason.length)
            writer.writeString(2, this.reason);
        if (this.has_subscription_info)
            writer.writeMessage(3, this.subscription_info, () => this.subscription_info.serialize(writer));
        if (this.is_near_limit != false)
            writer.writeBool(4, this.is_near_limit);
        if (this.warning_message.length)
            writer.writeString(5, this.warning_message);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckUserAccessResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckUserAccessResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.has_access = reader.readBool();
                    break;
                case 2:
                    message.reason = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.subscription_info, () => message.subscription_info = UserSubscriptionInfo.deserialize(reader));
                    break;
                case 4:
                    message.is_near_limit = reader.readBool();
                    break;
                case 5:
                    message.warning_message = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CheckUserAccessResponse {
        return CheckUserAccessResponse.deserialize(bytes);
    }
}
export class GetUserSubscriptionRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user_id" in data && data.user_id != undefined) {
                this.user_id = data.user_id;
            }
        }
    }
    get user_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set user_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        user_id?: string;
    }): GetUserSubscriptionRequest {
        const message = new GetUserSubscriptionRequest({});
        if (data.user_id != null) {
            message.user_id = data.user_id;
        }
        return message;
    }
    toObject() {
        const data: {
            user_id?: string;
        } = {};
        if (this.user_id != null) {
            data.user_id = this.user_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.user_id.length)
            writer.writeString(1, this.user_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserSubscriptionRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserSubscriptionRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.user_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetUserSubscriptionRequest {
        return GetUserSubscriptionRequest.deserialize(bytes);
    }
}
export class GetUserSubscriptionResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        subscription_info?: UserSubscriptionInfo;
        success?: boolean;
        error_message?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("subscription_info" in data && data.subscription_info != undefined) {
                this.subscription_info = data.subscription_info;
            }
            if ("success" in data && data.success != undefined) {
                this.success = data.success;
            }
            if ("error_message" in data && data.error_message != undefined) {
                this.error_message = data.error_message;
            }
        }
    }
    get subscription_info() {
        return pb_1.Message.getWrapperField(this, UserSubscriptionInfo, 1) as UserSubscriptionInfo;
    }
    set subscription_info(value: UserSubscriptionInfo) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_subscription_info() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get success() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set success(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    get error_message() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set error_message(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        subscription_info?: ReturnType<typeof UserSubscriptionInfo.prototype.toObject>;
        success?: boolean;
        error_message?: string;
    }): GetUserSubscriptionResponse {
        const message = new GetUserSubscriptionResponse({});
        if (data.subscription_info != null) {
            message.subscription_info = UserSubscriptionInfo.fromObject(data.subscription_info);
        }
        if (data.success != null) {
            message.success = data.success;
        }
        if (data.error_message != null) {
            message.error_message = data.error_message;
        }
        return message;
    }
    toObject() {
        const data: {
            subscription_info?: ReturnType<typeof UserSubscriptionInfo.prototype.toObject>;
            success?: boolean;
            error_message?: string;
        } = {};
        if (this.subscription_info != null) {
            data.subscription_info = this.subscription_info.toObject();
        }
        if (this.success != null) {
            data.success = this.success;
        }
        if (this.error_message != null) {
            data.error_message = this.error_message;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_subscription_info)
            writer.writeMessage(1, this.subscription_info, () => this.subscription_info.serialize(writer));
        if (this.success != false)
            writer.writeBool(2, this.success);
        if (this.error_message.length)
            writer.writeString(3, this.error_message);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserSubscriptionResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserSubscriptionResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.subscription_info, () => message.subscription_info = UserSubscriptionInfo.deserialize(reader));
                    break;
                case 2:
                    message.success = reader.readBool();
                    break;
                case 3:
                    message.error_message = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetUserSubscriptionResponse {
        return GetUserSubscriptionResponse.deserialize(bytes);
    }
}
export class CreateCheckoutSessionRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user_id?: string;
        plan_id?: string;
        success_url?: string;
        cancel_url?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user_id" in data && data.user_id != undefined) {
                this.user_id = data.user_id;
            }
            if ("plan_id" in data && data.plan_id != undefined) {
                this.plan_id = data.plan_id;
            }
            if ("success_url" in data && data.success_url != undefined) {
                this.success_url = data.success_url;
            }
            if ("cancel_url" in data && data.cancel_url != undefined) {
                this.cancel_url = data.cancel_url;
            }
        }
    }
    get user_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set user_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get plan_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set plan_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get success_url() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set success_url(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get cancel_url() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set cancel_url(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        user_id?: string;
        plan_id?: string;
        success_url?: string;
        cancel_url?: string;
    }): CreateCheckoutSessionRequest {
        const message = new CreateCheckoutSessionRequest({});
        if (data.user_id != null) {
            message.user_id = data.user_id;
        }
        if (data.plan_id != null) {
            message.plan_id = data.plan_id;
        }
        if (data.success_url != null) {
            message.success_url = data.success_url;
        }
        if (data.cancel_url != null) {
            message.cancel_url = data.cancel_url;
        }
        return message;
    }
    toObject() {
        const data: {
            user_id?: string;
            plan_id?: string;
            success_url?: string;
            cancel_url?: string;
        } = {};
        if (this.user_id != null) {
            data.user_id = this.user_id;
        }
        if (this.plan_id != null) {
            data.plan_id = this.plan_id;
        }
        if (this.success_url != null) {
            data.success_url = this.success_url;
        }
        if (this.cancel_url != null) {
            data.cancel_url = this.cancel_url;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.user_id.length)
            writer.writeString(1, this.user_id);
        if (this.plan_id.length)
            writer.writeString(2, this.plan_id);
        if (this.success_url.length)
            writer.writeString(3, this.success_url);
        if (this.cancel_url.length)
            writer.writeString(4, this.cancel_url);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateCheckoutSessionRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateCheckoutSessionRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.user_id = reader.readString();
                    break;
                case 2:
                    message.plan_id = reader.readString();
                    break;
                case 3:
                    message.success_url = reader.readString();
                    break;
                case 4:
                    message.cancel_url = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateCheckoutSessionRequest {
        return CreateCheckoutSessionRequest.deserialize(bytes);
    }
}
export class CreateCheckoutSessionResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        checkout_url?: string;
        session_id?: string;
        success?: boolean;
        error_message?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("checkout_url" in data && data.checkout_url != undefined) {
                this.checkout_url = data.checkout_url;
            }
            if ("session_id" in data && data.session_id != undefined) {
                this.session_id = data.session_id;
            }
            if ("success" in data && data.success != undefined) {
                this.success = data.success;
            }
            if ("error_message" in data && data.error_message != undefined) {
                this.error_message = data.error_message;
            }
        }
    }
    get checkout_url() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set checkout_url(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get session_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set session_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get success() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set success(value: boolean) {
        pb_1.Message.setField(this, 3, value);
    }
    get error_message() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set error_message(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        checkout_url?: string;
        session_id?: string;
        success?: boolean;
        error_message?: string;
    }): CreateCheckoutSessionResponse {
        const message = new CreateCheckoutSessionResponse({});
        if (data.checkout_url != null) {
            message.checkout_url = data.checkout_url;
        }
        if (data.session_id != null) {
            message.session_id = data.session_id;
        }
        if (data.success != null) {
            message.success = data.success;
        }
        if (data.error_message != null) {
            message.error_message = data.error_message;
        }
        return message;
    }
    toObject() {
        const data: {
            checkout_url?: string;
            session_id?: string;
            success?: boolean;
            error_message?: string;
        } = {};
        if (this.checkout_url != null) {
            data.checkout_url = this.checkout_url;
        }
        if (this.session_id != null) {
            data.session_id = this.session_id;
        }
        if (this.success != null) {
            data.success = this.success;
        }
        if (this.error_message != null) {
            data.error_message = this.error_message;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.checkout_url.length)
            writer.writeString(1, this.checkout_url);
        if (this.session_id.length)
            writer.writeString(2, this.session_id);
        if (this.success != false)
            writer.writeBool(3, this.success);
        if (this.error_message.length)
            writer.writeString(4, this.error_message);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateCheckoutSessionResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateCheckoutSessionResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.checkout_url = reader.readString();
                    break;
                case 2:
                    message.session_id = reader.readString();
                    break;
                case 3:
                    message.success = reader.readBool();
                    break;
                case 4:
                    message.error_message = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateCheckoutSessionResponse {
        return CreateCheckoutSessionResponse.deserialize(bytes);
    }
}
export class UpdateUserUsageRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user_id?: string;
        usage_type?: string;
        usage_change?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user_id" in data && data.user_id != undefined) {
                this.user_id = data.user_id;
            }
            if ("usage_type" in data && data.usage_type != undefined) {
                this.usage_type = data.usage_type;
            }
            if ("usage_change" in data && data.usage_change != undefined) {
                this.usage_change = data.usage_change;
            }
        }
    }
    get user_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set user_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get usage_type() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set usage_type(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get usage_change() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set usage_change(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        user_id?: string;
        usage_type?: string;
        usage_change?: number;
    }): UpdateUserUsageRequest {
        const message = new UpdateUserUsageRequest({});
        if (data.user_id != null) {
            message.user_id = data.user_id;
        }
        if (data.usage_type != null) {
            message.usage_type = data.usage_type;
        }
        if (data.usage_change != null) {
            message.usage_change = data.usage_change;
        }
        return message;
    }
    toObject() {
        const data: {
            user_id?: string;
            usage_type?: string;
            usage_change?: number;
        } = {};
        if (this.user_id != null) {
            data.user_id = this.user_id;
        }
        if (this.usage_type != null) {
            data.usage_type = this.usage_type;
        }
        if (this.usage_change != null) {
            data.usage_change = this.usage_change;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.user_id.length)
            writer.writeString(1, this.user_id);
        if (this.usage_type.length)
            writer.writeString(2, this.usage_type);
        if (this.usage_change != 0)
            writer.writeInt64(3, this.usage_change);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateUserUsageRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateUserUsageRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.user_id = reader.readString();
                    break;
                case 2:
                    message.usage_type = reader.readString();
                    break;
                case 3:
                    message.usage_change = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdateUserUsageRequest {
        return UpdateUserUsageRequest.deserialize(bytes);
    }
}
export class UpdateUserUsageResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        success?: boolean;
        error_message?: string;
        updated_info?: UserSubscriptionInfo;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("success" in data && data.success != undefined) {
                this.success = data.success;
            }
            if ("error_message" in data && data.error_message != undefined) {
                this.error_message = data.error_message;
            }
            if ("updated_info" in data && data.updated_info != undefined) {
                this.updated_info = data.updated_info;
            }
        }
    }
    get success() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set success(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    get error_message() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set error_message(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get updated_info() {
        return pb_1.Message.getWrapperField(this, UserSubscriptionInfo, 3) as UserSubscriptionInfo;
    }
    set updated_info(value: UserSubscriptionInfo) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_updated_info() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        success?: boolean;
        error_message?: string;
        updated_info?: ReturnType<typeof UserSubscriptionInfo.prototype.toObject>;
    }): UpdateUserUsageResponse {
        const message = new UpdateUserUsageResponse({});
        if (data.success != null) {
            message.success = data.success;
        }
        if (data.error_message != null) {
            message.error_message = data.error_message;
        }
        if (data.updated_info != null) {
            message.updated_info = UserSubscriptionInfo.fromObject(data.updated_info);
        }
        return message;
    }
    toObject() {
        const data: {
            success?: boolean;
            error_message?: string;
            updated_info?: ReturnType<typeof UserSubscriptionInfo.prototype.toObject>;
        } = {};
        if (this.success != null) {
            data.success = this.success;
        }
        if (this.error_message != null) {
            data.error_message = this.error_message;
        }
        if (this.updated_info != null) {
            data.updated_info = this.updated_info.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.success != false)
            writer.writeBool(1, this.success);
        if (this.error_message.length)
            writer.writeString(2, this.error_message);
        if (this.has_updated_info)
            writer.writeMessage(3, this.updated_info, () => this.updated_info.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateUserUsageResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateUserUsageResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.success = reader.readBool();
                    break;
                case 2:
                    message.error_message = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.updated_info, () => message.updated_info = UserSubscriptionInfo.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdateUserUsageResponse {
        return UpdateUserUsageResponse.deserialize(bytes);
    }
}
export class InitializeUserRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user_id" in data && data.user_id != undefined) {
                this.user_id = data.user_id;
            }
        }
    }
    get user_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set user_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        user_id?: string;
    }): InitializeUserRequest {
        const message = new InitializeUserRequest({});
        if (data.user_id != null) {
            message.user_id = data.user_id;
        }
        return message;
    }
    toObject() {
        const data: {
            user_id?: string;
        } = {};
        if (this.user_id != null) {
            data.user_id = this.user_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.user_id.length)
            writer.writeString(1, this.user_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InitializeUserRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InitializeUserRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.user_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): InitializeUserRequest {
        return InitializeUserRequest.deserialize(bytes);
    }
}
export class InitializeUserResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        success?: boolean;
        error_message?: string;
        subscription_info?: UserSubscriptionInfo;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("success" in data && data.success != undefined) {
                this.success = data.success;
            }
            if ("error_message" in data && data.error_message != undefined) {
                this.error_message = data.error_message;
            }
            if ("subscription_info" in data && data.subscription_info != undefined) {
                this.subscription_info = data.subscription_info;
            }
        }
    }
    get success() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set success(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    get error_message() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set error_message(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get subscription_info() {
        return pb_1.Message.getWrapperField(this, UserSubscriptionInfo, 3) as UserSubscriptionInfo;
    }
    set subscription_info(value: UserSubscriptionInfo) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_subscription_info() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        success?: boolean;
        error_message?: string;
        subscription_info?: ReturnType<typeof UserSubscriptionInfo.prototype.toObject>;
    }): InitializeUserResponse {
        const message = new InitializeUserResponse({});
        if (data.success != null) {
            message.success = data.success;
        }
        if (data.error_message != null) {
            message.error_message = data.error_message;
        }
        if (data.subscription_info != null) {
            message.subscription_info = UserSubscriptionInfo.fromObject(data.subscription_info);
        }
        return message;
    }
    toObject() {
        const data: {
            success?: boolean;
            error_message?: string;
            subscription_info?: ReturnType<typeof UserSubscriptionInfo.prototype.toObject>;
        } = {};
        if (this.success != null) {
            data.success = this.success;
        }
        if (this.error_message != null) {
            data.error_message = this.error_message;
        }
        if (this.subscription_info != null) {
            data.subscription_info = this.subscription_info.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.success != false)
            writer.writeBool(1, this.success);
        if (this.error_message.length)
            writer.writeString(2, this.error_message);
        if (this.has_subscription_info)
            writer.writeMessage(3, this.subscription_info, () => this.subscription_info.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InitializeUserResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InitializeUserResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.success = reader.readBool();
                    break;
                case 2:
                    message.error_message = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.subscription_info, () => message.subscription_info = UserSubscriptionInfo.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): InitializeUserResponse {
        return InitializeUserResponse.deserialize(bytes);
    }
}
export class UserSubscriptionInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user_id?: string;
        subscription?: Subscription;
        usage?: UserUsage;
        plan?: Plan;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user_id" in data && data.user_id != undefined) {
                this.user_id = data.user_id;
            }
            if ("subscription" in data && data.subscription != undefined) {
                this.subscription = data.subscription;
            }
            if ("usage" in data && data.usage != undefined) {
                this.usage = data.usage;
            }
            if ("plan" in data && data.plan != undefined) {
                this.plan = data.plan;
            }
        }
    }
    get user_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set user_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get subscription() {
        return pb_1.Message.getWrapperField(this, Subscription, 2) as Subscription;
    }
    set subscription(value: Subscription) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_subscription() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get usage() {
        return pb_1.Message.getWrapperField(this, UserUsage, 3) as UserUsage;
    }
    set usage(value: UserUsage) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_usage() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get plan() {
        return pb_1.Message.getWrapperField(this, Plan, 4) as Plan;
    }
    set plan(value: Plan) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_plan() {
        return pb_1.Message.getField(this, 4) != null;
    }
    static fromObject(data: {
        user_id?: string;
        subscription?: ReturnType<typeof Subscription.prototype.toObject>;
        usage?: ReturnType<typeof UserUsage.prototype.toObject>;
        plan?: ReturnType<typeof Plan.prototype.toObject>;
    }): UserSubscriptionInfo {
        const message = new UserSubscriptionInfo({});
        if (data.user_id != null) {
            message.user_id = data.user_id;
        }
        if (data.subscription != null) {
            message.subscription = Subscription.fromObject(data.subscription);
        }
        if (data.usage != null) {
            message.usage = UserUsage.fromObject(data.usage);
        }
        if (data.plan != null) {
            message.plan = Plan.fromObject(data.plan);
        }
        return message;
    }
    toObject() {
        const data: {
            user_id?: string;
            subscription?: ReturnType<typeof Subscription.prototype.toObject>;
            usage?: ReturnType<typeof UserUsage.prototype.toObject>;
            plan?: ReturnType<typeof Plan.prototype.toObject>;
        } = {};
        if (this.user_id != null) {
            data.user_id = this.user_id;
        }
        if (this.subscription != null) {
            data.subscription = this.subscription.toObject();
        }
        if (this.usage != null) {
            data.usage = this.usage.toObject();
        }
        if (this.plan != null) {
            data.plan = this.plan.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.user_id.length)
            writer.writeString(1, this.user_id);
        if (this.has_subscription)
            writer.writeMessage(2, this.subscription, () => this.subscription.serialize(writer));
        if (this.has_usage)
            writer.writeMessage(3, this.usage, () => this.usage.serialize(writer));
        if (this.has_plan)
            writer.writeMessage(4, this.plan, () => this.plan.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserSubscriptionInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserSubscriptionInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.user_id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.subscription, () => message.subscription = Subscription.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.usage, () => message.usage = UserUsage.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.plan, () => message.plan = Plan.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UserSubscriptionInfo {
        return UserSubscriptionInfo.deserialize(bytes);
    }
}
export class UserUsage extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user_id?: string;
        storage_used_bytes?: number;
        users_count?: number;
        storage_usage_percent?: number;
        users_usage_percent?: number;
        last_calculated_at?: dependency_1.Timestamp;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user_id" in data && data.user_id != undefined) {
                this.user_id = data.user_id;
            }
            if ("storage_used_bytes" in data && data.storage_used_bytes != undefined) {
                this.storage_used_bytes = data.storage_used_bytes;
            }
            if ("users_count" in data && data.users_count != undefined) {
                this.users_count = data.users_count;
            }
            if ("storage_usage_percent" in data && data.storage_usage_percent != undefined) {
                this.storage_usage_percent = data.storage_usage_percent;
            }
            if ("users_usage_percent" in data && data.users_usage_percent != undefined) {
                this.users_usage_percent = data.users_usage_percent;
            }
            if ("last_calculated_at" in data && data.last_calculated_at != undefined) {
                this.last_calculated_at = data.last_calculated_at;
            }
        }
    }
    get user_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set user_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get storage_used_bytes() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set storage_used_bytes(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get users_count() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set users_count(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get storage_usage_percent() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set storage_usage_percent(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get users_usage_percent() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set users_usage_percent(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get last_calculated_at() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 6) as dependency_1.Timestamp;
    }
    set last_calculated_at(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get has_last_calculated_at() {
        return pb_1.Message.getField(this, 6) != null;
    }
    static fromObject(data: {
        user_id?: string;
        storage_used_bytes?: number;
        users_count?: number;
        storage_usage_percent?: number;
        users_usage_percent?: number;
        last_calculated_at?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
    }): UserUsage {
        const message = new UserUsage({});
        if (data.user_id != null) {
            message.user_id = data.user_id;
        }
        if (data.storage_used_bytes != null) {
            message.storage_used_bytes = data.storage_used_bytes;
        }
        if (data.users_count != null) {
            message.users_count = data.users_count;
        }
        if (data.storage_usage_percent != null) {
            message.storage_usage_percent = data.storage_usage_percent;
        }
        if (data.users_usage_percent != null) {
            message.users_usage_percent = data.users_usage_percent;
        }
        if (data.last_calculated_at != null) {
            message.last_calculated_at = dependency_1.Timestamp.fromObject(data.last_calculated_at);
        }
        return message;
    }
    toObject() {
        const data: {
            user_id?: string;
            storage_used_bytes?: number;
            users_count?: number;
            storage_usage_percent?: number;
            users_usage_percent?: number;
            last_calculated_at?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        } = {};
        if (this.user_id != null) {
            data.user_id = this.user_id;
        }
        if (this.storage_used_bytes != null) {
            data.storage_used_bytes = this.storage_used_bytes;
        }
        if (this.users_count != null) {
            data.users_count = this.users_count;
        }
        if (this.storage_usage_percent != null) {
            data.storage_usage_percent = this.storage_usage_percent;
        }
        if (this.users_usage_percent != null) {
            data.users_usage_percent = this.users_usage_percent;
        }
        if (this.last_calculated_at != null) {
            data.last_calculated_at = this.last_calculated_at.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.user_id.length)
            writer.writeString(1, this.user_id);
        if (this.storage_used_bytes != 0)
            writer.writeInt64(2, this.storage_used_bytes);
        if (this.users_count != 0)
            writer.writeInt32(3, this.users_count);
        if (this.storage_usage_percent != 0)
            writer.writeDouble(4, this.storage_usage_percent);
        if (this.users_usage_percent != 0)
            writer.writeDouble(5, this.users_usage_percent);
        if (this.has_last_calculated_at)
            writer.writeMessage(6, this.last_calculated_at, () => this.last_calculated_at.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserUsage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserUsage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.user_id = reader.readString();
                    break;
                case 2:
                    message.storage_used_bytes = reader.readInt64();
                    break;
                case 3:
                    message.users_count = reader.readInt32();
                    break;
                case 4:
                    message.storage_usage_percent = reader.readDouble();
                    break;
                case 5:
                    message.users_usage_percent = reader.readDouble();
                    break;
                case 6:
                    reader.readMessage(message.last_calculated_at, () => message.last_calculated_at = dependency_1.Timestamp.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UserUsage {
        return UserUsage.deserialize(bytes);
    }
}
export class Subscription extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        user_id?: string;
        plan_id?: string;
        provider?: string;
        provider_customer_id?: string;
        provider_subscription_id?: string;
        status?: string;
        current_period_start?: dependency_1.Timestamp;
        current_period_end?: dependency_1.Timestamp;
        created_at?: dependency_1.Timestamp;
        updated_at?: dependency_1.Timestamp;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("user_id" in data && data.user_id != undefined) {
                this.user_id = data.user_id;
            }
            if ("plan_id" in data && data.plan_id != undefined) {
                this.plan_id = data.plan_id;
            }
            if ("provider" in data && data.provider != undefined) {
                this.provider = data.provider;
            }
            if ("provider_customer_id" in data && data.provider_customer_id != undefined) {
                this.provider_customer_id = data.provider_customer_id;
            }
            if ("provider_subscription_id" in data && data.provider_subscription_id != undefined) {
                this.provider_subscription_id = data.provider_subscription_id;
            }
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
            if ("current_period_start" in data && data.current_period_start != undefined) {
                this.current_period_start = data.current_period_start;
            }
            if ("current_period_end" in data && data.current_period_end != undefined) {
                this.current_period_end = data.current_period_end;
            }
            if ("created_at" in data && data.created_at != undefined) {
                this.created_at = data.created_at;
            }
            if ("updated_at" in data && data.updated_at != undefined) {
                this.updated_at = data.updated_at;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get user_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set user_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get plan_id() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set plan_id(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get provider() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set provider(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get provider_customer_id() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set provider_customer_id(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get provider_subscription_id() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set provider_subscription_id(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get status() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set status(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get current_period_start() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 8) as dependency_1.Timestamp;
    }
    set current_period_start(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 8, value);
    }
    get has_current_period_start() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get current_period_end() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 9) as dependency_1.Timestamp;
    }
    set current_period_end(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 9, value);
    }
    get has_current_period_end() {
        return pb_1.Message.getField(this, 9) != null;
    }
    get created_at() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 10) as dependency_1.Timestamp;
    }
    set created_at(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 10, value);
    }
    get has_created_at() {
        return pb_1.Message.getField(this, 10) != null;
    }
    get updated_at() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 11) as dependency_1.Timestamp;
    }
    set updated_at(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 11, value);
    }
    get has_updated_at() {
        return pb_1.Message.getField(this, 11) != null;
    }
    static fromObject(data: {
        id?: string;
        user_id?: string;
        plan_id?: string;
        provider?: string;
        provider_customer_id?: string;
        provider_subscription_id?: string;
        status?: string;
        current_period_start?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        current_period_end?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        created_at?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        updated_at?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
    }): Subscription {
        const message = new Subscription({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.user_id != null) {
            message.user_id = data.user_id;
        }
        if (data.plan_id != null) {
            message.plan_id = data.plan_id;
        }
        if (data.provider != null) {
            message.provider = data.provider;
        }
        if (data.provider_customer_id != null) {
            message.provider_customer_id = data.provider_customer_id;
        }
        if (data.provider_subscription_id != null) {
            message.provider_subscription_id = data.provider_subscription_id;
        }
        if (data.status != null) {
            message.status = data.status;
        }
        if (data.current_period_start != null) {
            message.current_period_start = dependency_1.Timestamp.fromObject(data.current_period_start);
        }
        if (data.current_period_end != null) {
            message.current_period_end = dependency_1.Timestamp.fromObject(data.current_period_end);
        }
        if (data.created_at != null) {
            message.created_at = dependency_1.Timestamp.fromObject(data.created_at);
        }
        if (data.updated_at != null) {
            message.updated_at = dependency_1.Timestamp.fromObject(data.updated_at);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            user_id?: string;
            plan_id?: string;
            provider?: string;
            provider_customer_id?: string;
            provider_subscription_id?: string;
            status?: string;
            current_period_start?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            current_period_end?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            created_at?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            updated_at?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.user_id != null) {
            data.user_id = this.user_id;
        }
        if (this.plan_id != null) {
            data.plan_id = this.plan_id;
        }
        if (this.provider != null) {
            data.provider = this.provider;
        }
        if (this.provider_customer_id != null) {
            data.provider_customer_id = this.provider_customer_id;
        }
        if (this.provider_subscription_id != null) {
            data.provider_subscription_id = this.provider_subscription_id;
        }
        if (this.status != null) {
            data.status = this.status;
        }
        if (this.current_period_start != null) {
            data.current_period_start = this.current_period_start.toObject();
        }
        if (this.current_period_end != null) {
            data.current_period_end = this.current_period_end.toObject();
        }
        if (this.created_at != null) {
            data.created_at = this.created_at.toObject();
        }
        if (this.updated_at != null) {
            data.updated_at = this.updated_at.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.user_id.length)
            writer.writeString(2, this.user_id);
        if (this.plan_id.length)
            writer.writeString(3, this.plan_id);
        if (this.provider.length)
            writer.writeString(4, this.provider);
        if (this.provider_customer_id.length)
            writer.writeString(5, this.provider_customer_id);
        if (this.provider_subscription_id.length)
            writer.writeString(6, this.provider_subscription_id);
        if (this.status.length)
            writer.writeString(7, this.status);
        if (this.has_current_period_start)
            writer.writeMessage(8, this.current_period_start, () => this.current_period_start.serialize(writer));
        if (this.has_current_period_end)
            writer.writeMessage(9, this.current_period_end, () => this.current_period_end.serialize(writer));
        if (this.has_created_at)
            writer.writeMessage(10, this.created_at, () => this.created_at.serialize(writer));
        if (this.has_updated_at)
            writer.writeMessage(11, this.updated_at, () => this.updated_at.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Subscription {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Subscription();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.user_id = reader.readString();
                    break;
                case 3:
                    message.plan_id = reader.readString();
                    break;
                case 4:
                    message.provider = reader.readString();
                    break;
                case 5:
                    message.provider_customer_id = reader.readString();
                    break;
                case 6:
                    message.provider_subscription_id = reader.readString();
                    break;
                case 7:
                    message.status = reader.readString();
                    break;
                case 8:
                    reader.readMessage(message.current_period_start, () => message.current_period_start = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 9:
                    reader.readMessage(message.current_period_end, () => message.current_period_end = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 10:
                    reader.readMessage(message.created_at, () => message.created_at = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 11:
                    reader.readMessage(message.updated_at, () => message.updated_at = dependency_1.Timestamp.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Subscription {
        return Subscription.deserialize(bytes);
    }
}
export class Plan extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        name?: string;
        storage_limit_bytes?: number;
        users_limit?: number;
        price_cents?: number;
        is_active?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("storage_limit_bytes" in data && data.storage_limit_bytes != undefined) {
                this.storage_limit_bytes = data.storage_limit_bytes;
            }
            if ("users_limit" in data && data.users_limit != undefined) {
                this.users_limit = data.users_limit;
            }
            if ("price_cents" in data && data.price_cents != undefined) {
                this.price_cents = data.price_cents;
            }
            if ("is_active" in data && data.is_active != undefined) {
                this.is_active = data.is_active;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get storage_limit_bytes() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set storage_limit_bytes(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get users_limit() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set users_limit(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get price_cents() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set price_cents(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get is_active() {
        return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
    }
    set is_active(value: boolean) {
        pb_1.Message.setField(this, 6, value);
    }
    static fromObject(data: {
        id?: string;
        name?: string;
        storage_limit_bytes?: number;
        users_limit?: number;
        price_cents?: number;
        is_active?: boolean;
    }): Plan {
        const message = new Plan({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.storage_limit_bytes != null) {
            message.storage_limit_bytes = data.storage_limit_bytes;
        }
        if (data.users_limit != null) {
            message.users_limit = data.users_limit;
        }
        if (data.price_cents != null) {
            message.price_cents = data.price_cents;
        }
        if (data.is_active != null) {
            message.is_active = data.is_active;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            name?: string;
            storage_limit_bytes?: number;
            users_limit?: number;
            price_cents?: number;
            is_active?: boolean;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.storage_limit_bytes != null) {
            data.storage_limit_bytes = this.storage_limit_bytes;
        }
        if (this.users_limit != null) {
            data.users_limit = this.users_limit;
        }
        if (this.price_cents != null) {
            data.price_cents = this.price_cents;
        }
        if (this.is_active != null) {
            data.is_active = this.is_active;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.storage_limit_bytes != 0)
            writer.writeInt64(3, this.storage_limit_bytes);
        if (this.users_limit != 0)
            writer.writeInt32(4, this.users_limit);
        if (this.price_cents != 0)
            writer.writeInt64(5, this.price_cents);
        if (this.is_active != false)
            writer.writeBool(6, this.is_active);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Plan {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Plan();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.storage_limit_bytes = reader.readInt64();
                    break;
                case 4:
                    message.users_limit = reader.readInt32();
                    break;
                case 5:
                    message.price_cents = reader.readInt64();
                    break;
                case 6:
                    message.is_active = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Plan {
        return Plan.deserialize(bytes);
    }
}
export abstract class UnimplementedPaymentServiceService {
    static definition = {
        CheckUserAccess: {
            path: "/paymentservice.PaymentService/CheckUserAccess",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: CheckUserAccessRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => CheckUserAccessRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: CheckUserAccessResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => CheckUserAccessResponse.deserialize(new Uint8Array(bytes))
        },
        GetUserSubscription: {
            path: "/paymentservice.PaymentService/GetUserSubscription",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: GetUserSubscriptionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => GetUserSubscriptionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: GetUserSubscriptionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => GetUserSubscriptionResponse.deserialize(new Uint8Array(bytes))
        },
        CreateCheckoutSession: {
            path: "/paymentservice.PaymentService/CreateCheckoutSession",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: CreateCheckoutSessionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => CreateCheckoutSessionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: CreateCheckoutSessionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => CreateCheckoutSessionResponse.deserialize(new Uint8Array(bytes))
        },
        UpdateUserUsage: {
            path: "/paymentservice.PaymentService/UpdateUserUsage",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: UpdateUserUsageRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => UpdateUserUsageRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: UpdateUserUsageResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => UpdateUserUsageResponse.deserialize(new Uint8Array(bytes))
        },
        InitializeUser: {
            path: "/paymentservice.PaymentService/InitializeUser",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: InitializeUserRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => InitializeUserRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: InitializeUserResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => InitializeUserResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract CheckUserAccess(call: grpc_1.ServerUnaryCall<CheckUserAccessRequest, CheckUserAccessResponse>, callback: grpc_1.sendUnaryData<CheckUserAccessResponse>): void;
    abstract GetUserSubscription(call: grpc_1.ServerUnaryCall<GetUserSubscriptionRequest, GetUserSubscriptionResponse>, callback: grpc_1.sendUnaryData<GetUserSubscriptionResponse>): void;
    abstract CreateCheckoutSession(call: grpc_1.ServerUnaryCall<CreateCheckoutSessionRequest, CreateCheckoutSessionResponse>, callback: grpc_1.sendUnaryData<CreateCheckoutSessionResponse>): void;
    abstract UpdateUserUsage(call: grpc_1.ServerUnaryCall<UpdateUserUsageRequest, UpdateUserUsageResponse>, callback: grpc_1.sendUnaryData<UpdateUserUsageResponse>): void;
    abstract InitializeUser(call: grpc_1.ServerUnaryCall<InitializeUserRequest, InitializeUserResponse>, callback: grpc_1.sendUnaryData<InitializeUserResponse>): void;
}
export class PaymentServiceClient {
    private _address: string;
    private _client: grpc_web_1.GrpcWebClientBase;
    constructor(address: string, credentials?: Object, options?: grpc_web_1.GrpcWebClientBaseOptions) {
        if (!options)
            options = {};
        options.format = options.format || "text";
        this._address = address;
        this._client = new grpc_web_1.GrpcWebClientBase(options);
    }
    private static CheckUserAccess = new grpc_web_1.MethodDescriptor<CheckUserAccessRequest, CheckUserAccessResponse>("/paymentservice.PaymentService/CheckUserAccess", grpc_web_1.MethodType.UNARY, CheckUserAccessRequest, CheckUserAccessResponse, (message: CheckUserAccessRequest) => message.serialize(), CheckUserAccessResponse.deserialize);
    CheckUserAccess(message: CheckUserAccessRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<CheckUserAccessRequest, CheckUserAccessResponse>(this._address + "/paymentservice.PaymentService/CheckUserAccess", message, metadata || {}, PaymentServiceClient.CheckUserAccess);
    }
    private static GetUserSubscription = new grpc_web_1.MethodDescriptor<GetUserSubscriptionRequest, GetUserSubscriptionResponse>("/paymentservice.PaymentService/GetUserSubscription", grpc_web_1.MethodType.UNARY, GetUserSubscriptionRequest, GetUserSubscriptionResponse, (message: GetUserSubscriptionRequest) => message.serialize(), GetUserSubscriptionResponse.deserialize);
    GetUserSubscription(message: GetUserSubscriptionRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<GetUserSubscriptionRequest, GetUserSubscriptionResponse>(this._address + "/paymentservice.PaymentService/GetUserSubscription", message, metadata || {}, PaymentServiceClient.GetUserSubscription);
    }
    private static CreateCheckoutSession = new grpc_web_1.MethodDescriptor<CreateCheckoutSessionRequest, CreateCheckoutSessionResponse>("/paymentservice.PaymentService/CreateCheckoutSession", grpc_web_1.MethodType.UNARY, CreateCheckoutSessionRequest, CreateCheckoutSessionResponse, (message: CreateCheckoutSessionRequest) => message.serialize(), CreateCheckoutSessionResponse.deserialize);
    CreateCheckoutSession(message: CreateCheckoutSessionRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<CreateCheckoutSessionRequest, CreateCheckoutSessionResponse>(this._address + "/paymentservice.PaymentService/CreateCheckoutSession", message, metadata || {}, PaymentServiceClient.CreateCheckoutSession);
    }
    private static UpdateUserUsage = new grpc_web_1.MethodDescriptor<UpdateUserUsageRequest, UpdateUserUsageResponse>("/paymentservice.PaymentService/UpdateUserUsage", grpc_web_1.MethodType.UNARY, UpdateUserUsageRequest, UpdateUserUsageResponse, (message: UpdateUserUsageRequest) => message.serialize(), UpdateUserUsageResponse.deserialize);
    UpdateUserUsage(message: UpdateUserUsageRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<UpdateUserUsageRequest, UpdateUserUsageResponse>(this._address + "/paymentservice.PaymentService/UpdateUserUsage", message, metadata || {}, PaymentServiceClient.UpdateUserUsage);
    }
    private static InitializeUser = new grpc_web_1.MethodDescriptor<InitializeUserRequest, InitializeUserResponse>("/paymentservice.PaymentService/InitializeUser", grpc_web_1.MethodType.UNARY, InitializeUserRequest, InitializeUserResponse, (message: InitializeUserRequest) => message.serialize(), InitializeUserResponse.deserialize);
    InitializeUser(message: InitializeUserRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<InitializeUserRequest, InitializeUserResponse>(this._address + "/paymentservice.PaymentService/InitializeUser", message, metadata || {}, PaymentServiceClient.InitializeUser);
    }
}

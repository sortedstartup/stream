// @ts-nocheck
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: paymentservice.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "grpc-web";
import * as grpc_web_1 from "grpc-web";
export class CreateUserSubscriptionRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user_id?: string;
        plan_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user_id" in data && data.user_id != undefined) {
                this.user_id = data.user_id;
            }
            if ("plan_id" in data && data.plan_id != undefined) {
                this.plan_id = data.plan_id;
            }
        }
    }
    get user_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set user_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get plan_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set plan_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        user_id?: string;
        plan_id?: string;
    }): CreateUserSubscriptionRequest {
        const message = new CreateUserSubscriptionRequest({});
        if (data.user_id != null) {
            message.user_id = data.user_id;
        }
        if (data.plan_id != null) {
            message.plan_id = data.plan_id;
        }
        return message;
    }
    toObject() {
        const data: {
            user_id?: string;
            plan_id?: string;
        } = {};
        if (this.user_id != null) {
            data.user_id = this.user_id;
        }
        if (this.plan_id != null) {
            data.plan_id = this.plan_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.user_id.length)
            writer.writeString(1, this.user_id);
        if (this.plan_id.length)
            writer.writeString(2, this.plan_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateUserSubscriptionRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateUserSubscriptionRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.user_id = reader.readString();
                    break;
                case 2:
                    message.plan_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateUserSubscriptionRequest {
        return CreateUserSubscriptionRequest.deserialize(bytes);
    }
}
export class CreateUserSubscriptionResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        success?: boolean;
        error_message?: string;
        subscription_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("success" in data && data.success != undefined) {
                this.success = data.success;
            }
            if ("error_message" in data && data.error_message != undefined) {
                this.error_message = data.error_message;
            }
            if ("subscription_id" in data && data.subscription_id != undefined) {
                this.subscription_id = data.subscription_id;
            }
        }
    }
    get success() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set success(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    get error_message() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set error_message(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get subscription_id() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set subscription_id(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        success?: boolean;
        error_message?: string;
        subscription_id?: string;
    }): CreateUserSubscriptionResponse {
        const message = new CreateUserSubscriptionResponse({});
        if (data.success != null) {
            message.success = data.success;
        }
        if (data.error_message != null) {
            message.error_message = data.error_message;
        }
        if (data.subscription_id != null) {
            message.subscription_id = data.subscription_id;
        }
        return message;
    }
    toObject() {
        const data: {
            success?: boolean;
            error_message?: string;
            subscription_id?: string;
        } = {};
        if (this.success != null) {
            data.success = this.success;
        }
        if (this.error_message != null) {
            data.error_message = this.error_message;
        }
        if (this.subscription_id != null) {
            data.subscription_id = this.subscription_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.success != false)
            writer.writeBool(1, this.success);
        if (this.error_message.length)
            writer.writeString(2, this.error_message);
        if (this.subscription_id.length)
            writer.writeString(3, this.subscription_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateUserSubscriptionResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateUserSubscriptionResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.success = reader.readBool();
                    break;
                case 2:
                    message.error_message = reader.readString();
                    break;
                case 3:
                    message.subscription_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateUserSubscriptionResponse {
        return CreateUserSubscriptionResponse.deserialize(bytes);
    }
}
export class GetUserSubscriptionRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user_id" in data && data.user_id != undefined) {
                this.user_id = data.user_id;
            }
        }
    }
    get user_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set user_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        user_id?: string;
    }): GetUserSubscriptionRequest {
        const message = new GetUserSubscriptionRequest({});
        if (data.user_id != null) {
            message.user_id = data.user_id;
        }
        return message;
    }
    toObject() {
        const data: {
            user_id?: string;
        } = {};
        if (this.user_id != null) {
            data.user_id = this.user_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.user_id.length)
            writer.writeString(1, this.user_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserSubscriptionRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserSubscriptionRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.user_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetUserSubscriptionRequest {
        return GetUserSubscriptionRequest.deserialize(bytes);
    }
}
export class GetUserSubscriptionResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        subscription_info?: UserSubscriptionInfo;
        success?: boolean;
        error_message?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("subscription_info" in data && data.subscription_info != undefined) {
                this.subscription_info = data.subscription_info;
            }
            if ("success" in data && data.success != undefined) {
                this.success = data.success;
            }
            if ("error_message" in data && data.error_message != undefined) {
                this.error_message = data.error_message;
            }
        }
    }
    get subscription_info() {
        return pb_1.Message.getWrapperField(this, UserSubscriptionInfo, 1) as UserSubscriptionInfo;
    }
    set subscription_info(value: UserSubscriptionInfo) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_subscription_info() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get success() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set success(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    get error_message() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set error_message(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        subscription_info?: ReturnType<typeof UserSubscriptionInfo.prototype.toObject>;
        success?: boolean;
        error_message?: string;
    }): GetUserSubscriptionResponse {
        const message = new GetUserSubscriptionResponse({});
        if (data.subscription_info != null) {
            message.subscription_info = UserSubscriptionInfo.fromObject(data.subscription_info);
        }
        if (data.success != null) {
            message.success = data.success;
        }
        if (data.error_message != null) {
            message.error_message = data.error_message;
        }
        return message;
    }
    toObject() {
        const data: {
            subscription_info?: ReturnType<typeof UserSubscriptionInfo.prototype.toObject>;
            success?: boolean;
            error_message?: string;
        } = {};
        if (this.subscription_info != null) {
            data.subscription_info = this.subscription_info.toObject();
        }
        if (this.success != null) {
            data.success = this.success;
        }
        if (this.error_message != null) {
            data.error_message = this.error_message;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_subscription_info)
            writer.writeMessage(1, this.subscription_info, () => this.subscription_info.serialize(writer));
        if (this.success != false)
            writer.writeBool(2, this.success);
        if (this.error_message.length)
            writer.writeString(3, this.error_message);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserSubscriptionResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserSubscriptionResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.subscription_info, () => message.subscription_info = UserSubscriptionInfo.deserialize(reader));
                    break;
                case 2:
                    message.success = reader.readBool();
                    break;
                case 3:
                    message.error_message = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetUserSubscriptionResponse {
        return GetUserSubscriptionResponse.deserialize(bytes);
    }
}
export class GetPlansRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): GetPlansRequest {
        const message = new GetPlansRequest({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPlansRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetPlansRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetPlansRequest {
        return GetPlansRequest.deserialize(bytes);
    }
}
export class GetPlansResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        plans?: Plan[];
        success?: boolean;
        error_message?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("plans" in data && data.plans != undefined) {
                this.plans = data.plans;
            }
            if ("success" in data && data.success != undefined) {
                this.success = data.success;
            }
            if ("error_message" in data && data.error_message != undefined) {
                this.error_message = data.error_message;
            }
        }
    }
    get plans() {
        return pb_1.Message.getRepeatedWrapperField(this, Plan, 1) as Plan[];
    }
    set plans(value: Plan[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get success() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set success(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    get error_message() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set error_message(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        plans?: ReturnType<typeof Plan.prototype.toObject>[];
        success?: boolean;
        error_message?: string;
    }): GetPlansResponse {
        const message = new GetPlansResponse({});
        if (data.plans != null) {
            message.plans = data.plans.map(item => Plan.fromObject(item));
        }
        if (data.success != null) {
            message.success = data.success;
        }
        if (data.error_message != null) {
            message.error_message = data.error_message;
        }
        return message;
    }
    toObject() {
        const data: {
            plans?: ReturnType<typeof Plan.prototype.toObject>[];
            success?: boolean;
            error_message?: string;
        } = {};
        if (this.plans != null) {
            data.plans = this.plans.map((item: Plan) => item.toObject());
        }
        if (this.success != null) {
            data.success = this.success;
        }
        if (this.error_message != null) {
            data.error_message = this.error_message;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.plans.length)
            writer.writeRepeatedMessage(1, this.plans, (item: Plan) => item.serialize(writer));
        if (this.success != false)
            writer.writeBool(2, this.success);
        if (this.error_message.length)
            writer.writeString(3, this.error_message);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPlansResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetPlansResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.plans, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Plan.deserialize(reader), Plan));
                    break;
                case 2:
                    message.success = reader.readBool();
                    break;
                case 3:
                    message.error_message = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetPlansResponse {
        return GetPlansResponse.deserialize(bytes);
    }
}
export class CreateCheckoutSessionRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user_id?: string;
        plan_id?: string;
        success_url?: string;
        cancel_url?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user_id" in data && data.user_id != undefined) {
                this.user_id = data.user_id;
            }
            if ("plan_id" in data && data.plan_id != undefined) {
                this.plan_id = data.plan_id;
            }
            if ("success_url" in data && data.success_url != undefined) {
                this.success_url = data.success_url;
            }
            if ("cancel_url" in data && data.cancel_url != undefined) {
                this.cancel_url = data.cancel_url;
            }
        }
    }
    get user_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set user_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get plan_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set plan_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get success_url() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set success_url(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get cancel_url() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set cancel_url(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        user_id?: string;
        plan_id?: string;
        success_url?: string;
        cancel_url?: string;
    }): CreateCheckoutSessionRequest {
        const message = new CreateCheckoutSessionRequest({});
        if (data.user_id != null) {
            message.user_id = data.user_id;
        }
        if (data.plan_id != null) {
            message.plan_id = data.plan_id;
        }
        if (data.success_url != null) {
            message.success_url = data.success_url;
        }
        if (data.cancel_url != null) {
            message.cancel_url = data.cancel_url;
        }
        return message;
    }
    toObject() {
        const data: {
            user_id?: string;
            plan_id?: string;
            success_url?: string;
            cancel_url?: string;
        } = {};
        if (this.user_id != null) {
            data.user_id = this.user_id;
        }
        if (this.plan_id != null) {
            data.plan_id = this.plan_id;
        }
        if (this.success_url != null) {
            data.success_url = this.success_url;
        }
        if (this.cancel_url != null) {
            data.cancel_url = this.cancel_url;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.user_id.length)
            writer.writeString(1, this.user_id);
        if (this.plan_id.length)
            writer.writeString(2, this.plan_id);
        if (this.success_url.length)
            writer.writeString(3, this.success_url);
        if (this.cancel_url.length)
            writer.writeString(4, this.cancel_url);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateCheckoutSessionRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateCheckoutSessionRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.user_id = reader.readString();
                    break;
                case 2:
                    message.plan_id = reader.readString();
                    break;
                case 3:
                    message.success_url = reader.readString();
                    break;
                case 4:
                    message.cancel_url = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateCheckoutSessionRequest {
        return CreateCheckoutSessionRequest.deserialize(bytes);
    }
}
export class CreateCheckoutSessionResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        checkout_url?: string;
        session_id?: string;
        success?: boolean;
        error_message?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("checkout_url" in data && data.checkout_url != undefined) {
                this.checkout_url = data.checkout_url;
            }
            if ("session_id" in data && data.session_id != undefined) {
                this.session_id = data.session_id;
            }
            if ("success" in data && data.success != undefined) {
                this.success = data.success;
            }
            if ("error_message" in data && data.error_message != undefined) {
                this.error_message = data.error_message;
            }
        }
    }
    get checkout_url() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set checkout_url(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get session_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set session_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get success() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set success(value: boolean) {
        pb_1.Message.setField(this, 3, value);
    }
    get error_message() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set error_message(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        checkout_url?: string;
        session_id?: string;
        success?: boolean;
        error_message?: string;
    }): CreateCheckoutSessionResponse {
        const message = new CreateCheckoutSessionResponse({});
        if (data.checkout_url != null) {
            message.checkout_url = data.checkout_url;
        }
        if (data.session_id != null) {
            message.session_id = data.session_id;
        }
        if (data.success != null) {
            message.success = data.success;
        }
        if (data.error_message != null) {
            message.error_message = data.error_message;
        }
        return message;
    }
    toObject() {
        const data: {
            checkout_url?: string;
            session_id?: string;
            success?: boolean;
            error_message?: string;
        } = {};
        if (this.checkout_url != null) {
            data.checkout_url = this.checkout_url;
        }
        if (this.session_id != null) {
            data.session_id = this.session_id;
        }
        if (this.success != null) {
            data.success = this.success;
        }
        if (this.error_message != null) {
            data.error_message = this.error_message;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.checkout_url.length)
            writer.writeString(1, this.checkout_url);
        if (this.session_id.length)
            writer.writeString(2, this.session_id);
        if (this.success != false)
            writer.writeBool(3, this.success);
        if (this.error_message.length)
            writer.writeString(4, this.error_message);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateCheckoutSessionResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateCheckoutSessionResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.checkout_url = reader.readString();
                    break;
                case 2:
                    message.session_id = reader.readString();
                    break;
                case 3:
                    message.success = reader.readBool();
                    break;
                case 4:
                    message.error_message = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateCheckoutSessionResponse {
        return CreateCheckoutSessionResponse.deserialize(bytes);
    }
}
export class UserSubscriptionInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user_id?: string;
        subscription?: Subscription;
        plan?: Plan;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user_id" in data && data.user_id != undefined) {
                this.user_id = data.user_id;
            }
            if ("subscription" in data && data.subscription != undefined) {
                this.subscription = data.subscription;
            }
            if ("plan" in data && data.plan != undefined) {
                this.plan = data.plan;
            }
        }
    }
    get user_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set user_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get subscription() {
        return pb_1.Message.getWrapperField(this, Subscription, 2) as Subscription;
    }
    set subscription(value: Subscription) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_subscription() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get plan() {
        return pb_1.Message.getWrapperField(this, Plan, 3) as Plan;
    }
    set plan(value: Plan) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_plan() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        user_id?: string;
        subscription?: ReturnType<typeof Subscription.prototype.toObject>;
        plan?: ReturnType<typeof Plan.prototype.toObject>;
    }): UserSubscriptionInfo {
        const message = new UserSubscriptionInfo({});
        if (data.user_id != null) {
            message.user_id = data.user_id;
        }
        if (data.subscription != null) {
            message.subscription = Subscription.fromObject(data.subscription);
        }
        if (data.plan != null) {
            message.plan = Plan.fromObject(data.plan);
        }
        return message;
    }
    toObject() {
        const data: {
            user_id?: string;
            subscription?: ReturnType<typeof Subscription.prototype.toObject>;
            plan?: ReturnType<typeof Plan.prototype.toObject>;
        } = {};
        if (this.user_id != null) {
            data.user_id = this.user_id;
        }
        if (this.subscription != null) {
            data.subscription = this.subscription.toObject();
        }
        if (this.plan != null) {
            data.plan = this.plan.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.user_id.length)
            writer.writeString(1, this.user_id);
        if (this.has_subscription)
            writer.writeMessage(2, this.subscription, () => this.subscription.serialize(writer));
        if (this.has_plan)
            writer.writeMessage(3, this.plan, () => this.plan.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserSubscriptionInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserSubscriptionInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.user_id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.subscription, () => message.subscription = Subscription.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.plan, () => message.plan = Plan.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UserSubscriptionInfo {
        return UserSubscriptionInfo.deserialize(bytes);
    }
}
export class Subscription extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        user_id?: string;
        plan_id?: string;
        provider?: string;
        provider_customer_id?: string;
        provider_subscription_id?: string;
        status?: string;
        current_period_start?: dependency_1.Timestamp;
        current_period_end?: dependency_1.Timestamp;
        created_at?: dependency_1.Timestamp;
        updated_at?: dependency_1.Timestamp;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("user_id" in data && data.user_id != undefined) {
                this.user_id = data.user_id;
            }
            if ("plan_id" in data && data.plan_id != undefined) {
                this.plan_id = data.plan_id;
            }
            if ("provider" in data && data.provider != undefined) {
                this.provider = data.provider;
            }
            if ("provider_customer_id" in data && data.provider_customer_id != undefined) {
                this.provider_customer_id = data.provider_customer_id;
            }
            if ("provider_subscription_id" in data && data.provider_subscription_id != undefined) {
                this.provider_subscription_id = data.provider_subscription_id;
            }
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
            if ("current_period_start" in data && data.current_period_start != undefined) {
                this.current_period_start = data.current_period_start;
            }
            if ("current_period_end" in data && data.current_period_end != undefined) {
                this.current_period_end = data.current_period_end;
            }
            if ("created_at" in data && data.created_at != undefined) {
                this.created_at = data.created_at;
            }
            if ("updated_at" in data && data.updated_at != undefined) {
                this.updated_at = data.updated_at;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get user_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set user_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get plan_id() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set plan_id(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get provider() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set provider(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get provider_customer_id() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set provider_customer_id(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get provider_subscription_id() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set provider_subscription_id(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get status() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set status(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get current_period_start() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 8) as dependency_1.Timestamp;
    }
    set current_period_start(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 8, value);
    }
    get has_current_period_start() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get current_period_end() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 9) as dependency_1.Timestamp;
    }
    set current_period_end(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 9, value);
    }
    get has_current_period_end() {
        return pb_1.Message.getField(this, 9) != null;
    }
    get created_at() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 10) as dependency_1.Timestamp;
    }
    set created_at(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 10, value);
    }
    get has_created_at() {
        return pb_1.Message.getField(this, 10) != null;
    }
    get updated_at() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 11) as dependency_1.Timestamp;
    }
    set updated_at(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 11, value);
    }
    get has_updated_at() {
        return pb_1.Message.getField(this, 11) != null;
    }
    static fromObject(data: {
        id?: string;
        user_id?: string;
        plan_id?: string;
        provider?: string;
        provider_customer_id?: string;
        provider_subscription_id?: string;
        status?: string;
        current_period_start?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        current_period_end?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        created_at?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        updated_at?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
    }): Subscription {
        const message = new Subscription({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.user_id != null) {
            message.user_id = data.user_id;
        }
        if (data.plan_id != null) {
            message.plan_id = data.plan_id;
        }
        if (data.provider != null) {
            message.provider = data.provider;
        }
        if (data.provider_customer_id != null) {
            message.provider_customer_id = data.provider_customer_id;
        }
        if (data.provider_subscription_id != null) {
            message.provider_subscription_id = data.provider_subscription_id;
        }
        if (data.status != null) {
            message.status = data.status;
        }
        if (data.current_period_start != null) {
            message.current_period_start = dependency_1.Timestamp.fromObject(data.current_period_start);
        }
        if (data.current_period_end != null) {
            message.current_period_end = dependency_1.Timestamp.fromObject(data.current_period_end);
        }
        if (data.created_at != null) {
            message.created_at = dependency_1.Timestamp.fromObject(data.created_at);
        }
        if (data.updated_at != null) {
            message.updated_at = dependency_1.Timestamp.fromObject(data.updated_at);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            user_id?: string;
            plan_id?: string;
            provider?: string;
            provider_customer_id?: string;
            provider_subscription_id?: string;
            status?: string;
            current_period_start?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            current_period_end?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            created_at?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            updated_at?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.user_id != null) {
            data.user_id = this.user_id;
        }
        if (this.plan_id != null) {
            data.plan_id = this.plan_id;
        }
        if (this.provider != null) {
            data.provider = this.provider;
        }
        if (this.provider_customer_id != null) {
            data.provider_customer_id = this.provider_customer_id;
        }
        if (this.provider_subscription_id != null) {
            data.provider_subscription_id = this.provider_subscription_id;
        }
        if (this.status != null) {
            data.status = this.status;
        }
        if (this.current_period_start != null) {
            data.current_period_start = this.current_period_start.toObject();
        }
        if (this.current_period_end != null) {
            data.current_period_end = this.current_period_end.toObject();
        }
        if (this.created_at != null) {
            data.created_at = this.created_at.toObject();
        }
        if (this.updated_at != null) {
            data.updated_at = this.updated_at.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.user_id.length)
            writer.writeString(2, this.user_id);
        if (this.plan_id.length)
            writer.writeString(3, this.plan_id);
        if (this.provider.length)
            writer.writeString(4, this.provider);
        if (this.provider_customer_id.length)
            writer.writeString(5, this.provider_customer_id);
        if (this.provider_subscription_id.length)
            writer.writeString(6, this.provider_subscription_id);
        if (this.status.length)
            writer.writeString(7, this.status);
        if (this.has_current_period_start)
            writer.writeMessage(8, this.current_period_start, () => this.current_period_start.serialize(writer));
        if (this.has_current_period_end)
            writer.writeMessage(9, this.current_period_end, () => this.current_period_end.serialize(writer));
        if (this.has_created_at)
            writer.writeMessage(10, this.created_at, () => this.created_at.serialize(writer));
        if (this.has_updated_at)
            writer.writeMessage(11, this.updated_at, () => this.updated_at.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Subscription {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Subscription();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.user_id = reader.readString();
                    break;
                case 3:
                    message.plan_id = reader.readString();
                    break;
                case 4:
                    message.provider = reader.readString();
                    break;
                case 5:
                    message.provider_customer_id = reader.readString();
                    break;
                case 6:
                    message.provider_subscription_id = reader.readString();
                    break;
                case 7:
                    message.status = reader.readString();
                    break;
                case 8:
                    reader.readMessage(message.current_period_start, () => message.current_period_start = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 9:
                    reader.readMessage(message.current_period_end, () => message.current_period_end = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 10:
                    reader.readMessage(message.created_at, () => message.created_at = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 11:
                    reader.readMessage(message.updated_at, () => message.updated_at = dependency_1.Timestamp.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Subscription {
        return Subscription.deserialize(bytes);
    }
}
export class Plan extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        name?: string;
        price_cents?: number;
        is_active?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("price_cents" in data && data.price_cents != undefined) {
                this.price_cents = data.price_cents;
            }
            if ("is_active" in data && data.is_active != undefined) {
                this.is_active = data.is_active;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get price_cents() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set price_cents(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get is_active() {
        return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
    }
    set is_active(value: boolean) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        id?: string;
        name?: string;
        price_cents?: number;
        is_active?: boolean;
    }): Plan {
        const message = new Plan({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.price_cents != null) {
            message.price_cents = data.price_cents;
        }
        if (data.is_active != null) {
            message.is_active = data.is_active;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            name?: string;
            price_cents?: number;
            is_active?: boolean;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.price_cents != null) {
            data.price_cents = this.price_cents;
        }
        if (this.is_active != null) {
            data.is_active = this.is_active;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.price_cents != 0)
            writer.writeInt64(3, this.price_cents);
        if (this.is_active != false)
            writer.writeBool(4, this.is_active);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Plan {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Plan();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.price_cents = reader.readInt64();
                    break;
                case 4:
                    message.is_active = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Plan {
        return Plan.deserialize(bytes);
    }
}
export abstract class UnimplementedPaymentServiceService {
    static definition = {
        GetUserSubscription: {
            path: "/paymentservice.PaymentService/GetUserSubscription",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: GetUserSubscriptionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => GetUserSubscriptionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: GetUserSubscriptionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => GetUserSubscriptionResponse.deserialize(new Uint8Array(bytes))
        },
        GetPlans: {
            path: "/paymentservice.PaymentService/GetPlans",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: GetPlansRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => GetPlansRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: GetPlansResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => GetPlansResponse.deserialize(new Uint8Array(bytes))
        },
        CreateCheckoutSession: {
            path: "/paymentservice.PaymentService/CreateCheckoutSession",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: CreateCheckoutSessionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => CreateCheckoutSessionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: CreateCheckoutSessionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => CreateCheckoutSessionResponse.deserialize(new Uint8Array(bytes))
        },
        CreateUserSubscription: {
            path: "/paymentservice.PaymentService/CreateUserSubscription",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: CreateUserSubscriptionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => CreateUserSubscriptionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: CreateUserSubscriptionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => CreateUserSubscriptionResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract GetUserSubscription(call: grpc_1.ServerUnaryCall<GetUserSubscriptionRequest, GetUserSubscriptionResponse>, callback: grpc_1.sendUnaryData<GetUserSubscriptionResponse>): void;
    abstract GetPlans(call: grpc_1.ServerUnaryCall<GetPlansRequest, GetPlansResponse>, callback: grpc_1.sendUnaryData<GetPlansResponse>): void;
    abstract CreateCheckoutSession(call: grpc_1.ServerUnaryCall<CreateCheckoutSessionRequest, CreateCheckoutSessionResponse>, callback: grpc_1.sendUnaryData<CreateCheckoutSessionResponse>): void;
    abstract CreateUserSubscription(call: grpc_1.ServerUnaryCall<CreateUserSubscriptionRequest, CreateUserSubscriptionResponse>, callback: grpc_1.sendUnaryData<CreateUserSubscriptionResponse>): void;
}
export class PaymentServiceClient {
    private _address: string;
    private _client: grpc_web_1.GrpcWebClientBase;
    constructor(address: string, credentials?: Object, options?: grpc_web_1.GrpcWebClientBaseOptions) {
        if (!options)
            options = {};
        options.format = options.format || "text";
        this._address = address;
        this._client = new grpc_web_1.GrpcWebClientBase(options);
    }
    private static GetUserSubscription = new grpc_web_1.MethodDescriptor<GetUserSubscriptionRequest, GetUserSubscriptionResponse>("/paymentservice.PaymentService/GetUserSubscription", grpc_web_1.MethodType.UNARY, GetUserSubscriptionRequest, GetUserSubscriptionResponse, (message: GetUserSubscriptionRequest) => message.serialize(), GetUserSubscriptionResponse.deserialize);
    GetUserSubscription(message: GetUserSubscriptionRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<GetUserSubscriptionRequest, GetUserSubscriptionResponse>(this._address + "/paymentservice.PaymentService/GetUserSubscription", message, metadata || {}, PaymentServiceClient.GetUserSubscription);
    }
    private static GetPlans = new grpc_web_1.MethodDescriptor<GetPlansRequest, GetPlansResponse>("/paymentservice.PaymentService/GetPlans", grpc_web_1.MethodType.UNARY, GetPlansRequest, GetPlansResponse, (message: GetPlansRequest) => message.serialize(), GetPlansResponse.deserialize);
    GetPlans(message: GetPlansRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<GetPlansRequest, GetPlansResponse>(this._address + "/paymentservice.PaymentService/GetPlans", message, metadata || {}, PaymentServiceClient.GetPlans);
    }
    private static CreateCheckoutSession = new grpc_web_1.MethodDescriptor<CreateCheckoutSessionRequest, CreateCheckoutSessionResponse>("/paymentservice.PaymentService/CreateCheckoutSession", grpc_web_1.MethodType.UNARY, CreateCheckoutSessionRequest, CreateCheckoutSessionResponse, (message: CreateCheckoutSessionRequest) => message.serialize(), CreateCheckoutSessionResponse.deserialize);
    CreateCheckoutSession(message: CreateCheckoutSessionRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<CreateCheckoutSessionRequest, CreateCheckoutSessionResponse>(this._address + "/paymentservice.PaymentService/CreateCheckoutSession", message, metadata || {}, PaymentServiceClient.CreateCheckoutSession);
    }
    private static CreateUserSubscription = new grpc_web_1.MethodDescriptor<CreateUserSubscriptionRequest, CreateUserSubscriptionResponse>("/paymentservice.PaymentService/CreateUserSubscription", grpc_web_1.MethodType.UNARY, CreateUserSubscriptionRequest, CreateUserSubscriptionResponse, (message: CreateUserSubscriptionRequest) => message.serialize(), CreateUserSubscriptionResponse.deserialize);
    CreateUserSubscription(message: CreateUserSubscriptionRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<CreateUserSubscriptionRequest, CreateUserSubscriptionResponse>(this._address + "/paymentservice.PaymentService/CreateUserSubscription", message, metadata || {}, PaymentServiceClient.CreateUserSubscription);
    }
}

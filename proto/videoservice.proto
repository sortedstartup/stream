syntax = "proto3";

package videoservice;

option go_package = "sortedstartup.com/stream/videoservice/proto";

import "google/protobuf/timestamp.proto";
// please ignore import error, go generate will run properly
import "userservice.proto";

service VideoService {
  // Core video operations
  rpc CreateVideo(CreateVideoRequest) returns (Video);
  rpc GetVideo(GetVideoRequest) returns (Video);
  rpc ListVideos(ListVideosRequest) returns (ListVideosResponse);
  rpc UpdateVideo(UpdateVideoRequest) returns (Video);
  rpc DeleteVideo(DeleteVideoRequest) returns (DeleteVideoResponse);

  // Video-Channel Management
  rpc MoveVideoToChannel(MoveVideoToChannelRequest) returns (MoveVideoToChannelResponse);
  rpc RemoveVideoFromChannel(RemoveVideoFromChannelRequest) returns (RemoveVideoFromChannelResponse);

  // Sharing
  rpc ShareVideo(ShareVideoRequest) returns (ShareLink);
  
  // Storage access control (moved from payment service)
  rpc CheckStorageAccess(CheckStorageAccessRequest) returns (CheckStorageAccessResponse);
  rpc UpdateStorageUsage(UpdateStorageUsageRequest) returns (UpdateStorageUsageResponse);
  rpc GetStorageUsage(GetStorageUsageRequest) returns (GetStorageUsageResponse);
  
  // Plan storage limits
  rpc GetPlanStorageLimit(GetPlanStorageLimitRequest) returns (GetPlanStorageLimitResponse);
  
  // Get user storage usage with plan limits (for frontend display)
  rpc GetUserStorageInfo(GetUserStorageInfoRequest) returns (GetUserStorageInfoResponse);
}

service ChannelService {
  rpc CreateChannel(CreateChannelRequest) returns (CreateChannelResponse);
  rpc UpdateChannel(UpdateChannelRequest) returns (UpdateChannelResponse);
  rpc GetChannels(GetChannelsRequest) returns (GetChannelsResponse);
  rpc GetMembers(GetChannelMembersRequest) returns (GetChannelMembersResponse);
  rpc AddMember(AddChannelMemberRequest) returns (AddChannelMemberResponse);
  rpc RemoveMember(RemoveChannelMemberRequest) returns (RemoveChannelMemberResponse);
}

message Video {
  string id = 1;
  string title = 2;
  string description = 3;
  string user_id = 4;
  string url = 5;
  string thumbnail_url = 6;
  VideoStatus status = 7;
  Visibility visibility = 8;
  google.protobuf.Timestamp created_at = 9;
  string channel_id = 10; // Optional: channel this video belongs to
  int64 duration_seconds = 11;
}

enum VideoStatus {
  STATUS_UNSPECIFIED = 0;
  STATUS_PROCESSING = 1;
  STATUS_READY = 2;
  STATUS_FAILED = 3;
}

enum Visibility {
  VISIBILITY_PRIVATE = 0;
  VISIBILITY_SHARED = 1;
  VISIBILITY_PUBLIC = 2;
}

message CreateVideoRequest {
  string title = 1;
  string description = 2;
  string url = 3;
  Visibility visibility = 4;
}

message GetVideoRequest {
  string video_id = 1;
}

message ListVideosRequest {
  int32 page_number = 1;
  int32 page_size = 2;
  string channel_id = 3; // Optional: filter by channel
}

message ListVideosResponse {
  repeated Video videos = 1;
}

message UpdateVideoRequest {
  string video_id = 1;
  string title = 2;
  string description = 3;
  Visibility visibility = 4;
}

message DeleteVideoRequest {
  string video_id = 1;
}

message DeleteVideoResponse {
  string message = 1;
}

message ShareVideoRequest {
  string video_id = 1;
}

message ShareLink {
  string id = 1;
  string url = 2;
}

message Empty {}

message Channel {
  string id = 1;
  string tenant_id = 2;
  string name = 3;
  string description = 4;
  string created_by = 6;
  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp updated_at = 8;
  string user_role = 9; // Current user's role in this channel: owner, uploader, viewer
  int32 member_count = 10; // Number of members (only populated for owners)
  int32 video_count = 11;  // Number of videos in this channel
}

message ChannelMember {
  userservice.User user = 1;
  string role = 2; // owner, uploader, viewer
  string added_by = 3;
  google.protobuf.Timestamp created_at = 4;
}

message CreateChannelRequest {
  string name = 2;
  string description = 3;
}

message CreateChannelResponse {
  string message = 1;
  Channel channel = 2;
}

message UpdateChannelRequest {
  string channel_id = 2;
  string name = 3;
  string description = 4;
}

message UpdateChannelResponse {
  string message = 1;
  Channel channel = 2;
}

message GetChannelsRequest {
}

message GetChannelsResponse {
  string message = 1;
  repeated Channel channels = 2;
}

message GetChannelMembersRequest {
  string channel_id = 2;
}

message GetChannelMembersResponse {
  string message = 1;
  repeated ChannelMember channel_members = 2;
}

message AddChannelMemberRequest {
  string channel_id = 2;
  string user_id = 3;
  string role = 4; // owner, uploader, viewer
}

message AddChannelMemberResponse {
  string message = 1;
}

message RemoveChannelMemberRequest {
  string channel_id = 2;
  string user_id = 3;
}

message RemoveChannelMemberResponse {
  string message = 1;
}

// Video-Channel Management Messages
message MoveVideoToChannelRequest {
  string video_id = 1;
  string channel_id = 2;
}

message MoveVideoToChannelResponse {
  string message = 1;
  Video video = 2;
}

message RemoveVideoFromChannelRequest {
  string video_id = 1;
}

message RemoveVideoFromChannelResponse {
  string message = 1;
  Video video = 2;
}

// Storage access control messages (moved from payment service)
message CheckStorageAccessRequest {
  string user_id = 1;
  int64 requested_bytes = 2;
  string tenant_id = 3; // optional
}

message CheckStorageAccessResponse {
  bool has_access = 1;
  string reason = 2;
  StorageInfo storage_info = 3;
  bool is_near_limit = 4;
  string warning_message = 5;
}

message StorageInfo {
  int64 used_bytes = 1;
  int64 limit_bytes = 2;
  double usage_percent = 3;
  string plan_id = 4;
}

message UpdateStorageUsageRequest {
  string user_id = 1;
  int64 usage_change = 2; // Can be positive (add) or negative (subtract)
}

message UpdateStorageUsageResponse {
  bool success = 1;
  string error_message = 2;
  StorageInfo updated_info = 3;
}

message GetStorageUsageRequest {
  string user_id = 1;
}

message GetStorageUsageResponse {
  bool success = 1;
  string error_message = 2;
  StorageInfo storage_info = 3;
}

// Get user storage info with plan limits (for frontend)
message GetUserStorageInfoRequest {
  string user_id = 1;
}

message GetUserStorageInfoResponse {
  bool success = 1;
  string error_message = 2;
  StorageInfo storage_info = 3;
}

// Get plan storage limit
message GetPlanStorageLimitRequest {
  string plan_id = 1;
}

message GetPlanStorageLimitResponse {
  bool success = 1;
  string error_message = 2;
  int64 storage_limit_bytes = 3;
}